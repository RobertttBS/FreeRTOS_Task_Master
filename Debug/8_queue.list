
8_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08008f64  08008f64  00009f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009538  08009538  0000b084  2**0
                  CONTENTS
  4 .ARM          00000008  08009538  08009538  0000a538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009540  08009540  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009540  08009540  0000a540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009544  08009544  0000a544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009548  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013080  20000084  080095cc  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013104  080095cc  0000b104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001627b  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003704  00000000  00000000  0002132f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00024a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f45  00000000  00000000  00025dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019703  00000000  00000000  00026d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d99  00000000  00000000  00040418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dab1  00000000  00000000  000581b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  000f5ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fb664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f4c 	.word	0x08008f4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08008f4c 	.word	0x08008f4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f001 f8dd 	bl	8001764 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f90d 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 fa11 	bl	80009d4 <MX_GPIO_Init>
	MX_RTC_Init();
 80005b2:	f000 f973 	bl	800089c <MX_RTC_Init>
	MX_USART2_UART_Init();
 80005b6:	f000 f9e3 	bl	8000980 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80005ba:	f000 f995 	bl	80008e8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* Start PWM */
 80005be:	2100      	movs	r1, #0
 80005c0:	4869      	ldr	r0, [pc, #420]	@ (8000768 <main+0x1c8>)
 80005c2:	f002 fd75 	bl	80030b0 <HAL_TIM_PWM_Start>

	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2,
 80005c6:	4b69      	ldr	r3, [pc, #420]	@ (800076c <main+0x1cc>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22fa      	movs	r2, #250	@ 0xfa
 80005d2:	4967      	ldr	r1, [pc, #412]	@ (8000770 <main+0x1d0>)
 80005d4:	4867      	ldr	r0, [pc, #412]	@ (8000774 <main+0x1d4>)
 80005d6:	f005 f91b 	bl	8005810 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]
			&handle_menu_task);
	configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x56>

	status = xTaskCreate(uart_task, "uart_task", 250, NULL, 2,
 80005fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000778 <main+0x1d8>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22fa      	movs	r2, #250	@ 0xfa
 8000606:	495d      	ldr	r1, [pc, #372]	@ (800077c <main+0x1dc>)
 8000608:	485d      	ldr	r0, [pc, #372]	@ (8000780 <main+0x1e0>)
 800060a:	f005 f901 	bl	8005810 <xTaskCreate>
 800060e:	61f8      	str	r0, [r7, #28]
			&handle_uart_task);
	configASSERT(status == pdPASS);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0x8e>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	617b      	str	r3, [r7, #20]
    }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x8a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2,
 800062e:	4b55      	ldr	r3, [pc, #340]	@ (8000784 <main+0x1e4>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22fa      	movs	r2, #250	@ 0xfa
 800063a:	4953      	ldr	r1, [pc, #332]	@ (8000788 <main+0x1e8>)
 800063c:	4853      	ldr	r0, [pc, #332]	@ (800078c <main+0x1ec>)
 800063e:	f005 f8e7 	bl	8005810 <xTaskCreate>
 8000642:	61f8      	str	r0, [r7, #28]
			&handle_cmd_task);
	configASSERT(status == pdPASS);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0xc2>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	613b      	str	r3, [r7, #16]
    }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xbe>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000662:	4b4b      	ldr	r3, [pc, #300]	@ (8000790 <main+0x1f0>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22fa      	movs	r2, #250	@ 0xfa
 800066e:	4949      	ldr	r1, [pc, #292]	@ (8000794 <main+0x1f4>)
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <main+0x1f8>)
 8000672:	f005 f8cd 	bl	8005810 <xTaskCreate>
 8000676:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00b      	beq.n	8000696 <main+0xf6>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60fb      	str	r3, [r7, #12]
    }
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0xf2>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8000696:	4b41      	ldr	r3, [pc, #260]	@ (800079c <main+0x1fc>)
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2302      	movs	r3, #2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	22fa      	movs	r2, #250	@ 0xfa
 80006a2:	493f      	ldr	r1, [pc, #252]	@ (80007a0 <main+0x200>)
 80006a4:	483f      	ldr	r0, [pc, #252]	@ (80007a4 <main+0x204>)
 80006a6:	f005 f8b3 	bl	8005810 <xTaskCreate>
 80006aa:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d00b      	beq.n	80006ca <main+0x12a>
        __asm volatile
 80006b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006b6:	f383 8811 	msr	BASEPRI, r3
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f3bf 8f4f 	dsb	sy
 80006c2:	60bb      	str	r3, [r7, #8]
    }
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	e7fd      	b.n	80006c6 <main+0x126>

	q_data = xQueueCreate(10, sizeof(char));
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	200a      	movs	r0, #10
 80006d0:	f004 fb1e 	bl	8004d10 <xQueueGenericCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a34      	ldr	r2, [pc, #208]	@ (80007a8 <main+0x208>)
 80006d8:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 80006da:	4b33      	ldr	r3, [pc, #204]	@ (80007a8 <main+0x208>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10b      	bne.n	80006fa <main+0x15a>
        __asm volatile
 80006e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e6:	f383 8811 	msr	BASEPRI, r3
 80006ea:	f3bf 8f6f 	isb	sy
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	607b      	str	r3, [r7, #4]
    }
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	e7fd      	b.n	80006f6 <main+0x156>

	q_print = xQueueCreate(10, sizeof(size_t));
 80006fa:	2200      	movs	r2, #0
 80006fc:	2104      	movs	r1, #4
 80006fe:	200a      	movs	r0, #10
 8000700:	f004 fb06 	bl	8004d10 <xQueueGenericCreate>
 8000704:	4603      	mov	r3, r0
 8000706:	4a29      	ldr	r2, [pc, #164]	@ (80007ac <main+0x20c>)
 8000708:	6013      	str	r3, [r2, #0]
	configASSERT(q_print != NULL);
 800070a:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <main+0x20c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10b      	bne.n	800072a <main+0x18a>
        __asm volatile
 8000712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000716:	f383 8811 	msr	BASEPRI, r3
 800071a:	f3bf 8f6f 	isb	sy
 800071e:	f3bf 8f4f 	dsb	sy
 8000722:	603b      	str	r3, [r7, #0]
    }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	e7fd      	b.n	8000726 <main+0x186>

	//Create software timers for LED effects
	handle_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(250),
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <main+0x210>)
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	2201      	movs	r2, #1
 8000732:	21fa      	movs	r1, #250	@ 0xfa
 8000734:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <main+0x214>)
 8000736:	f006 fb97 	bl	8006e68 <xTimerCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <main+0x218>)
 800073e:	6013      	str	r3, [r2, #0]
	pdTRUE, (void*) 1, led_effect_callback);

	HAL_UART_Transmit(&huart2, (uint8_t*) hello, strlen(hello), 100);
 8000740:	481e      	ldr	r0, [pc, #120]	@ (80007bc <main+0x21c>)
 8000742:	f7ff fd4d 	bl	80001e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	491b      	ldr	r1, [pc, #108]	@ (80007bc <main+0x21c>)
 800074e:	481c      	ldr	r0, [pc, #112]	@ (80007c0 <main+0x220>)
 8000750:	f003 f95c 	bl	8003a0c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	491b      	ldr	r1, [pc, #108]	@ (80007c4 <main+0x224>)
 8000758:	4819      	ldr	r0, [pc, #100]	@ (80007c0 <main+0x220>)
 800075a:	f003 fa18 	bl	8003b8e <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 800075e:	f005 f9c3 	bl	8005ae8 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0x1c2>
 8000766:	bf00      	nop
 8000768:	200000e4 	.word	0x200000e4
 800076c:	200000a4 	.word	0x200000a4
 8000770:	08008f64 	.word	0x08008f64
 8000774:	08000fcd 	.word	0x08000fcd
 8000778:	200000a8 	.word	0x200000a8
 800077c:	08008f70 	.word	0x08008f70
 8000780:	080010e9 	.word	0x080010e9
 8000784:	200000a0 	.word	0x200000a0
 8000788:	08008f7c 	.word	0x08008f7c
 800078c:	080011a5 	.word	0x080011a5
 8000790:	200000ac 	.word	0x200000ac
 8000794:	08008f88 	.word	0x08008f88
 8000798:	080015e5 	.word	0x080015e5
 800079c:	200000b0 	.word	0x200000b0
 80007a0:	08008f94 	.word	0x08008f94
 80007a4:	08001495 	.word	0x08001495
 80007a8:	200000b8 	.word	0x200000b8
 80007ac:	200000bc 	.word	0x200000bc
 80007b0:	08000ae9 	.word	0x08000ae9
 80007b4:	08008fa0 	.word	0x08008fa0
 80007b8:	200000b4 	.word	0x200000b4
 80007bc:	20000000 	.word	0x20000000
 80007c0:	2000012c 	.word	0x2000012c
 80007c4:	200000c0 	.word	0x200000c0

080007c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fabe 	bl	8007d58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a27      	ldr	r2, [pc, #156]	@ (8000894 <SystemClock_Config+0xcc>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <SystemClock_Config+0xd0>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000824:	230a      	movs	r3, #10
 8000826:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000834:	2302      	movs	r3, #2
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800083c:	2310      	movs	r3, #16
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000840:	23a8      	movs	r3, #168	@ 0xa8
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f001 faf5 	bl	8001e40 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x98>
		Error_Handler();
 800085c:	f000 f964 	bl	8000b28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2102      	movs	r1, #2
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd57 	bl	8002330 <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xc4>
		Error_Handler();
 8000888:	f000 f94e 	bl	8000b28 <Error_Handler>
	}
}
 800088c:	bf00      	nop
 800088e:	3750      	adds	r7, #80	@ 0x50
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <MX_RTC_Init+0x48>)
 80008a4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008ae:	227f      	movs	r2, #127	@ 0x7f
 80008b0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008b4:	22ff      	movs	r2, #255	@ 0xff
 80008b6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008cc:	f002 f832 	bl	8002934 <HAL_RTC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_RTC_Init+0x3e>
		Error_Handler();
 80008d6:	f000 f927 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000c4 	.word	0x200000c4
 80008e4:	40002800 	.word	0x40002800

080008e8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000904:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_TIM2_Init+0x94>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 127;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_TIM2_Init+0x94>)
 800090e:	227f      	movs	r2, #127	@ 0x7f
 8000910:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_TIM2_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 62499;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_TIM2_Init+0x94>)
 800091a:	f24f 4223 	movw	r2, #62499	@ 0xf423
 800091e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_TIM2_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_TIM2_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800092c:	4813      	ldr	r0, [pc, #76]	@ (800097c <MX_TIM2_Init+0x94>)
 800092e:	f002 fb0d 	bl	8002f4c <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000938:	f000 f8f6 	bl	8000b28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000940:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_TIM2_Init+0x94>)
 800094a:	f002 fd51 	bl	80033f0 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000954:	f000 f8e8 	bl	8000b28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_TIM2_Init+0x94>)
 8000966:	f002 ff7f 	bl	8003868 <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000970:	f000 f8da 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000e4 	.word	0x200000e4

08000980 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f002 ffd8 	bl	800396c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80009c2:	f000 f8b1 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000012c 	.word	0x2000012c
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_GPIO_Init+0x5c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <MX_GPIO_Init+0x5c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_GPIO_Init+0x5c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2120      	movs	r1, #32
 8000a08:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <MX_GPIO_Init+0x60>)
 8000a0a:	f001 f9e5 	bl	8001dd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0x60>)
 8000a24:	f001 f854 	bl	8001ad0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for (uint32_t i = 0; i < 150; i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e002      	b.n	8000a4c <HAL_UART_RxCpltCallback+0x14>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b95      	cmp	r3, #149	@ 0x95
 8000a50:	d9f9      	bls.n	8000a46 <HAL_UART_RxCpltCallback+0xe>
		;

	HAL_UART_Transmit_IT(&huart2, (uint8_t*) &user_data, 1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	4920      	ldr	r1, [pc, #128]	@ (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000a56:	4821      	ldr	r0, [pc, #132]	@ (8000adc <HAL_UART_RxCpltCallback+0xa4>)
 8000a58:	f003 f863 	bl	8003b22 <HAL_UART_Transmit_IT>

	if (!xQueueIsQueueFullFromISR(q_data)) {
 8000a5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_UART_RxCpltCallback+0xa8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fe2a 	bl	80056ba <xQueueIsQueueFullFromISR>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d107      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x44>
		/*Enqueue data byte */
		xQueueSendFromISR(q_data, (void* )&user_data, NULL);
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <HAL_UART_RxCpltCallback+0xa8>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	2200      	movs	r2, #0
 8000a74:	4918      	ldr	r1, [pc, #96]	@ (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000a76:	f004 fabf 	bl	8004ff8 <xQueueGenericSendFromISR>
 8000a7a:	e013      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x6c>
	} else {
		if (user_data == '\n') {
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b0a      	cmp	r3, #10
 8000a84:	d10e      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x6c>
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void*) &dummy, NULL); // task out an element from queue
 8000a86:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <HAL_UART_RxCpltCallback+0xa8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f107 010b 	add.w	r1, r7, #11
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 fc49 	bl	8005328 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void* )&user_data, NULL); // then push the element into the queue
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_UART_RxCpltCallback+0xa8>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	490e      	ldr	r1, [pc, #56]	@ (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000aa0:	f004 faaa 	bl	8004ff8 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if (user_data == '\n') {
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d10a      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x8c>
		/*send notification to command handling task */
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f005 ffbe 	bl	8006a40 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4904      	ldr	r1, [pc, #16]	@ (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <HAL_UART_RxCpltCallback+0xa4>)
 8000aca:	f003 f860 	bl	8003b8e <HAL_UART_Receive_IT>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c0 	.word	0x200000c0
 8000adc:	2000012c 	.word	0x2000012c
 8000ae0:	200000b8 	.word	0x200000b8
 8000ae4:	200000a0 	.word	0x200000a0

08000ae8 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
//		HAL_Delay(4);
//	}
//
//	direction = 0 - direction;

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000af0:	2120      	movs	r1, #32
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <led_effect_callback+0x18>)
 8000af4:	f001 f989 	bl	8001e0a <HAL_GPIO_TogglePin>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40020000 	.word	0x40020000

08000b04 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b16:	f000 fe47 	bl	80017a8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40000c00 	.word	0x40000c00

08000b28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <rtc_configure_date>:
 *      Author: robert
 */

#include "main.h"

void rtc_configure_date(RTC_DateTypeDef *date) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <rtc_configure_date+0x1c>)
 8000b42:	f002 f872 	bl	8002c2a <HAL_RTC_SetDate>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000c4 	.word	0x200000c4

08000b54 <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <rtc_configure_time+0x2c>)
 8000b74:	f001 ff61 	bl	8002a3a <HAL_RTC_SetTime>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000c4 	.word	0x200000c4

08000b84 <show_time_date>:

void show_time_date(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	@ 0x30
 8000b88:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2204      	movs	r2, #4
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 f8e0 	bl	8007d58 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2214      	movs	r2, #20
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 f8da 	bl	8007d58 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4821      	ldr	r0, [pc, #132]	@ (8000c30 <show_time_date+0xac>)
 8000bac:	f001 ffdf 	bl	8002b6e <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481d      	ldr	r0, [pc, #116]	@ (8000c30 <show_time_date+0xac>)
 8000bba:	f002 f8ba 	bl	8002d32 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <show_time_date+0x44>
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <show_time_date+0xb0>)
 8000bc6:	e000      	b.n	8000bca <show_time_date+0x46>
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <show_time_date+0xb4>)
 8000bca:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000bcc:	793b      	ldrb	r3, [r7, #4]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000bce:	4618      	mov	r0, r3
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000bd0:	797b      	ldrb	r3, [r7, #5]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000bd2:	461a      	mov	r2, r3
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	9101      	str	r1, [sp, #4]
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a16      	ldr	r2, [pc, #88]	@ (8000c3c <show_time_date+0xb8>)
 8000be4:	4916      	ldr	r1, [pc, #88]	@ (8000c40 <show_time_date+0xbc>)
 8000be6:	4817      	ldr	r0, [pc, #92]	@ (8000c44 <show_time_date+0xc0>)
 8000be8:	f007 f86a 	bl	8007cc0 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <show_time_date+0xc4>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bf6:	4915      	ldr	r1, [pc, #84]	@ (8000c4c <show_time_date+0xc8>)
 8000bf8:	f004 f8fc 	bl	8004df4 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000bfc:	7e7b      	ldrb	r3, [r7, #25]
 8000bfe:	461a      	mov	r2, r3
			rtc_date.Date, 2000 + rtc_date.Year);
 8000c00:	7ebb      	ldrb	r3, [r7, #26]
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000c02:	4619      	mov	r1, r3
			rtc_date.Date, 2000 + rtc_date.Year);
 8000c04:	7efb      	ldrb	r3, [r7, #27]
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000c06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4910      	ldr	r1, [pc, #64]	@ (8000c50 <show_time_date+0xcc>)
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <show_time_date+0xd0>)
 8000c12:	f007 f855 	bl	8007cc0 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <show_time_date+0xc4>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c20:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <show_time_date+0xd4>)
 8000c22:	f004 f8e7 	bl	8004df4 <xQueueGenericSend>
}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000c4 	.word	0x200000c4
 8000c34:	08008fac 	.word	0x08008fac
 8000c38:	08008fb0 	.word	0x08008fb0
 8000c3c:	08008fb4 	.word	0x08008fb4
 8000c40:	08008fc8 	.word	0x08008fc8
 8000c44:	20000174 	.word	0x20000174
 8000c48:	200000bc 	.word	0x200000bc
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	08008fe0 	.word	0x08008fe0
 8000c54:	2000019c 	.word	0x2000019c
 8000c58:	20000018 	.word	0x20000018

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <HAL_RTC_MspInit+0x50>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d111      	bne.n	8000cf4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fd38 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cea:	f7ff ff1d 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <HAL_RTC_MspInit+0x54>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40002800 	.word	0x40002800
 8000d00:	42470e3c 	.word	0x42470e3c

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d10d      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_TIM_Base_MspInit+0x3c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_TIM_Base_MspInit+0x3c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_TIM_Base_MspInit+0x3c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <HAL_UART_MspInit+0x94>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d133      	bne.n	8000dce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <HAL_UART_MspInit+0x98>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_UART_MspInit+0x98>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <HAL_UART_MspInit+0x98>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x98>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <HAL_UART_MspInit+0x98>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_UART_MspInit+0x98>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <HAL_UART_MspInit+0x9c>)
 8000dba:	f000 fe89 	bl	8001ad0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2106      	movs	r1, #6
 8000dc2:	2026      	movs	r0, #38	@ 0x26
 8000dc4:	f000 fdc8 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc8:	2026      	movs	r0, #38	@ 0x26
 8000dca:	f000 fde1 	bl	8001990 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	@ 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <HAL_InitTick+0xe4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	4a32      	ldr	r2, [pc, #200]	@ (8000ec8 <HAL_InitTick+0xe4>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e04:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <HAL_InitTick+0xe4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fc68 	bl	80026f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2a:	f001 fc39 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000e2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e30:	e004      	b.n	8000e3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e32:	f001 fc35 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3e:	4a23      	ldr	r2, [pc, #140]	@ (8000ecc <HAL_InitTick+0xe8>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3b01      	subs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	@ (8000ed4 <HAL_InitTick+0xf0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000e70:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e72:	f002 f86b 	bl	8002f4c <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d11b      	bne.n	8000ebc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000e84:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <HAL_InitTick+0xec>)
 8000e86:	f002 f8b1 	bl	8002fec <HAL_TIM_Base_Start_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e98:	2032      	movs	r0, #50	@ 0x32
 8000e9a:	f000 fd79 	bl	8001990 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d808      	bhi.n	8000eb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2032      	movs	r0, #50	@ 0x32
 8000eaa:	f000 fd55 	bl	8001958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_InitTick+0xf4>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e002      	b.n	8000ebc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3738      	adds	r7, #56	@ 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	431bde83 	.word	0x431bde83
 8000ed0:	200001c4 	.word	0x200001c4
 8000ed4:	40000c00 	.word	0x40000c00
 8000ed8:	20000024 	.word	0x20000024

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <USART2_IRQHandler+0x10>)
 8000f1a:	f002 fe5d 	bl	8003bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000012c 	.word	0x2000012c

08000f28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM5_IRQHandler+0x10>)
 8000f2e:	f002 f96f 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200001c4 	.word	0x200001c4

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f006 fefc 	bl	8007d68 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	2000020c 	.word	0x2000020c
 8000fa4:	20013108 	.word	0x20013108

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <menu_task>:

const char *msg_inv = "!!!!Invalid option!!!!\n";

state_t curr_state = sMainMenu;

void menu_task(void *param) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char *msg_menu = "\n========================\n"
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <menu_task+0xfc>)
 8000fd6:	613b      	str	r3, [r7, #16]
			"Date and time ----> 1\n"
			"Exit          ----> 2\n"
			"Enter your choice here : ";

	while (1) {
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80010cc <menu_task+0x100>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	f107 0110 	add.w	r1, r7, #16
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe6:	f003 ff05 	bl	8004df4 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff2:	9200      	str	r2, [sp, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f005 fb7b 	bl	80066f4 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	61fb      	str	r3, [r7, #28]

		if (cmd->len == 1) {
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d149      	bne.n	800109e <menu_task+0xd2>
			option = cmd->payload[0] - '0';
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3b30      	subs	r3, #48	@ 0x30
 8001010:	61bb      	str	r3, [r7, #24]
			switch (option) {
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d04b      	beq.n	80010b0 <menu_task+0xe4>
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b02      	cmp	r3, #2
 800101c:	dc36      	bgt.n	800108c <menu_task+0xc0>
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <menu_task+0x60>
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d018      	beq.n	800105c <menu_task+0x90>
 800102a:	e02f      	b.n	800108c <menu_task+0xc0>
			case 0:
				const char *msg_led = "Switch to LED task\n";
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <menu_task+0x104>)
 800102e:	60fb      	str	r3, [r7, #12]
				xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <menu_task+0x100>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f107 010c 	add.w	r1, r7, #12
 8001038:	2300      	movs	r3, #0
 800103a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800103e:	f003 fed9 	bl	8004df4 <xQueueGenericSend>
				curr_state = sLedEffect;
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <menu_task+0x108>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task, 0, eNoAction);
 8001048:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <menu_task+0x10c>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	f005 fbcd 	bl	80067f4 <xTaskGenericNotify>
				break;
 800105a:	e02a      	b.n	80010b2 <menu_task+0xe6>
			case 1:
				const char *msg_rtc = "Switch to RTC task\n";
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <menu_task+0x110>)
 800105e:	60bb      	str	r3, [r7, #8]
				xQueueSend(q_print, &msg_rtc, portMAX_DELAY);
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <menu_task+0x100>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f107 0108 	add.w	r1, r7, #8
 8001068:	2300      	movs	r3, #0
 800106a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800106e:	f003 fec1 	bl	8004df4 <xQueueGenericSend>
				curr_state = sRtcMenu;
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <menu_task+0x108>)
 8001074:	2202      	movs	r2, #2
 8001076:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <menu_task+0x114>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	2300      	movs	r3, #0
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2300      	movs	r3, #0
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	f005 fbb5 	bl	80067f4 <xTaskGenericNotify>
				break;
 800108a:	e012      	b.n	80010b2 <menu_task+0xe6>
			case 2: /*implement exit */
				break;
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <menu_task+0x100>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	2300      	movs	r3, #0
 8001092:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001096:	4913      	ldr	r1, [pc, #76]	@ (80010e4 <menu_task+0x118>)
 8001098:	f003 feac 	bl	8004df4 <xQueueGenericSend>
 800109c:	e79c      	b.n	8000fd8 <menu_task+0xc>
				continue;
			}

		} else {
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <menu_task+0x100>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010a8:	490e      	ldr	r1, [pc, #56]	@ (80010e4 <menu_task+0x118>)
 80010aa:	f003 fea3 	bl	8004df4 <xQueueGenericSend>
			continue;
 80010ae:	e009      	b.n	80010c4 <menu_task+0xf8>
				break;
 80010b0:	bf00      	nop
		}
		// wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2000      	movs	r0, #0
 80010c0:	f005 fb18 	bl	80066f4 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80010c4:	e788      	b.n	8000fd8 <menu_task+0xc>
 80010c6:	bf00      	nop
 80010c8:	08009008 	.word	0x08009008
 80010cc:	200000bc 	.word	0x200000bc
 80010d0:	080090b0 	.word	0x080090b0
 80010d4:	20000210 	.word	0x20000210
 80010d8:	200000ac 	.word	0x200000ac
 80010dc:	080090c4 	.word	0x080090c4
 80010e0:	200000b0 	.word	0x200000b0
 80010e4:	20000020 	.word	0x20000020

080010e8 <uart_task>:
	} // while super loop
}

void uart_task(void *param) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while (1) {
		// Get string from queue and then send it out.
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <uart_task+0x38>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f107 010c 	add.w	r1, r7, #12
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 f831 	bl	8005164 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char*) msg),
 8001102:	68fc      	ldr	r4, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f86a 	bl	80001e0 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001114:	4621      	mov	r1, r4
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <uart_task+0x3c>)
 8001118:	f002 fc78 	bl	8003a0c <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800111c:	bf00      	nop
 800111e:	e7e7      	b.n	80010f0 <uart_task+0x8>
 8001120:	200000bc 	.word	0x200000bc
 8001124:	2000012c 	.word	0x2000012c

08001128 <extract_command>:
		HAL_MAX_DELAY);
	} //while super loop
}

static inline int extract_command(command_t *cmd) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;
	uint8_t i = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]

	// Check if there are any messages waiting in the queue.s
	status = uxQueueMessagesWaiting(q_data);
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <extract_command+0x78>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f004 f98f 	bl	800545c <uxQueueMessagesWaiting>
 800113e:	4603      	mov	r3, r0
 8001140:	613b      	str	r3, [r7, #16]
	if (!status)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <extract_command+0x26>
		return -1;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114c:	e023      	b.n	8001196 <extract_command+0x6e>

	do {
		status = xQueueReceive(q_data, &item, 0);
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <extract_command+0x78>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f107 010f 	add.w	r1, r7, #15
 8001156:	2200      	movs	r2, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f004 f803 	bl	8005164 <xQueueReceive>
 800115e:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE && item != '\r')
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d109      	bne.n	800117a <extract_command+0x52>
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b0d      	cmp	r3, #13
 800116a:	d006      	beq.n	800117a <extract_command+0x52>
			cmd->payload[i++] = item;
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	75fa      	strb	r2, [r7, #23]
 8001172:	461a      	mov	r2, r3
 8001174:	7bf9      	ldrb	r1, [r7, #15]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	5499      	strb	r1, [r3, r2]
	} while (item != '\n');
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d1e6      	bne.n	800114e <extract_command+0x26>

	cmd->payload[i - 1] = '\0';
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3b01      	subs	r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	2100      	movs	r1, #0
 8001188:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1; /*save  length of the command excluding null char */
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	3b01      	subs	r3, #1
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60da      	str	r2, [r3, #12]

	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000b8 	.word	0x200000b8

080011a4 <cmd_handler_task>:

void cmd_handler_task(void *param) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while (1) {
		/*Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f005 fa9b 	bl	80066f4 <xTaskGenericNotifyWait>
 80011be:	61f8      	str	r0, [r7, #28]

		if (ret == pdTRUE) {
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d1f2      	bne.n	80011ac <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			extract_command(&cmd);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffac 	bl	8001128 <extract_command>

			switch (curr_state) {
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <cmd_handler_task+0x88>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	dce9      	bgt.n	80011ac <cmd_handler_task+0x8>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	da1a      	bge.n	8001212 <cmd_handler_task+0x6e>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <cmd_handler_task+0x42>
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d00b      	beq.n	80011fc <cmd_handler_task+0x58>
 80011e4:	e020      	b.n	8001228 <cmd_handler_task+0x84>
			case sMainMenu:
				xTaskNotify(handle_menu_task, (uint32_t )&cmd,
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <cmd_handler_task+0x8c>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	2300      	movs	r3, #0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2303      	movs	r3, #3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f005 fafd 	bl	80067f4 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 80011fa:	e015      	b.n	8001228 <cmd_handler_task+0x84>

			case sLedEffect:
				xTaskNotify(handle_led_task, (uint32_t )&cmd,
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <cmd_handler_task+0x90>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 020c 	add.w	r2, r7, #12
 8001204:	2300      	movs	r3, #0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2303      	movs	r3, #3
 800120a:	2100      	movs	r1, #0
 800120c:	f005 faf2 	bl	80067f4 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 8001210:	e00a      	b.n	8001228 <cmd_handler_task+0x84>

			case sRtcMenu:
			case sRtcTimeConfig:
			case sRtcDateConfig:
			case sRtcReport:
				xTaskNotify(handle_rtc_task, (uint32_t )&cmd,
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <cmd_handler_task+0x94>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f107 020c 	add.w	r2, r7, #12
 800121a:	2300      	movs	r3, #0
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2303      	movs	r3, #3
 8001220:	2100      	movs	r1, #0
 8001222:	f005 fae7 	bl	80067f4 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 8001226:	bf00      	nop
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001228:	e7c0      	b.n	80011ac <cmd_handler_task+0x8>
 800122a:	bf00      	nop
 800122c:	20000210 	.word	0x20000210
 8001230:	200000a4 	.word	0x200000a4
 8001234:	200000ac 	.word	0x200000ac
 8001238:	200000b0 	.word	0x200000b0

0800123c <led_effect_stop>:
			}
		}
	}
}

void led_effect_stop(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af02      	add	r7, sp, #8
	xTimerStop(handle_led_timer, portMAX_DELAY);
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <led_effect_stop+0x20>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	2103      	movs	r1, #3
 8001252:	f005 fe63 	bl	8006f1c <xTimerGenericCommand>
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000b4 	.word	0x200000b4

08001260 <led_effect>:

static inline void led_effect(int n) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b092      	sub	sp, #72	@ 0x48
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
	// use sprintf() put "You select type %d\n"
	char msg[50];
	sprintf(msg, "You select type %d led effect\n", n);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4912      	ldr	r1, [pc, #72]	@ (80012b8 <led_effect+0x58>)
 8001270:	4618      	mov	r0, r3
 8001272:	f006 fd25 	bl	8007cc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	f107 010c 	add.w	r1, r7, #12
 8001288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <led_effect+0x5c>)
 800128e:	f002 fbbd 	bl	8003a0c <HAL_UART_Transmit>

	led_effect_stop();
 8001292:	f7ff ffd3 	bl	800123c <led_effect_stop>
	xTimerChangePeriod(handle_led_timer, n * portTICK_PERIOD_MS * 1000, 100);
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <led_effect+0x60>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a0:	fb03 f202 	mul.w	r2, r3, r2
 80012a4:	2364      	movs	r3, #100	@ 0x64
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	2104      	movs	r1, #4
 80012ac:	f005 fe36 	bl	8006f1c <xTimerGenericCommand>
}
 80012b0:	bf00      	nop
 80012b2:	3740      	adds	r7, #64	@ 0x40
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	080090d8 	.word	0x080090d8
 80012bc:	2000012c 	.word	0x2000012c
 80012c0:	200000b4 	.word	0x200000b4

080012c4 <rtc_time_config>:

void rtc_time_config(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	@ 0x38
 80012c8:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef time;
	const char *msg = "Enter hour(1-12):minutes(0-59):seconds(0-59)\n";
 80012ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <rtc_time_config+0xc0>)
 80012cc:	617b      	str	r3, [r7, #20]
	int min;
	int sec;
	uint32_t cmd_addr;
	command_t *cmd;

	xQueueSend(q_print, &msg, portMAX_DELAY);
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <rtc_time_config+0xc4>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f107 0114 	add.w	r1, r7, #20
 80012d6:	2300      	movs	r3, #0
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012dc:	f003 fd8a 	bl	8004df4 <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 fa01 	bl	80066f4 <xTaskGenericNotifyWait>
	cmd = (command_t*) cmd_addr;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// parse the string "cmd", which format is <hour>:<min>:<sec> into the uint8_t variables
	if (sscanf((char*) cmd->payload, "%d:%d:%d", &hour, &min, &sec) == 3) {
 80012f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	f107 0210 	add.w	r2, r7, #16
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	460b      	mov	r3, r1
 8001308:	4920      	ldr	r1, [pc, #128]	@ (800138c <rtc_time_config+0xc8>)
 800130a:	f006 fcf9 	bl	8007d00 <siscanf>
 800130e:	4603      	mov	r3, r0
 8001310:	2b03      	cmp	r3, #3
 8001312:	d12b      	bne.n	800136c <rtc_time_config+0xa8>
		// Validate the input
		if (hour >= 1 && hour <= 12 && min >= 0 && min <= 59 && sec >= 0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dd1f      	ble.n	800135a <rtc_time_config+0x96>
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	dc1c      	bgt.n	800135a <rtc_time_config+0x96>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db19      	blt.n	800135a <rtc_time_config+0x96>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b3b      	cmp	r3, #59	@ 0x3b
 800132a:	dc16      	bgt.n	800135a <rtc_time_config+0x96>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db13      	blt.n	800135a <rtc_time_config+0x96>
				&& sec <= 59) {
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b3b      	cmp	r3, #59	@ 0x3b
 8001336:	dc10      	bgt.n	800135a <rtc_time_config+0x96>
			time.Hours = (uint8_t) hour;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	763b      	strb	r3, [r7, #24]
			time.Minutes = (uint8_t) min;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	767b      	strb	r3, [r7, #25]
			time.Seconds = (uint8_t) sec;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	76bb      	strb	r3, [r7, #26]

			rtc_configure_time(&time);
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fc00 	bl	8000b54 <rtc_configure_time>
			// Print success message
			msg = "Time set successfully\n";
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <rtc_time_config+0xcc>)
 8001356:	617b      	str	r3, [r7, #20]
		}
	} else {
		// invalid entry
		xQueueSend(q_print, &msg_inv, portMAX_DELAY);
	}
}
 8001358:	e010      	b.n	800137c <rtc_time_config+0xb8>
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <rtc_time_config+0xc4>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001364:	490b      	ldr	r1, [pc, #44]	@ (8001394 <rtc_time_config+0xd0>)
 8001366:	f003 fd45 	bl	8004df4 <xQueueGenericSend>
}
 800136a:	e007      	b.n	800137c <rtc_time_config+0xb8>
		xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <rtc_time_config+0xc4>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001376:	4907      	ldr	r1, [pc, #28]	@ (8001394 <rtc_time_config+0xd0>)
 8001378:	f003 fd3c 	bl	8004df4 <xQueueGenericSend>
}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	@ 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	080090f8 	.word	0x080090f8
 8001388:	200000bc 	.word	0x200000bc
 800138c:	08009128 	.word	0x08009128
 8001390:	08009134 	.word	0x08009134
 8001394:	20000020 	.word	0x20000020

08001398 <rtc_date_config>:

void rtc_date_config(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef date;
	const char *msg = "Enter month:day:year (e.g., 1:1:2023)\n";
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <rtc_date_config+0xe4>)
 80013a0:	617b      	str	r3, [r7, #20]
	int month, day, year;
	uint32_t cmd_addr;
	command_t *cmd;

	xQueueSend(q_print, &msg, portMAX_DELAY);
 80013a2:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <rtc_date_config+0xe8>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f107 0114 	add.w	r1, r7, #20
 80013aa:	2300      	movs	r3, #0
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b0:	f003 fd20 	bl	8004df4 <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f005 f997 	bl	80066f4 <xTaskGenericNotifyWait>
	cmd = (command_t*) cmd_addr;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	61fb      	str	r3, [r7, #28]

	if (sscanf((char*) cmd->payload, "%d:%d:%d", &month, &day, &year) == 3) {
 80013ca:	69f8      	ldr	r0, [r7, #28]
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	f107 0210 	add.w	r2, r7, #16
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	460b      	mov	r3, r1
 80013dc:	4929      	ldr	r1, [pc, #164]	@ (8001484 <rtc_date_config+0xec>)
 80013de:	f006 fc8f 	bl	8007d00 <siscanf>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d139      	bne.n	800145c <rtc_date_config+0xc4>
		if (year >= 0 && year <= 100 && month >= 1 && month <= 12 && day >= 1
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db2a      	blt.n	8001444 <rtc_date_config+0xac>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b64      	cmp	r3, #100	@ 0x64
 80013f2:	dc27      	bgt.n	8001444 <rtc_date_config+0xac>
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd24      	ble.n	8001444 <rtc_date_config+0xac>
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	dc21      	bgt.n	8001444 <rtc_date_config+0xac>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	dd1e      	ble.n	8001444 <rtc_date_config+0xac>
				&& day <= 31) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b1f      	cmp	r3, #31
 800140a:	dc1b      	bgt.n	8001444 <rtc_date_config+0xac>
			date.Date = (uint8_t) day;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	76bb      	strb	r3, [r7, #26]
			date.Month = (uint8_t) month;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	767b      	strb	r3, [r7, #25]
			date.Year = (uint8_t) (year - 2000); // RTC typically uses years since 2000
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	3330      	adds	r3, #48	@ 0x30
 800141e:	b2db      	uxtb	r3, r3
 8001420:	76fb      	strb	r3, [r7, #27]

			rtc_configure_date(&date);
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fb84 	bl	8000b34 <rtc_configure_date>
			msg = "Date set successfully\n";
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <rtc_date_config+0xf0>)
 800142e:	617b      	str	r3, [r7, #20]
			xQueueSend(q_print, &msg, portMAX_DELAY);
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <rtc_date_config+0xe8>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f107 0114 	add.w	r1, r7, #20
 8001438:	2300      	movs	r3, #0
 800143a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800143e:	f003 fcd9 	bl	8004df4 <xQueueGenericSend>
		}
	} else {
		msg = "Invalid input format. Please use MONTH:DAY:YEAR format.\n";
		xQueueSend(q_print, &msg, portMAX_DELAY);
	}
}
 8001442:	e016      	b.n	8001472 <rtc_date_config+0xda>
			msg = "Invalid date range. Please enter valid values.\n";
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <rtc_date_config+0xf4>)
 8001446:	617b      	str	r3, [r7, #20]
			xQueueSend(q_print, &msg, portMAX_DELAY);
 8001448:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <rtc_date_config+0xe8>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f107 0114 	add.w	r1, r7, #20
 8001450:	2300      	movs	r3, #0
 8001452:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001456:	f003 fccd 	bl	8004df4 <xQueueGenericSend>
}
 800145a:	e00a      	b.n	8001472 <rtc_date_config+0xda>
		msg = "Invalid input format. Please use MONTH:DAY:YEAR format.\n";
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <rtc_date_config+0xf8>)
 800145e:	617b      	str	r3, [r7, #20]
		xQueueSend(q_print, &msg, portMAX_DELAY);
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <rtc_date_config+0xe8>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 0114 	add.w	r1, r7, #20
 8001468:	2300      	movs	r3, #0
 800146a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800146e:	f003 fcc1 	bl	8004df4 <xQueueGenericSend>
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800914c 	.word	0x0800914c
 8001480:	200000bc 	.word	0x200000bc
 8001484:	08009128 	.word	0x08009128
 8001488:	08009174 	.word	0x08009174
 800148c:	0800918c 	.word	0x0800918c
 8001490:	080091bc 	.word	0x080091bc

08001494 <rtc_task>:

portTASK_FUNCTION( rtc_task, pvParameters ) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char *msg_rtc1 = "========================\n"
 800149c:	4b48      	ldr	r3, [pc, #288]	@ (80015c0 <rtc_task+0x12c>)
 800149e:	61bb      	str	r3, [r7, #24]
			"|         RTC          |\n"
			"========================\n";
	const char *msg_rtc2 = "Configure Time            ----> 0\n"
 80014a0:	4b48      	ldr	r3, [pc, #288]	@ (80015c4 <rtc_task+0x130>)
 80014a2:	617b      	str	r3, [r7, #20]
			"Enable reporting          ----> 2\n"
			"Exit                      ----> 3\n"
			"Enter your choice here : ";

	while (1) {
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f005 f91f 	bl	80066f4 <xTaskGenericNotifyWait>

		// Show the RTC menu
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 80014b6:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <rtc_task+0x134>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	f107 0118 	add.w	r1, r7, #24
 80014be:	2300      	movs	r3, #0
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014c4:	f003 fc96 	bl	8004df4 <xQueueGenericSend>
		show_time_date();
 80014c8:	f7ff fb5c 	bl	8000b84 <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 80014cc:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <rtc_task+0x134>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	f107 0114 	add.w	r1, r7, #20
 80014d4:	2300      	movs	r3, #0
 80014d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014da:	f003 fc8b 	bl	8004df4 <xQueueGenericSend>

		/*Wait for command notification (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2000      	movs	r0, #0
 80014ee:	f005 f901 	bl	80066f4 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24

		if (cmd->len == 1) {
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d14a      	bne.n	8001594 <rtc_task+0x100>
			option = cmd->payload[0] - '0';
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3b30      	subs	r3, #48	@ 0x30
 8001504:	623b      	str	r3, [r7, #32]
			switch (option) {
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d02b      	beq.n	8001564 <rtc_task+0xd0>
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	2b02      	cmp	r3, #2
 8001510:	dc37      	bgt.n	8001582 <rtc_task+0xee>
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <rtc_task+0x8c>
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d011      	beq.n	8001542 <rtc_task+0xae>
 800151e:	e030      	b.n	8001582 <rtc_task+0xee>
			case 0:
				xQueueSend(q_print, &(char* ) { "Configure time\n" },
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <rtc_task+0x134>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <rtc_task+0x138>)
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	f107 0110 	add.w	r1, r7, #16
 800152c:	2300      	movs	r3, #0
 800152e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001532:	f003 fc5f 	bl	8004df4 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcTimeConfig;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <rtc_task+0x13c>)
 8001538:	2203      	movs	r2, #3
 800153a:	701a      	strb	r2, [r3, #0]
				rtc_time_config();
 800153c:	f7ff fec2 	bl	80012c4 <rtc_time_config>
				break;
 8001540:	e031      	b.n	80015a6 <rtc_task+0x112>
			case 1:
				xQueueSend(q_print, &(char* ) { "Configure Date\n" },
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <rtc_task+0x134>)
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <rtc_task+0x140>)
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	2300      	movs	r3, #0
 8001550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001554:	f003 fc4e 	bl	8004df4 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcDateConfig;
 8001558:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <rtc_task+0x13c>)
 800155a:	2204      	movs	r2, #4
 800155c:	701a      	strb	r2, [r3, #0]
				rtc_date_config();
 800155e:	f7ff ff1b 	bl	8001398 <rtc_date_config>
				break;
 8001562:	e020      	b.n	80015a6 <rtc_task+0x112>
			case 2: /*implement exit */
				xQueueSend(q_print, &(char* ) { "Enable export time\n" },
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <rtc_task+0x134>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <rtc_task+0x144>)
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	f107 0108 	add.w	r1, r7, #8
 8001570:	2300      	movs	r3, #0
 8001572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001576:	f003 fc3d 	bl	8004df4 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcReport;
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <rtc_task+0x13c>)
 800157c:	2205      	movs	r2, #5
 800157e:	701a      	strb	r2, [r3, #0]

				break;
 8001580:	e011      	b.n	80015a6 <rtc_task+0x112>
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <rtc_task+0x134>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800158c:	4913      	ldr	r1, [pc, #76]	@ (80015dc <rtc_task+0x148>)
 800158e:	f003 fc31 	bl	8004df4 <xQueueGenericSend>
 8001592:	e787      	b.n	80014a4 <rtc_task+0x10>
				continue;
			}
		} else {
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <rtc_task+0x134>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800159e:	490f      	ldr	r1, [pc, #60]	@ (80015dc <rtc_task+0x148>)
 80015a0:	f003 fc28 	bl	8004df4 <xQueueGenericSend>
			continue;
 80015a4:	e00b      	b.n	80015be <rtc_task+0x12a>
		}

		/* update state variable */
		curr_state = sMainMenu;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <rtc_task+0x13c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <rtc_task+0x14c>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	f005 f91b 	bl	80067f4 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015be:	e771      	b.n	80014a4 <rtc_task+0x10>
 80015c0:	080091f8 	.word	0x080091f8
 80015c4:	08009244 	.word	0x08009244
 80015c8:	200000bc 	.word	0x200000bc
 80015cc:	080092e8 	.word	0x080092e8
 80015d0:	20000210 	.word	0x20000210
 80015d4:	080092f8 	.word	0x080092f8
 80015d8:	08009308 	.word	0x08009308
 80015dc:	20000020 	.word	0x20000020
 80015e0:	200000a4 	.word	0x200000a4

080015e4 <led_task>:
	}
}

portTASK_FUNCTION( led_task, pvParameters ) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char *msg_led = "========================\n"
 80015ec:	4b3e      	ldr	r3, [pc, #248]	@ (80016e8 <led_task+0x104>)
 80015ee:	60fb      	str	r3, [r7, #12]
			"========================\n"
			"(none,e1,e2,e3,e4)\n"
			"Enter your choice here : ";
	while (1) {
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2000      	movs	r0, #0
 80015fe:	f005 f879 	bl	80066f4 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8001602:	4b3a      	ldr	r3, [pc, #232]	@ (80016ec <led_task+0x108>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f107 010c 	add.w	r1, r7, #12
 800160a:	2300      	movs	r3, #0
 800160c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001610:	f003 fbf0 	bl	8004df4 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800161c:	9200      	str	r2, [sp, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f005 f866 	bl	80066f4 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	617b      	str	r3, [r7, #20]

		if (cmd->len <= 4) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d843      	bhi.n	80016bc <led_task+0xd8>
			if (!strcmp((char*) cmd->payload, "none"))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	492e      	ldr	r1, [pc, #184]	@ (80016f0 <led_task+0x10c>)
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fdd9 	bl	80001f0 <strcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <led_task+0x66>
				led_effect_stop();
 8001644:	f7ff fdfa 	bl	800123c <led_effect_stop>
 8001648:	e040      	b.n	80016cc <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e1"))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4929      	ldr	r1, [pc, #164]	@ (80016f4 <led_task+0x110>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdce 	bl	80001f0 <strcmp>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d103      	bne.n	8001662 <led_task+0x7e>
				led_effect(1);
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff fe00 	bl	8001260 <led_effect>
 8001660:	e034      	b.n	80016cc <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e2"))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4924      	ldr	r1, [pc, #144]	@ (80016f8 <led_task+0x114>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdc2 	bl	80001f0 <strcmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <led_task+0x96>
				led_effect(2);
 8001672:	2002      	movs	r0, #2
 8001674:	f7ff fdf4 	bl	8001260 <led_effect>
 8001678:	e028      	b.n	80016cc <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e3"))
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	491f      	ldr	r1, [pc, #124]	@ (80016fc <led_task+0x118>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fdb6 	bl	80001f0 <strcmp>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <led_task+0xae>
				led_effect(3);
 800168a:	2003      	movs	r0, #3
 800168c:	f7ff fde8 	bl	8001260 <led_effect>
 8001690:	e01c      	b.n	80016cc <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e4"))
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	491a      	ldr	r1, [pc, #104]	@ (8001700 <led_task+0x11c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fdaa 	bl	80001f0 <strcmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d103      	bne.n	80016aa <led_task+0xc6>
				led_effect(4);
 80016a2:	2004      	movs	r0, #4
 80016a4:	f7ff fddc 	bl	8001260 <led_effect>
 80016a8:	e010      	b.n	80016cc <led_task+0xe8>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY); /*print invalid message */
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <led_task+0x108>)
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	2300      	movs	r3, #0
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b4:	4913      	ldr	r1, [pc, #76]	@ (8001704 <led_task+0x120>)
 80016b6:	f003 fb9d 	bl	8004df4 <xQueueGenericSend>
 80016ba:	e007      	b.n	80016cc <led_task+0xe8>
		} else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <led_task+0x108>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016c6:	490f      	ldr	r1, [pc, #60]	@ (8001704 <led_task+0x120>)
 80016c8:	f003 fb94 	bl	8004df4 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <led_task+0x124>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <led_task+0x128>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	f005 f888 	bl	80067f4 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016e4:	e784      	b.n	80015f0 <led_task+0xc>
 80016e6:	bf00      	nop
 80016e8:	0800931c 	.word	0x0800931c
 80016ec:	200000bc 	.word	0x200000bc
 80016f0:	08009394 	.word	0x08009394
 80016f4:	0800939c 	.word	0x0800939c
 80016f8:	080093a0 	.word	0x080093a0
 80016fc:	080093a4 	.word	0x080093a4
 8001700:	080093a8 	.word	0x080093a8
 8001704:	20000020 	.word	0x20000020
 8001708:	20000210 	.word	0x20000210
 800170c:	200000a4 	.word	0x200000a4

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001714:	f7ff fc48 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	@ (8001750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	@ (800175c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f006 fb19 	bl	8007d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7fe ff2d 	bl	80005a0 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001754:	08009548 	.word	0x08009548
  ldr r2, =_sbss
 8001758:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800175c:	20013104 	.word	0x20013104

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <HAL_Init+0x40>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <HAL_Init+0x40>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <HAL_Init+0x40>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f8d8 	bl	8001942 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f7ff fb26 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fa60 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000028 	.word	0x20000028
 80017cc:	20000214 	.word	0x20000214

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000214 	.word	0x20000214

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff4c 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196a:	f7ff ff61 	bl	8001830 <__NVIC_GetPriorityGrouping>
 800196e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f7ff ffb1 	bl	80018dc <NVIC_EncodePriority>
 800197a:	4602      	mov	r2, r0
 800197c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff80 	bl	8001888 <__NVIC_SetPriority>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff54 	bl	800184c <__NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ba:	f7ff ff09 	bl	80017d0 <HAL_GetTick>
 80019be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d008      	beq.n	80019de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e052      	b.n	8001a84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0216 	bic.w	r2, r2, #22
 80019ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <HAL_DMA_Abort+0x62>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0208 	bic.w	r2, r2, #8
 8001a1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2e:	e013      	b.n	8001a58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a30:	f7ff fece 	bl	80017d0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d90c      	bls.n	8001a58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e015      	b.n	8001a84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1e4      	bne.n	8001a30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6a:	223f      	movs	r2, #63	@ 0x3f
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d004      	beq.n	8001aaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00c      	b.n	8001ac4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2205      	movs	r2, #5
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e159      	b.n	8001da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 8148 	bne.w	8001d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d005      	beq.n	8001b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d130      	bne.n	8001b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d017      	beq.n	8001bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a2 	beq.w	8001d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b57      	ldr	r3, [pc, #348]	@ (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	4a56      	ldr	r2, [pc, #344]	@ (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c66:	4b54      	ldr	r3, [pc, #336]	@ (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c72:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_GPIO_Init+0x2ec>)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a49      	ldr	r2, [pc, #292]	@ (8001dc0 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0x202>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a48      	ldr	r2, [pc, #288]	@ (8001dc4 <HAL_GPIO_Init+0x2f4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0x1fe>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a47      	ldr	r2, [pc, #284]	@ (8001dc8 <HAL_GPIO_Init+0x2f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00d      	beq.n	8001cca <HAL_GPIO_Init+0x1fa>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a46      	ldr	r2, [pc, #280]	@ (8001dcc <HAL_GPIO_Init+0x2fc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x1f6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a45      	ldr	r2, [pc, #276]	@ (8001dd0 <HAL_GPIO_Init+0x300>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_GPIO_Init+0x1f2>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e008      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f002 0203 	and.w	r2, r2, #3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce4:	4935      	ldr	r1, [pc, #212]	@ (8001dbc <HAL_GPIO_Init+0x2ec>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf2:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d16:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d40:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d46:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d94:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	f67f aea2 	bls.w	8001aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e267      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d075      	beq.n	8001f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e5e:	4b88      	ldr	r3, [pc, #544]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d00c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b85      	ldr	r3, [pc, #532]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b82      	ldr	r3, [pc, #520]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b7e      	ldr	r3, [pc, #504]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d157      	bne.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e242      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x74>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b70      	ldr	r3, [pc, #448]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6d      	ldr	r3, [pc, #436]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6c      	ldr	r2, [pc, #432]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	4b69      	ldr	r3, [pc, #420]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a68      	ldr	r2, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b66      	ldr	r3, [pc, #408]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a65      	ldr	r2, [pc, #404]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc6a 	bl	80017d0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fc66 	bl	80017d0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	@ 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e207      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fc56 	bl	80017d0 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fc52 	bl	80017d0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1f3      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b51      	ldr	r3, [pc, #324]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f56:	4b4a      	ldr	r3, [pc, #296]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f62:	4b47      	ldr	r3, [pc, #284]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b44      	ldr	r3, [pc, #272]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1c7      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4937      	ldr	r1, [pc, #220]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <HAL_RCC_OscConfig+0x244>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fc0b 	bl	80017d0 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fc07 	bl	80017d0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1a8      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4925      	ldr	r1, [pc, #148]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_RCC_OscConfig+0x244>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fbea 	bl	80017d0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff fbe6 	bl	80017d0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e187      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d036      	beq.n	8002098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x248>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff fbca 	bl	80017d0 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fbc6 	bl	80017d0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e167      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_RCC_OscConfig+0x240>)
 8002054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x200>
 800205e:	e01b      	b.n	8002098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_OscConfig+0x248>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff fbb3 	bl	80017d0 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	e00e      	b.n	800208c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206e:	f7ff fbaf 	bl	80017d0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d907      	bls.n	800208c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e150      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
 8002080:	40023800 	.word	0x40023800
 8002084:	42470000 	.word	0x42470000
 8002088:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b88      	ldr	r3, [pc, #544]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ea      	bne.n	800206e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8097 	beq.w	80021d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b81      	ldr	r3, [pc, #516]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b7d      	ldr	r3, [pc, #500]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	4a7c      	ldr	r2, [pc, #496]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c6:	4b7a      	ldr	r3, [pc, #488]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b77      	ldr	r3, [pc, #476]	@ (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b74      	ldr	r3, [pc, #464]	@ (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a73      	ldr	r2, [pc, #460]	@ (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fb6f 	bl	80017d0 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7ff fb6b 	bl	80017d0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e10c      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b6a      	ldr	r3, [pc, #424]	@ (80022b4 <HAL_RCC_OscConfig+0x474>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x2ea>
 800211c:	4b64      	ldr	r3, [pc, #400]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002120:	4a63      	ldr	r2, [pc, #396]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	@ 0x70
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x30c>
 8002132:	4b5f      	ldr	r3, [pc, #380]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002136:	4a5e      	ldr	r2, [pc, #376]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6713      	str	r3, [r2, #112]	@ 0x70
 800213e:	4b5c      	ldr	r3, [pc, #368]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	4a5b      	ldr	r2, [pc, #364]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	@ 0x70
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800214c:	4b58      	ldr	r3, [pc, #352]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	4a57      	ldr	r2, [pc, #348]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	@ 0x70
 8002158:	4b55      	ldr	r3, [pc, #340]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	4a54      	ldr	r2, [pc, #336]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fb30 	bl	80017d0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7ff fb2c 	bl	80017d0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0cb      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	4b49      	ldr	r3, [pc, #292]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ee      	beq.n	8002174 <HAL_RCC_OscConfig+0x334>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff fb1a 	bl	80017d0 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff fb16 	bl	80017d0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0b5      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	4b3e      	ldr	r3, [pc, #248]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ee      	bne.n	80021a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	4a38      	ldr	r2, [pc, #224]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a1 	beq.w	8002320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021de:	4b34      	ldr	r3, [pc, #208]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d05c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d141      	bne.n	8002276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b31      	ldr	r3, [pc, #196]	@ (80022b8 <HAL_RCC_OscConfig+0x478>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff faea 	bl	80017d0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff fae6 	bl	80017d0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e087      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	491b      	ldr	r1, [pc, #108]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCC_OscConfig+0x478>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff fabf 	bl	80017d0 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff fabb 	bl	80017d0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e05c      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x416>
 8002274:	e054      	b.n	8002320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_RCC_OscConfig+0x478>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff faa8 	bl	80017d0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff faa4 	bl	80017d0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e045      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x444>
 80022a2:	e03d      	b.n	8002320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e038      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_RCC_OscConfig+0x4ec>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d028      	beq.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d121      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d11a      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d111      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	3b01      	subs	r3, #1
 8002306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cc      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90c      	bls.n	800236c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b63      	ldr	r3, [pc, #396]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b8      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b59      	ldr	r3, [pc, #356]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a58      	ldr	r2, [pc, #352]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800238e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239c:	4b53      	ldr	r3, [pc, #332]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b50      	ldr	r3, [pc, #320]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	494d      	ldr	r1, [pc, #308]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d044      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e07f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b3f      	ldr	r3, [pc, #252]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e067      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4934      	ldr	r1, [pc, #208]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7ff f9d6 	bl	80017d0 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7ff f9d2 	bl	80017d0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e04f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d20c      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e032      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4916      	ldr	r1, [pc, #88]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490e      	ldr	r1, [pc, #56]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b6:	f000 f821 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490a      	ldr	r1, [pc, #40]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fc84 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00
 80024ec:	40023800 	.word	0x40023800
 80024f0:	080093d0 	.word	0x080093d0
 80024f4:	2000001c 	.word	0x2000001c
 80024f8:	20000024 	.word	0x20000024

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b090      	sub	sp, #64	@ 0x40
 8002502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002514:	4b59      	ldr	r3, [pc, #356]	@ (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d00d      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x40>
 8002520:	2b08      	cmp	r3, #8
 8002522:	f200 80a1 	bhi.w	8002668 <HAL_RCC_GetSysClockFreq+0x16c>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 800252a:	2b04      	cmp	r3, #4
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x3a>
 800252e:	e09b      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x184>)
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002534:	e09b      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002536:	4b53      	ldr	r3, [pc, #332]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x188>)
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800253a:	e098      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800253c:	4b4f      	ldr	r3, [pc, #316]	@ (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002546:	4b4d      	ldr	r3, [pc, #308]	@ (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d028      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	2200      	movs	r2, #0
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	627a      	str	r2, [r7, #36]	@ 0x24
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002564:	2100      	movs	r1, #0
 8002566:	4b47      	ldr	r3, [pc, #284]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x188>)
 8002568:	fb03 f201 	mul.w	r2, r3, r1
 800256c:	2300      	movs	r3, #0
 800256e:	fb00 f303 	mul.w	r3, r0, r3
 8002572:	4413      	add	r3, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x188>)
 8002576:	fba0 1202 	umull	r1, r2, r0, r2
 800257a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800257c:	460a      	mov	r2, r1
 800257e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002582:	4413      	add	r3, r2
 8002584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002588:	2200      	movs	r2, #0
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	61fa      	str	r2, [r7, #28]
 800258e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002596:	f7fd fe8b 	bl	80002b0 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4613      	mov	r3, r2
 80025a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025a2:	e053      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a4:	4b35      	ldr	r3, [pc, #212]	@ (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	2200      	movs	r2, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	617a      	str	r2, [r7, #20]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025b6:	f04f 0b00 	mov.w	fp, #0
 80025ba:	4652      	mov	r2, sl
 80025bc:	465b      	mov	r3, fp
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025cc:	0150      	lsls	r0, r2, #5
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	ebb2 080a 	subs.w	r8, r2, sl
 80025d6:	eb63 090b 	sbc.w	r9, r3, fp
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ee:	ebb2 0408 	subs.w	r4, r2, r8
 80025f2:	eb63 0509 	sbc.w	r5, r3, r9
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	00eb      	lsls	r3, r5, #3
 8002600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002604:	00e2      	lsls	r2, r4, #3
 8002606:	4614      	mov	r4, r2
 8002608:	461d      	mov	r5, r3
 800260a:	eb14 030a 	adds.w	r3, r4, sl
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	eb45 030b 	adc.w	r3, r5, fp
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002622:	4629      	mov	r1, r5
 8002624:	028b      	lsls	r3, r1, #10
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800262c:	4621      	mov	r1, r4
 800262e:	028a      	lsls	r2, r1, #10
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002636:	2200      	movs	r2, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	60fa      	str	r2, [r7, #12]
 800263c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002640:	f7fd fe36 	bl	80002b0 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <HAL_RCC_GetSysClockFreq+0x180>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	3301      	adds	r3, #1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800265c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800265e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x184>)
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800266c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002670:	4618      	mov	r0, r3
 8002672:	3740      	adds	r7, #64	@ 0x40
 8002674:	46bd      	mov	sp, r7
 8002676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	00f42400 	.word	0x00f42400
 8002684:	017d7840 	.word	0x017d7840

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2000001c 	.word	0x2000001c

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a9b      	lsrs	r3, r3, #10
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4903      	ldr	r1, [pc, #12]	@ (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	080093e0 	.word	0x080093e0

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffdc 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0b5b      	lsrs	r3, r3, #13
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	@ (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	080093e0 	.word	0x080093e0

080026f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	220f      	movs	r2, #15
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800270c:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_RCC_GetClockConfig+0x60>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0207 	and.w	r2, r3, #7
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40023c00 	.word	0x40023c00

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002778:	2b00      	cmp	r3, #0
 800277a:	d038      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800277c:	4b68      	ldr	r3, [pc, #416]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002782:	f7ff f825 	bl	80017d0 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800278a:	f7ff f821 	bl	80017d0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0bd      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800279c:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	019b      	lsls	r3, r3, #6
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	071b      	lsls	r3, r3, #28
 80027ba:	495a      	ldr	r1, [pc, #360]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027c2:	4b57      	ldr	r3, [pc, #348]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff f802 	bl	80017d0 <HAL_GetTick>
 80027cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027d0:	f7fe fffe 	bl	80017d0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e09a      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027e2:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8083 	beq.w	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	4b48      	ldr	r3, [pc, #288]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	4a47      	ldr	r2, [pc, #284]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280a:	6413      	str	r3, [r2, #64]	@ 0x40
 800280c:	4b45      	ldr	r3, [pc, #276]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002818:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a42      	ldr	r2, [pc, #264]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002822:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002824:	f7fe ffd4 	bl	80017d0 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282c:	f7fe ffd0 	bl	80017d0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e06c      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800283e:	4b3a      	ldr	r3, [pc, #232]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284a:	4b36      	ldr	r3, [pc, #216]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002852:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02f      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	429a      	cmp	r2, r3
 8002866:	d028      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002868:	4b2e      	ldr	r3, [pc, #184]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002870:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	4b2c      	ldr	r3, [pc, #176]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800287e:	4a29      	ldr	r2, [pc, #164]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d114      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe ff9e 	bl	80017d0 <HAL_GetTick>
 8002894:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe ff9a 	bl	80017d0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e034      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ee      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80028c8:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	4911      	ldr	r1, [pc, #68]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80028ee:	6093      	str	r3, [r2, #8]
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	4909      	ldr	r1, [pc, #36]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7d1a      	ldrb	r2, [r3, #20]
 8002912:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002914:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	42470068 	.word	0x42470068
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000
 800292c:	42470e40 	.word	0x42470e40
 8002930:	424711e0 	.word	0x424711e0

08002934 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e073      	b.n	8002a32 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7f5b      	ldrb	r3, [r3, #29]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe f9a6 	bl	8000cac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b10      	cmp	r3, #16
 8002972:	d055      	beq.n	8002a20 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	22ca      	movs	r2, #202	@ 0xca
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2253      	movs	r2, #83	@ 0x53
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa49 	bl	8002e1c <RTC_EnterInitMode>
 800298a:	4603      	mov	r3, r0
 800298c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d12c      	bne.n	80029ee <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80029a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa50 	bl	8002e8a <RTC_ExitInitMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d110      	bne.n	8002a16 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	22ff      	movs	r2, #255	@ 0xff
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a1e:	e001      	b.n	8002a24 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a3a:	b590      	push	{r4, r7, lr}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	7f1b      	ldrb	r3, [r3, #28]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_RTC_SetTime+0x1c>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e087      	b.n	8002b66 <HAL_RTC_SetTime+0x12c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d126      	bne.n	8002ab6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa27 	bl	8002ed4 <RTC_ByteToBcd2>
 8002a86:	4603      	mov	r3, r0
 8002a88:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	785b      	ldrb	r3, [r3, #1]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fa20 	bl	8002ed4 <RTC_ByteToBcd2>
 8002a94:	4603      	mov	r3, r0
 8002a96:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a98:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	789b      	ldrb	r3, [r3, #2]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fa18 	bl	8002ed4 <RTC_ByteToBcd2>
 8002aa4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002aa6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	78db      	ldrb	r3, [r3, #3]
 8002aae:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e018      	b.n	8002ae8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ad6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002adc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	78db      	ldrb	r3, [r3, #3]
 8002ae2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22ca      	movs	r2, #202	@ 0xca
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2253      	movs	r2, #83	@ 0x53
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f98f 	bl	8002e1c <RTC_EnterInitMode>
 8002afe:	4603      	mov	r3, r0
 8002b00:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d120      	bne.n	8002b4a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002b12:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b16:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f9a2 	bl	8002e8a <RTC_ExitInitMode>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	22ff      	movs	r2, #255	@ 0xff
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]

  return status;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002ba0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	0d9b      	lsrs	r3, r3, #22
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11a      	bne.n	8002c20 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f98e 	bl	8002f10 <RTC_Bcd2ToByte>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f985 	bl	8002f10 <RTC_Bcd2ToByte>
 8002c06:	4603      	mov	r3, r0
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	789b      	ldrb	r3, [r3, #2]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f97c 	bl	8002f10 <RTC_Bcd2ToByte>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c2a:	b590      	push	{r4, r7, lr}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	7f1b      	ldrb	r3, [r3, #28]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_RTC_SetDate+0x1c>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e071      	b.n	8002d2a <HAL_RTC_SetDate+0x100>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10e      	bne.n	8002c76 <HAL_RTC_SetDate+0x4c>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	785b      	ldrb	r3, [r3, #1]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	f023 0310 	bic.w	r3, r3, #16
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	330a      	adds	r3, #10
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11c      	bne.n	8002cb6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	78db      	ldrb	r3, [r3, #3]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f927 	bl	8002ed4 <RTC_ByteToBcd2>
 8002c86:	4603      	mov	r3, r0
 8002c88:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f920 	bl	8002ed4 <RTC_ByteToBcd2>
 8002c94:	4603      	mov	r3, r0
 8002c96:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c98:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	789b      	ldrb	r3, [r3, #2]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f918 	bl	8002ed4 <RTC_ByteToBcd2>
 8002ca4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ca6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e00e      	b.n	8002cd4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	78db      	ldrb	r3, [r3, #3]
 8002cba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cc2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cc8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	22ca      	movs	r2, #202	@ 0xca
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2253      	movs	r2, #83	@ 0x53
 8002ce2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f899 	bl	8002e1c <RTC_EnterInitMode>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cfe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d02:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f8c0 	bl	8002e8a <RTC_ExitInitMode>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	22ff      	movs	r2, #255	@ 0xff
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]

  return status;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}

08002d32 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	0b5b      	lsrs	r3, r3, #13
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11a      	bne.n	8002dc6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	78db      	ldrb	r3, [r3, #3]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f8bb 	bl	8002f10 <RTC_Bcd2ToByte>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8b2 	bl	8002f10 <RTC_Bcd2ToByte>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	789b      	ldrb	r3, [r3, #2]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f8a9 	bl	8002f10 <RTC_Bcd2ToByte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <HAL_RTC_WaitForSynchro+0x48>)
 8002de2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de4:	f7fe fcf4 	bl	80017d0 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dea:	e009      	b.n	8002e00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dec:	f7fe fcf0 	bl	80017d0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dfa:	d901      	bls.n	8002e00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e007      	b.n	8002e10 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ee      	beq.n	8002dec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00013f5f 	.word	0x00013f5f

08002e1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d122      	bne.n	8002e80 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4a:	f7fe fcc1 	bl	80017d0 <HAL_GetTick>
 8002e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e50:	e00c      	b.n	8002e6c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e52:	f7fe fcbd 	bl	80017d0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e60:	d904      	bls.n	8002e6c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2204      	movs	r2, #4
 8002e66:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <RTC_EnterInitMode+0x64>
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d1e8      	bne.n	8002e52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ea4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff8b 	bl	8002dd0 <HAL_RTC_WaitForSynchro>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002ee2:	e005      	b.n	8002ef0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	3b0a      	subs	r3, #10
 8002eee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	d8f6      	bhi.n	8002ee4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b2db      	uxtb	r3, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2db      	uxtb	r3, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e041      	b.n	8002fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fec6 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 fb20 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e044      	b.n	800308e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <HAL_TIM_Base_Start_IT+0xb0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302e:	d013      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1a      	ldr	r2, [pc, #104]	@ (80030a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a19      	ldr	r2, [pc, #100]	@ (80030a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <HAL_TIM_Base_Start_IT+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b06      	cmp	r3, #6
 8003068:	d010      	beq.n	800308c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	e007      	b.n	800308c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40014000 	.word	0x40014000

080030b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_TIM_PWM_Start+0x24>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e022      	b.n	800311a <HAL_TIM_PWM_Start+0x6a>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d109      	bne.n	80030ee <HAL_TIM_PWM_Start+0x3e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e015      	b.n	800311a <HAL_TIM_PWM_Start+0x6a>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d109      	bne.n	8003108 <HAL_TIM_PWM_Start+0x58>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e008      	b.n	800311a <HAL_TIM_PWM_Start+0x6a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e068      	b.n	80031f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start+0x82>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003130:	e013      	b.n	800315a <HAL_TIM_PWM_Start+0xaa>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start+0x92>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	e00b      	b.n	800315a <HAL_TIM_PWM_Start+0xaa>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0xa2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003150:	e003      	b.n	800315a <HAL_TIM_PWM_Start+0xaa>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fb5a 	bl	800381c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a23      	ldr	r2, [pc, #140]	@ (80031fc <HAL_TIM_PWM_Start+0x14c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d107      	bne.n	8003182 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1d      	ldr	r2, [pc, #116]	@ (80031fc <HAL_TIM_PWM_Start+0x14c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d018      	beq.n	80031be <HAL_TIM_PWM_Start+0x10e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d013      	beq.n	80031be <HAL_TIM_PWM_Start+0x10e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a19      	ldr	r2, [pc, #100]	@ (8003200 <HAL_TIM_PWM_Start+0x150>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_TIM_PWM_Start+0x10e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <HAL_TIM_PWM_Start+0x154>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_TIM_PWM_Start+0x10e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a16      	ldr	r2, [pc, #88]	@ (8003208 <HAL_TIM_PWM_Start+0x158>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_TIM_PWM_Start+0x10e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a14      	ldr	r2, [pc, #80]	@ (800320c <HAL_TIM_PWM_Start+0x15c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d111      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d010      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	e007      	b.n	80031f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40014000 	.word	0x40014000

08003210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d020      	beq.n	8003274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0202 	mvn.w	r2, #2
 8003244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f999 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f98b 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f99c 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d020      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0204 	mvn.w	r2, #4
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f973 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f965 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f976 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0208 	mvn.w	r2, #8
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2204      	movs	r2, #4
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f94d 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f93f 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f950 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2208      	movs	r2, #8
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f927 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f919 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f92a 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0201 	mvn.w	r2, #1
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fbc4 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fadc 	bl	8003958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8fb 	bl	80035ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0220 	mvn.w	r2, #32
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 faae 	bl	8003944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIM_ConfigClockSource+0x1c>
 8003408:	2302      	movs	r3, #2
 800340a:	e0b4      	b.n	8003576 <HAL_TIM_ConfigClockSource+0x186>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800342a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003444:	d03e      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344a:	f200 8087 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x16c>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003452:	f000 8086 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x172>
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345a:	d87f      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b70      	cmp	r3, #112	@ 0x70
 800345e:	d01a      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0xa6>
 8003460:	2b70      	cmp	r3, #112	@ 0x70
 8003462:	d87b      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b60      	cmp	r3, #96	@ 0x60
 8003466:	d050      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x11a>
 8003468:	2b60      	cmp	r3, #96	@ 0x60
 800346a:	d877      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b50      	cmp	r3, #80	@ 0x50
 800346e:	d03c      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xfa>
 8003470:	2b50      	cmp	r3, #80	@ 0x50
 8003472:	d873      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 8003474:	2b40      	cmp	r3, #64	@ 0x40
 8003476:	d058      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x13a>
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d86f      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b30      	cmp	r3, #48	@ 0x30
 800347e:	d064      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x15a>
 8003480:	2b30      	cmp	r3, #48	@ 0x30
 8003482:	d86b      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b20      	cmp	r3, #32
 8003486:	d060      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x15a>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d867      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d05c      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x15a>
 8003490:	2b10      	cmp	r3, #16
 8003492:	d05a      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	e062      	b.n	800355c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034a6:	f000 f999 	bl	80037dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]
      break;
 80034c2:	e04f      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d4:	f000 f982 	bl	80037dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034e6:	609a      	str	r2, [r3, #8]
      break;
 80034e8:	e03c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 f8f6 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2150      	movs	r1, #80	@ 0x50
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f94f 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003508:	e02c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 f915 	bl	8003746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2160      	movs	r1, #96	@ 0x60
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f93f 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003528:	e01c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f8d6 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2140      	movs	r1, #64	@ 0x40
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f92f 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003548:	e00c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 f926 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 800355a:	e003      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e000      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <TIM_Base_SetConfig+0xfc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00f      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a37      	ldr	r2, [pc, #220]	@ (80036d0 <TIM_Base_SetConfig+0x100>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a36      	ldr	r2, [pc, #216]	@ (80036d4 <TIM_Base_SetConfig+0x104>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a35      	ldr	r2, [pc, #212]	@ (80036d8 <TIM_Base_SetConfig+0x108>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	@ (80036cc <TIM_Base_SetConfig+0xfc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01b      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003628:	d017      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a28      	ldr	r2, [pc, #160]	@ (80036d0 <TIM_Base_SetConfig+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <TIM_Base_SetConfig+0x104>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a26      	ldr	r2, [pc, #152]	@ (80036d8 <TIM_Base_SetConfig+0x108>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a25      	ldr	r2, [pc, #148]	@ (80036dc <TIM_Base_SetConfig+0x10c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <TIM_Base_SetConfig+0x110>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <TIM_Base_SetConfig+0x114>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0e      	ldr	r2, [pc, #56]	@ (80036cc <TIM_Base_SetConfig+0xfc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]
  }
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 030a 	bic.w	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003746:	b480      	push	{r7}
 8003748:	b087      	sub	sp, #28
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f023 0210 	bic.w	r2, r3, #16
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f043 0307 	orr.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	431a      	orrs	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2201      	movs	r2, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1a      	ldr	r2, [r3, #32]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1a      	ldr	r2, [r3, #32]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e050      	b.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d018      	beq.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d013      	beq.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a18      	ldr	r2, [pc, #96]	@ (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a16      	ldr	r2, [pc, #88]	@ (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a15      	ldr	r2, [pc, #84]	@ (800393c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a13      	ldr	r2, [pc, #76]	@ (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10c      	bne.n	8003910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	4313      	orrs	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40014000 	.word	0x40014000

08003944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e042      	b.n	8003a04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd f9d6 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	@ 0x24
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fdf3 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	@ 0x28
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d175      	bne.n	8003b18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Transmit+0x2c>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e06e      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	@ 0x21
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fd fec1 	bl	80017d0 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x6c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a80:	e02e      	b.n	8003ae0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	@ 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fb55 	bl	800413c <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e03a      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3302      	adds	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e007      	b.n	8003ad2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1cb      	bne.n	8003a82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2140      	movs	r1, #64	@ 0x40
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fb21 	bl	800413c <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d121      	bne.n	8003b80 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Transmit_IT+0x26>
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01a      	b.n	8003b82 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2221      	movs	r2, #33	@ 0x21
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b7a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d112      	bne.n	8003bce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_UART_Receive_IT+0x26>
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e00b      	b.n	8003bd0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fb12 	bl	80041ee <UART_Start_Receive_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	e000      	b.n	8003bd0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0ba      	sub	sp, #232	@ 0xe8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_UART_IRQHandler+0x66>
 8003c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fbf2 	bl	8004420 <UART_Receive_IT>
      return;
 8003c3c:	e25b      	b.n	80040f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80de 	beq.w	8003e04 <HAL_UART_IRQHandler+0x22c>
 8003c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80d1 	beq.w	8003e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_UART_IRQHandler+0xae>
 8003c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_UART_IRQHandler+0xd2>
 8003c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0xf6>
 8003cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <HAL_UART_IRQHandler+0x126>
 8003cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f043 0208 	orr.w	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 81f2 	beq.w	80040ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_UART_IRQHandler+0x14e>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fb7d 	bl	8004420 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b40      	cmp	r3, #64	@ 0x40
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_UART_IRQHandler+0x17a>
 8003d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04f      	beq.n	8003df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa85 	bl	8004262 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d141      	bne.n	8003dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1d9      	bne.n	8003d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d013      	beq.n	8003de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8003fb8 <HAL_UART_IRQHandler+0x3e0>)
 8003dc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fe60 	bl	8001a8c <HAL_DMA_Abort_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e00e      	b.n	8003e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f994 	bl	8004110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00a      	b.n	8003e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f990 	bl	8004110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e006      	b.n	8003e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f98c 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dfe:	e175      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	bf00      	nop
    return;
 8003e02:	e173      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 814f 	bne.w	80040ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8148 	beq.w	80040ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8141 	beq.w	80040ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b40      	cmp	r3, #64	@ 0x40
 8003e4c:	f040 80b6 	bne.w	8003fbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8145 	beq.w	80040f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	f080 813e 	bcs.w	80040f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e86:	f000 8088 	beq.w	8003f9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1d9      	bne.n	8003e8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003efa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e1      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e3      	bne.n	8003f12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6a:	f023 0310 	bic.w	r3, r3, #16
 8003f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fd fd09 	bl	80019ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8b7 	bl	8004124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb6:	e09b      	b.n	80040f0 <HAL_UART_IRQHandler+0x518>
 8003fb8:	08004329 	.word	0x08004329
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 808e 	beq.w	80040f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8089 	beq.w	80040f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004006:	647a      	str	r2, [r7, #68]	@ 0x44
 8004008:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800400c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	623b      	str	r3, [r7, #32]
   return(result);
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800403e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e3      	bne.n	800401a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0310 	bic.w	r3, r3, #16
 8004076:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004084:	61fa      	str	r2, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	617b      	str	r3, [r7, #20]
   return(result);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800409e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f83d 	bl	8004124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040aa:	e023      	b.n	80040f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <HAL_UART_IRQHandler+0x4f4>
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f943 	bl	8004350 <UART_Transmit_IT>
    return;
 80040ca:	e014      	b.n	80040f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <HAL_UART_IRQHandler+0x51e>
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f983 	bl	80043f0 <UART_EndTransmit_IT>
    return;
 80040ea:	e004      	b.n	80040f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80040ec:	bf00      	nop
 80040ee:	e002      	b.n	80040f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040f0:	bf00      	nop
 80040f2:	e000      	b.n	80040f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040f4:	bf00      	nop
  }
}
 80040f6:	37e8      	adds	r7, #232	@ 0xe8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414c:	e03b      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004154:	d037      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004156:	f7fd fb3b 	bl	80017d0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	429a      	cmp	r2, r3
 8004164:	d302      	bcc.n	800416c <UART_WaitOnFlagUntilTimeout+0x30>
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e03a      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d023      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b80      	cmp	r3, #128	@ 0x80
 8004182:	d020      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d01d      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d116      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f857 	bl	8004262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2208      	movs	r2, #8
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e00f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0b4      	beq.n	800414e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2222      	movs	r2, #34	@ 0x22
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004232:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0220 	orr.w	r2, r2, #32
 8004252:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004262:	b480      	push	{r7}
 8004264:	b095      	sub	sp, #84	@ 0x54
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428a:	643a      	str	r2, [r7, #64]	@ 0x40
 800428c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3314      	adds	r3, #20
 80042a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d119      	bne.n	800430e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fa:	61ba      	str	r2, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	613b      	str	r3, [r7, #16]
   return(result);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800431c:	bf00      	nop
 800431e:	3754      	adds	r7, #84	@ 0x54
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff fee4 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b21      	cmp	r3, #33	@ 0x21
 8004362:	d13e      	bne.n	80043e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436c:	d114      	bne.n	8004398 <UART_Transmit_IT+0x48>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d110      	bne.n	8004398 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]
 8004396:	e008      	b.n	80043aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	1c59      	adds	r1, r3, #1
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6211      	str	r1, [r2, #32]
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4619      	mov	r1, r3
 80043b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004406:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fe73 	bl	80040fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	@ 0x30
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b22      	cmp	r3, #34	@ 0x22
 8004432:	f040 80ae 	bne.w	8004592 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443e:	d117      	bne.n	8004470 <UART_Receive_IT+0x50>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	b29a      	uxth	r2, r3
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	@ 0x28
 800446e:	e026      	b.n	80044be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004482:	d007      	beq.n	8004494 <UART_Receive_IT+0x74>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <UART_Receive_IT+0x82>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e008      	b.n	80044b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4619      	mov	r1, r3
 80044cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d15d      	bne.n	800458e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0220 	bic.w	r2, r2, #32
 80044e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d135      	bne.n	8004584 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	613b      	str	r3, [r7, #16]
   return(result);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f023 0310 	bic.w	r3, r3, #16
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453e:	623a      	str	r2, [r7, #32]
 8004540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	69f9      	ldr	r1, [r7, #28]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	61bb      	str	r3, [r7, #24]
   return(result);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d10a      	bne.n	8004576 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fdd1 	bl	8004124 <HAL_UARTEx_RxEventCallback>
 8004582:	e002      	b.n	800458a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc fa57 	bl	8000a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e002      	b.n	8004594 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3730      	adds	r7, #48	@ 0x30
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b0c0      	sub	sp, #256	@ 0x100
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	ea40 0301 	orr.w	r3, r0, r1
 80045c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045f4:	f021 010c 	bic.w	r1, r1, #12
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004602:	430b      	orrs	r3, r1
 8004604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	6999      	ldr	r1, [r3, #24]
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	ea40 0301 	orr.w	r3, r0, r1
 8004622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b8f      	ldr	r3, [pc, #572]	@ (8004868 <UART_SetConfig+0x2cc>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d005      	beq.n	800463c <UART_SetConfig+0xa0>
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b8d      	ldr	r3, [pc, #564]	@ (800486c <UART_SetConfig+0x2d0>)
 8004638:	429a      	cmp	r2, r3
 800463a:	d104      	bne.n	8004646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe f844 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8004640:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004644:	e003      	b.n	800464e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004646:	f7fe f82b 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 800464a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	f040 810c 	bne.w	8004874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800465c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004666:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800466a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	1891      	adds	r1, r2, r2
 8004674:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004676:	415b      	adcs	r3, r3
 8004678:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800467a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800467e:	4621      	mov	r1, r4
 8004680:	eb12 0801 	adds.w	r8, r2, r1
 8004684:	4629      	mov	r1, r5
 8004686:	eb43 0901 	adc.w	r9, r3, r1
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800469a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469e:	4690      	mov	r8, r2
 80046a0:	4699      	mov	r9, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	eb18 0303 	adds.w	r3, r8, r3
 80046a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046ac:	462b      	mov	r3, r5
 80046ae:	eb49 0303 	adc.w	r3, r9, r3
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ca:	460b      	mov	r3, r1
 80046cc:	18db      	adds	r3, r3, r3
 80046ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d0:	4613      	mov	r3, r2
 80046d2:	eb42 0303 	adc.w	r3, r2, r3
 80046d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046e0:	f7fb fde6 	bl	80002b0 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b61      	ldr	r3, [pc, #388]	@ (8004870 <UART_SetConfig+0x2d4>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	011c      	lsls	r4, r3, #4
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800470c:	415b      	adcs	r3, r3
 800470e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004714:	4641      	mov	r1, r8
 8004716:	eb12 0a01 	adds.w	sl, r2, r1
 800471a:	4649      	mov	r1, r9
 800471c:	eb43 0b01 	adc.w	fp, r3, r1
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800472c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004734:	4692      	mov	sl, r2
 8004736:	469b      	mov	fp, r3
 8004738:	4643      	mov	r3, r8
 800473a:	eb1a 0303 	adds.w	r3, sl, r3
 800473e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004742:	464b      	mov	r3, r9
 8004744:	eb4b 0303 	adc.w	r3, fp, r3
 8004748:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004758:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800475c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004760:	460b      	mov	r3, r1
 8004762:	18db      	adds	r3, r3, r3
 8004764:	643b      	str	r3, [r7, #64]	@ 0x40
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	647b      	str	r3, [r7, #68]	@ 0x44
 800476e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004776:	f7fb fd9b 	bl	80002b0 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4611      	mov	r1, r2
 8004780:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <UART_SetConfig+0x2d4>)
 8004782:	fba3 2301 	umull	r2, r3, r3, r1
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2264      	movs	r2, #100	@ 0x64
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	1acb      	subs	r3, r1, r3
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004796:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <UART_SetConfig+0x2d4>)
 8004798:	fba3 2302 	umull	r2, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047a4:	441c      	add	r4, r3
 80047a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c0:	415b      	adcs	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047fc:	464b      	mov	r3, r9
 80047fe:	460a      	mov	r2, r1
 8004800:	eb42 0303 	adc.w	r3, r2, r3
 8004804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004814:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800481c:	460b      	mov	r3, r1
 800481e:	18db      	adds	r3, r3, r3
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004822:	4613      	mov	r3, r2
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800482e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004832:	f7fb fd3d 	bl	80002b0 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <UART_SetConfig+0x2d4>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	@ 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	@ 0x32
 800484e:	4a08      	ldr	r2, [pc, #32]	@ (8004870 <UART_SetConfig+0x2d4>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	f003 0207 	and.w	r2, r3, #7
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4422      	add	r2, r4
 8004862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004864:	e106      	b.n	8004a74 <UART_SetConfig+0x4d8>
 8004866:	bf00      	nop
 8004868:	40011000 	.word	0x40011000
 800486c:	40011400 	.word	0x40011400
 8004870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800487e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	1891      	adds	r1, r2, r2
 800488c:	6239      	str	r1, [r7, #32]
 800488e:	415b      	adcs	r3, r3
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
 8004892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004896:	4641      	mov	r1, r8
 8004898:	1854      	adds	r4, r2, r1
 800489a:	4649      	mov	r1, r9
 800489c:	eb43 0501 	adc.w	r5, r3, r1
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	00eb      	lsls	r3, r5, #3
 80048aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ae:	00e2      	lsls	r2, r4, #3
 80048b0:	4614      	mov	r4, r2
 80048b2:	461d      	mov	r5, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	18e3      	adds	r3, r4, r3
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048bc:	464b      	mov	r3, r9
 80048be:	eb45 0303 	adc.w	r3, r5, r3
 80048c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048e2:	4629      	mov	r1, r5
 80048e4:	008b      	lsls	r3, r1, #2
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ec:	4621      	mov	r1, r4
 80048ee:	008a      	lsls	r2, r1, #2
 80048f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048f4:	f7fb fcdc 	bl	80002b0 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4b60      	ldr	r3, [pc, #384]	@ (8004a80 <UART_SetConfig+0x4e4>)
 80048fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	011c      	lsls	r4, r3, #4
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004910:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	61b9      	str	r1, [r7, #24]
 8004920:	415b      	adcs	r3, r3
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004928:	4641      	mov	r1, r8
 800492a:	1851      	adds	r1, r2, r1
 800492c:	6139      	str	r1, [r7, #16]
 800492e:	4649      	mov	r1, r9
 8004930:	414b      	adcs	r3, r1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004940:	4659      	mov	r1, fp
 8004942:	00cb      	lsls	r3, r1, #3
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494a:	4651      	mov	r1, sl
 800494c:	00ca      	lsls	r2, r1, #3
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	4603      	mov	r3, r0
 8004954:	4642      	mov	r2, r8
 8004956:	189b      	adds	r3, r3, r2
 8004958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800495c:	464b      	mov	r3, r9
 800495e:	460a      	mov	r2, r1
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004972:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004992:	f7fb fc8d 	bl	80002b0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b38      	ldr	r3, [pc, #224]	@ (8004a80 <UART_SetConfig+0x4e4>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	@ 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	3332      	adds	r3, #50	@ 0x32
 80049b0:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <UART_SetConfig+0x4e4>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049bc:	441c      	add	r4, r3
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80049c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	415b      	adcs	r3, r3
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049dc:	4641      	mov	r1, r8
 80049de:	1851      	adds	r1, r2, r1
 80049e0:	6039      	str	r1, [r7, #0]
 80049e2:	4649      	mov	r1, r9
 80049e4:	414b      	adcs	r3, r1
 80049e6:	607b      	str	r3, [r7, #4]
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f4:	4659      	mov	r1, fp
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	4651      	mov	r1, sl
 80049fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fe:	4651      	mov	r1, sl
 8004a00:	00ca      	lsls	r2, r1, #3
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a0e:	464b      	mov	r3, r9
 8004a10:	460a      	mov	r2, r1
 8004a12:	eb42 0303 	adc.w	r3, r2, r3
 8004a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a22:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a30:	4649      	mov	r1, r9
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	4641      	mov	r1, r8
 8004a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	008a      	lsls	r2, r1, #2
 8004a3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a42:	f7fb fc35 	bl	80002b0 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <UART_SetConfig+0x4e4>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	@ 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	3332      	adds	r3, #50	@ 0x32
 8004a5e:	4a08      	ldr	r2, [pc, #32]	@ (8004a80 <UART_SetConfig+0x4e4>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4422      	add	r2, r4
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a80:	51eb851f 	.word	0x51eb851f

08004a84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f103 0208 	add.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f103 0208 	add.w	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f103 0208 	add.w	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b3c:	d103      	bne.n	8004b46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e00c      	b.n	8004b60 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e002      	b.n	8004b54 <vListInsert+0x2e>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d2f6      	bcs.n	8004b4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	601a      	str	r2, [r3, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6892      	ldr	r2, [r2, #8]
 8004bae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6852      	ldr	r2, [r2, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d103      	bne.n	8004bcc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	1e5a      	subs	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xQueueGenericReset+0x30>
        __asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60fb      	str	r3, [r7, #12]
    }
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d05d      	beq.n	8004cde <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d059      	beq.n	8004cde <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	2100      	movs	r1, #0
 8004c34:	fba3 2302 	umull	r2, r3, r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d000      	beq.n	8004c3e <xQueueGenericReset+0x52>
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d14c      	bne.n	8004cde <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004c44:	f002 fd42 	bl	80076cc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c50:	6939      	ldr	r1, [r7, #16]
 8004c52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	441a      	add	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2200      	movs	r2, #0
 8004c62:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	3b01      	subs	r3, #1
 8004c76:	6939      	ldr	r1, [r7, #16]
 8004c78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	441a      	add	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	22ff      	movs	r2, #255	@ 0xff
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	22ff      	movs	r2, #255	@ 0xff
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d114      	bne.n	8004cc4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01a      	beq.n	8004cd8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	3310      	adds	r3, #16
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 fa76 	bl	8006198 <xTaskRemoveFromEventList>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004cb2:	4b16      	ldr	r3, [pc, #88]	@ (8004d0c <xQueueGenericReset+0x120>)
 8004cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	e009      	b.n	8004cd8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fedb 	bl	8004a84 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3324      	adds	r3, #36	@ 0x24
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fed6 	bl	8004a84 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004cd8:	f002 fd2a 	bl	8007730 <vPortExitCritical>
 8004cdc:	e001      	b.n	8004ce2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <xQueueGenericReset+0x114>
        __asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60bb      	str	r3, [r7, #8]
    }
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004d00:	697b      	ldr	r3, [r7, #20]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	@ 0x28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02e      	beq.n	8004d86 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004d28:	2100      	movs	r1, #0
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d000      	beq.n	8004d38 <xQueueGenericCreate+0x28>
 8004d36:	2101      	movs	r1, #1
 8004d38:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d123      	bne.n	8004d86 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004d46:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004d4a:	d81c      	bhi.n	8004d86 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	fb02 f303 	mul.w	r3, r2, r3
 8004d54:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3350      	adds	r3, #80	@ 0x50
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f002 fde0 	bl	8007920 <pvPortMalloc>
 8004d60:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01d      	beq.n	8004da4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3350      	adds	r3, #80	@ 0x50
 8004d70:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d72:	79fa      	ldrb	r2, [r7, #7]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f815 	bl	8004dae <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004d84:	e00e      	b.n	8004da4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <xQueueGenericCreate+0x94>
        __asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	613b      	str	r3, [r7, #16]
    }
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004da4:	69fb      	ldr	r3, [r7, #28]
    }
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e002      	b.n	8004dd0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ddc:	2101      	movs	r1, #1
 8004dde:	69b8      	ldr	r0, [r7, #24]
 8004de0:	f7ff ff04 	bl	8004bec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	@ 0x38
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <xQueueGenericSend+0x34>
        __asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <xQueueGenericSend+0x42>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <xQueueGenericSend+0x46>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueGenericSend+0x48>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <xQueueGenericSend+0x64>
        __asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d103      	bne.n	8004e66 <xQueueGenericSend+0x72>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <xQueueGenericSend+0x76>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <xQueueGenericSend+0x78>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <xQueueGenericSend+0x94>
        __asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	623b      	str	r3, [r7, #32]
    }
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e88:	f001 fb9a 	bl	80065c0 <xTaskGetSchedulerState>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <xQueueGenericSend+0xa4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <xQueueGenericSend+0xa8>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <xQueueGenericSend+0xaa>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <xQueueGenericSend+0xc6>
        __asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	61fb      	str	r3, [r7, #28]
    }
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004eba:	f002 fc07 	bl	80076cc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <xQueueGenericSend+0xdc>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d129      	bne.n	8004f24 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ed6:	f000 fae0 	bl	800549a <prvCopyDataToQueue>
 8004eda:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d010      	beq.n	8004f06 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	3324      	adds	r3, #36	@ 0x24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f955 	bl	8006198 <xTaskRemoveFromEventList>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff4 <xQueueGenericSend+0x200>)
 8004ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	e00a      	b.n	8004f1c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004f0c:	4b39      	ldr	r3, [pc, #228]	@ (8004ff4 <xQueueGenericSend+0x200>)
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004f1c:	f002 fc08 	bl	8007730 <vPortExitCritical>
                return pdPASS;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e063      	b.n	8004fec <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f2a:	f002 fc01 	bl	8007730 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e05c      	b.n	8004fec <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f38:	f107 0314 	add.w	r3, r7, #20
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 fa03 	bl	8006348 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f46:	f002 fbf3 	bl	8007730 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f4a:	f000 fe1f 	bl	8005b8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f4e:	f002 fbbd 	bl	80076cc <vPortEnterCritical>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f5e:	d103      	bne.n	8004f68 <xQueueGenericSend+0x174>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f74:	d103      	bne.n	8004f7e <xQueueGenericSend+0x18a>
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f7e:	f002 fbd7 	bl	8007730 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f82:	1d3a      	adds	r2, r7, #4
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f9f2 	bl	8006374 <xTaskCheckForTimeOut>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d124      	bne.n	8004fe0 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f98:	f000 fb77 	bl	800568a <prvIsQueueFull>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d018      	beq.n	8004fd4 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	3310      	adds	r3, #16
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f888 	bl	80060c0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fb2:	f000 fb02 	bl	80055ba <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004fb6:	f000 fdf7 	bl	8005ba8 <xTaskResumeAll>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f47f af7c 	bne.w	8004eba <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <xQueueGenericSend+0x200>)
 8004fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	e772      	b.n	8004eba <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fd6:	f000 faf0 	bl	80055ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004fda:	f000 fde5 	bl	8005ba8 <xTaskResumeAll>
 8004fde:	e76c      	b.n	8004eba <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fe2:	f000 faea 	bl	80055ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004fe6:	f000 fddf 	bl	8005ba8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004fea:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3738      	adds	r7, #56	@ 0x38
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	e000ed04 	.word	0xe000ed04

08004ff8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b092      	sub	sp, #72	@ 0x48
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 800500a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <xQueueGenericSendFromISR+0x3e>
 800502e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <xQueueGenericSendFromISR+0x42>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericSendFromISR+0x44>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d103      	bne.n	8005066 <xQueueGenericSendFromISR+0x6e>
 800505e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <xQueueGenericSendFromISR+0x72>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <xQueueGenericSendFromISR+0x74>
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005088:	f002 fc08 	bl	800789c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800508c:	f3ef 8211 	mrs	r2, BASEPRI
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	623a      	str	r2, [r7, #32]
 80050a2:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <xQueueGenericSendFromISR+0xc2>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d147      	bne.n	800514a <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80050ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80050d0:	f000 f9e3 	bl	800549a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80050d4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050dc:	d112      	bne.n	8005104 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02e      	beq.n	8005144 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e8:	3324      	adds	r3, #36	@ 0x24
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 f854 	bl	8006198 <xTaskRemoveFromEventList>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d026      	beq.n	8005144 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d023      	beq.n	8005144 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e01f      	b.n	8005144 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005104:	f000 fe5c 	bl	8005dc0 <uxTaskGetNumberOfTasks>
 8005108:	6338      	str	r0, [r7, #48]	@ 0x30
 800510a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800510e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005110:	429a      	cmp	r2, r3
 8005112:	d917      	bls.n	8005144 <xQueueGenericSendFromISR+0x14c>
 8005114:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005118:	2b7f      	cmp	r3, #127	@ 0x7f
 800511a:	d10b      	bne.n	8005134 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	61bb      	str	r3, [r7, #24]
    }
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xQueueGenericSendFromISR+0x138>
 8005134:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005138:	3301      	adds	r3, #1
 800513a:	b2db      	uxtb	r3, r3
 800513c:	b25a      	sxtb	r2, r3
 800513e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005144:	2301      	movs	r3, #1
 8005146:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8005148:	e001      	b.n	800514e <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800514a:	2300      	movs	r3, #0
 800514c:	647b      	str	r3, [r7, #68]	@ 0x44
 800514e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005150:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005158:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800515a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800515c:	4618      	mov	r0, r3
 800515e:	3748      	adds	r7, #72	@ 0x48
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <xQueueReceive+0x32>
        __asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	623b      	str	r3, [r7, #32]
    }
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <xQueueReceive+0x40>
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <xQueueReceive+0x44>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <xQueueReceive+0x46>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <xQueueReceive+0x62>
        __asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	61fb      	str	r3, [r7, #28]
    }
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051c6:	f001 f9fb 	bl	80065c0 <xTaskGetSchedulerState>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <xQueueReceive+0x72>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <xQueueReceive+0x76>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueReceive+0x78>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <xQueueReceive+0x94>
        __asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61bb      	str	r3, [r7, #24]
    }
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80051f8:	f002 fa68 	bl	80076cc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01f      	beq.n	8005248 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800520c:	f000 f9af 	bl	800556e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	1e5a      	subs	r2, r3, #1
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00f      	beq.n	8005240 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005222:	3310      	adds	r3, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ffb7 	bl	8006198 <xTaskRemoveFromEventList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005230:	4b3c      	ldr	r3, [pc, #240]	@ (8005324 <xQueueReceive+0x1c0>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005240:	f002 fa76 	bl	8007730 <vPortExitCritical>
                return pdPASS;
 8005244:	2301      	movs	r3, #1
 8005246:	e069      	b.n	800531c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800524e:	f002 fa6f 	bl	8007730 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005252:	2300      	movs	r3, #0
 8005254:	e062      	b.n	800531c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800525c:	f107 0310 	add.w	r3, r7, #16
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f871 	bl	8006348 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005266:	2301      	movs	r3, #1
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800526a:	f002 fa61 	bl	8007730 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800526e:	f000 fc8d 	bl	8005b8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005272:	f002 fa2b 	bl	80076cc <vPortEnterCritical>
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800527c:	b25b      	sxtb	r3, r3
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005282:	d103      	bne.n	800528c <xQueueReceive+0x128>
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005292:	b25b      	sxtb	r3, r3
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005298:	d103      	bne.n	80052a2 <xQueueReceive+0x13e>
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052a2:	f002 fa45 	bl	8007730 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052a6:	1d3a      	adds	r2, r7, #4
 80052a8:	f107 0310 	add.w	r3, r7, #16
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 f860 	bl	8006374 <xTaskCheckForTimeOut>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d123      	bne.n	8005302 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052bc:	f000 f9cf 	bl	800565e <prvIsQueueEmpty>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d017      	beq.n	80052f6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	3324      	adds	r3, #36	@ 0x24
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fef6 	bl	80060c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80052d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d6:	f000 f970 	bl	80055ba <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80052da:	f000 fc65 	bl	8005ba8 <xTaskResumeAll>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d189      	bne.n	80051f8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80052e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <xQueueReceive+0x1c0>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	e780      	b.n	80051f8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80052f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f8:	f000 f95f 	bl	80055ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80052fc:	f000 fc54 	bl	8005ba8 <xTaskResumeAll>
 8005300:	e77a      	b.n	80051f8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005304:	f000 f959 	bl	80055ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005308:	f000 fc4e 	bl	8005ba8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800530e:	f000 f9a6 	bl	800565e <prvIsQueueEmpty>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	f43f af6f 	beq.w	80051f8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800531a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800531c:	4618      	mov	r0, r3
 800531e:	3730      	adds	r7, #48	@ 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b090      	sub	sp, #64	@ 0x40
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <xQueueReceiveFromISR+0x3c>
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <xQueueReceiveFromISR+0x40>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <xQueueReceiveFromISR+0x42>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	623b      	str	r3, [r7, #32]
    }
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005386:	f002 fa89 	bl	800789c <vPortValidateInterruptPriority>
        __asm volatile
 800538a:	f3ef 8211 	mrs	r2, BASEPRI
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61fa      	str	r2, [r7, #28]
 80053a0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80053a2:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d047      	beq.n	8005442 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053c0:	f000 f8d5 	bl	800556e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ca:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80053cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d4:	d112      	bne.n	80053fc <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d02e      	beq.n	800543c <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e0:	3310      	adds	r3, #16
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fed8 	bl	8006198 <xTaskRemoveFromEventList>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d026      	beq.n	800543c <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d023      	beq.n	800543c <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e01f      	b.n	800543c <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80053fc:	f000 fce0 	bl	8005dc0 <uxTaskGetNumberOfTasks>
 8005400:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005402:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005408:	429a      	cmp	r2, r3
 800540a:	d917      	bls.n	800543c <xQueueReceiveFromISR+0x114>
 800540c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005410:	2b7f      	cmp	r3, #127	@ 0x7f
 8005412:	d10b      	bne.n	800542c <xQueueReceiveFromISR+0x104>
        __asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	617b      	str	r3, [r7, #20]
    }
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <xQueueReceiveFromISR+0x100>
 800542c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005430:	3301      	adds	r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	b25a      	sxtb	r2, r3
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800543c:	2301      	movs	r3, #1
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005440:	e001      	b.n	8005446 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8005442:	2300      	movs	r3, #0
 8005444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	613b      	str	r3, [r7, #16]
        __asm volatile
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f383 8811 	msr	BASEPRI, r3
    }
 8005450:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005454:	4618      	mov	r0, r3
 8005456:	3740      	adds	r7, #64	@ 0x40
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	60bb      	str	r3, [r7, #8]
    }
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005482:	f002 f923 	bl	80076cc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800548c:	f002 f950 	bl	8007730 <vPortExitCritical>

    return uxReturn;
 8005490:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d14d      	bne.n	800555c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 f899 	bl	80065fc <xTaskPriorityDisinherit>
 80054ca:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	e043      	b.n	800555c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d119      	bne.n	800550e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6858      	ldr	r0, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	461a      	mov	r2, r3
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	f002 fc6b 	bl	8007dc0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	441a      	add	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	d32b      	bcc.n	800555c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	e026      	b.n	800555c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68d8      	ldr	r0, [r3, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	461a      	mov	r2, r3
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	f002 fc51 	bl	8007dc0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	425b      	negs	r3, r3
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d207      	bcs.n	800554a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	425b      	negs	r3, r3
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d105      	bne.n	800555c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3b01      	subs	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005564:	697b      	ldr	r3, [r7, #20]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d018      	beq.n	80055b2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	d303      	bcc.n	80055a2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	461a      	mov	r2, r3
 80055ac:	6838      	ldr	r0, [r7, #0]
 80055ae:	f002 fc07 	bl	8007dc0 <memcpy>
    }
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80055c2:	f002 f883 	bl	80076cc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055cc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ce:	e011      	b.n	80055f4 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d012      	beq.n	80055fe <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3324      	adds	r3, #36	@ 0x24
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fddb 	bl	8006198 <xTaskRemoveFromEventList>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80055e8:	f000 ff2c 	bl	8006444 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80055f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dce9      	bgt.n	80055d0 <prvUnlockQueue+0x16>
 80055fc:	e000      	b.n	8005600 <prvUnlockQueue+0x46>
                    break;
 80055fe:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	22ff      	movs	r2, #255	@ 0xff
 8005604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005608:	f002 f892 	bl	8007730 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800560c:	f002 f85e 	bl	80076cc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005616:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005618:	e011      	b.n	800563e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d012      	beq.n	8005648 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fdb6 	bl	8006198 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005632:	f000 ff07 	bl	8006444 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	3b01      	subs	r3, #1
 800563a:	b2db      	uxtb	r3, r3
 800563c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800563e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005642:	2b00      	cmp	r3, #0
 8005644:	dce9      	bgt.n	800561a <prvUnlockQueue+0x60>
 8005646:	e000      	b.n	800564a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005648:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	22ff      	movs	r2, #255	@ 0xff
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005652:	f002 f86d 	bl	8007730 <vPortExitCritical>
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005666:	f002 f831 	bl	80076cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e001      	b.n	800567c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800567c:	f002 f858 	bl	8007730 <vPortExitCritical>

    return xReturn;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005692:	f002 f81b 	bl	80076cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569e:	429a      	cmp	r2, r3
 80056a0:	d102      	bne.n	80056a8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80056a2:	2301      	movs	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e001      	b.n	80056ac <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80056ac:	f002 f840 	bl	8007730 <vPortExitCritical>

    return xReturn;
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10b      	bne.n	80056e4 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
    }
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d102      	bne.n	80056f6 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e001      	b.n	80056fa <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80056fa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
    }
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d024      	beq.n	8005784 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e01e      	b.n	800577e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005740:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <vQueueAddToRegistry+0x9c>)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d105      	bne.n	800575c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4a13      	ldr	r2, [pc, #76]	@ (80057a4 <vQueueAddToRegistry+0x9c>)
 8005756:	4413      	add	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
                    break;
 800575a:	e013      	b.n	8005784 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <vQueueAddToRegistry+0x70>
 8005762:	4a10      	ldr	r2, [pc, #64]	@ (80057a4 <vQueueAddToRegistry+0x9c>)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4a0c      	ldr	r2, [pc, #48]	@ (80057a4 <vQueueAddToRegistry+0x9c>)
 8005774:	4413      	add	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b07      	cmp	r3, #7
 8005782:	d9dd      	bls.n	8005740 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000218 	.word	0x20000218

080057a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80057b8:	f001 ff88 	bl	80076cc <vPortEnterCritical>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057c8:	d103      	bne.n	80057d2 <vQueueWaitForMessageRestricted+0x2a>
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057de:	d103      	bne.n	80057e8 <vQueueWaitForMessageRestricted+0x40>
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057e8:	f001 ffa2 	bl	8007730 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3324      	adds	r3, #36	@ 0x24
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fc85 	bl	800610c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f7ff fed9 	bl	80055ba <prvUnlockQueue>
    }
 8005808:	bf00      	nop
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	@ 0x30
 8005814:	af04      	add	r7, sp, #16
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f002 f87b 	bl	8007920 <pvPortMalloc>
 800582a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d013      	beq.n	800585a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005832:	2058      	movs	r0, #88	@ 0x58
 8005834:	f002 f874 	bl	8007920 <pvPortMalloc>
 8005838:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005840:	2258      	movs	r2, #88	@ 0x58
 8005842:	2100      	movs	r1, #0
 8005844:	69f8      	ldr	r0, [r7, #28]
 8005846:	f002 fa87 	bl	8007d58 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005850:	e005      	b.n	800585e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f002 f920 	bl	8007a98 <vPortFree>
 8005858:	e001      	b.n	800585e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	2300      	movs	r3, #0
 8005868:	9303      	str	r3, [sp, #12]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f80e 	bl	800589c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005880:	69f8      	ldr	r0, [r7, #28]
 8005882:	f000 f89b 	bl	80059bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005886:	2301      	movs	r3, #1
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e002      	b.n	8005892 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800588c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005890:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005892:	69bb      	ldr	r3, [r7, #24]
    }
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	461a      	mov	r2, r3
 80058b4:	21a5      	movs	r1, #165	@ 0xa5
 80058b6:	f002 fa4f 	bl	8007d58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058c4:	3b01      	subs	r3, #1
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f023 0307 	bic.w	r3, r3, #7
 80058d2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	617b      	str	r3, [r7, #20]
    }
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	e7fd      	b.n	80058f2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01e      	beq.n	800593a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e012      	b.n	8005928 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	7819      	ldrb	r1, [r3, #0]
 800590a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	3334      	adds	r3, #52	@ 0x34
 8005912:	460a      	mov	r2, r1
 8005914:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b09      	cmp	r3, #9
 800592c:	d9e9      	bls.n	8005902 <prvInitialiseNewTask+0x66>
 800592e:	e000      	b.n	8005932 <prvInitialiseNewTask+0x96>
            {
                break;
 8005930:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	2b04      	cmp	r3, #4
 800593e:	d90b      	bls.n	8005958 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
    }
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595a:	2b04      	cmp	r3, #4
 800595c:	d901      	bls.n	8005962 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800595e:	2304      	movs	r3, #4
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005966:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800596c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff f8a6 	bl	8004ac4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	3318      	adds	r3, #24
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff f8a1 	bl	8004ac4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005986:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	f1c3 0205 	rsb	r2, r3, #5
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005996:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	69b8      	ldr	r0, [r7, #24]
 800599e:	f001 fd63 	bl	8007468 <pxPortInitialiseStack>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059b4:	bf00      	nop
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80059c4:	f001 fe82 	bl	80076cc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80059c8:	4b40      	ldr	r3, [pc, #256]	@ (8005acc <prvAddNewTaskToReadyList+0x110>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	4a3f      	ldr	r2, [pc, #252]	@ (8005acc <prvAddNewTaskToReadyList+0x110>)
 80059d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80059d2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad0 <prvAddNewTaskToReadyList+0x114>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80059da:	4a3d      	ldr	r2, [pc, #244]	@ (8005ad0 <prvAddNewTaskToReadyList+0x114>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059e0:	4b3a      	ldr	r3, [pc, #232]	@ (8005acc <prvAddNewTaskToReadyList+0x110>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d110      	bne.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80059e8:	f000 fd50 	bl	800648c <prvInitialiseTaskLists>
 80059ec:	e00d      	b.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80059ee:	4b39      	ldr	r3, [pc, #228]	@ (8005ad4 <prvAddNewTaskToReadyList+0x118>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059f6:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <prvAddNewTaskToReadyList+0x114>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d802      	bhi.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005a04:	4a32      	ldr	r2, [pc, #200]	@ (8005ad0 <prvAddNewTaskToReadyList+0x114>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005a0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ad8 <prvAddNewTaskToReadyList+0x11c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	4a31      	ldr	r2, [pc, #196]	@ (8005ad8 <prvAddNewTaskToReadyList+0x11c>)
 8005a12:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a14:	4b30      	ldr	r3, [pc, #192]	@ (8005ad8 <prvAddNewTaskToReadyList+0x11c>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	4b2d      	ldr	r3, [pc, #180]	@ (8005adc <prvAddNewTaskToReadyList+0x120>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005adc <prvAddNewTaskToReadyList+0x120>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a32:	492b      	ldr	r1, [pc, #172]	@ (8005ae0 <prvAddNewTaskToReadyList+0x124>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3304      	adds	r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	3204      	adds	r2, #4
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1d1a      	adds	r2, r3, #4
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <prvAddNewTaskToReadyList+0x124>)
 8005a72:	441a      	add	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	615a      	str	r2, [r3, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7c:	4918      	ldr	r1, [pc, #96]	@ (8005ae0 <prvAddNewTaskToReadyList+0x124>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	4814      	ldr	r0, [pc, #80]	@ (8005ae0 <prvAddNewTaskToReadyList+0x124>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4403      	add	r3, r0
 8005a98:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005a9a:	f001 fe49 	bl	8007730 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <prvAddNewTaskToReadyList+0x118>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00e      	beq.n	8005ac4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <prvAddNewTaskToReadyList+0x114>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d207      	bcs.n	8005ac4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <prvAddNewTaskToReadyList+0x128>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000330 	.word	0x20000330
 8005ad0:	20000258 	.word	0x20000258
 8005ad4:	2000033c 	.word	0x2000033c
 8005ad8:	2000034c 	.word	0x2000034c
 8005adc:	20000338 	.word	0x20000338
 8005ae0:	2000025c 	.word	0x2000025c
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005aee:	4b20      	ldr	r3, [pc, #128]	@ (8005b70 <vTaskStartScheduler+0x88>)
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2300      	movs	r3, #0
 8005af8:	2282      	movs	r2, #130	@ 0x82
 8005afa:	491e      	ldr	r1, [pc, #120]	@ (8005b74 <vTaskStartScheduler+0x8c>)
 8005afc:	481e      	ldr	r0, [pc, #120]	@ (8005b78 <vTaskStartScheduler+0x90>)
 8005afe:	f7ff fe87 	bl	8005810 <xTaskCreate>
 8005b02:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d102      	bne.n	8005b10 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005b0a:	f001 f979 	bl	8006e00 <xTimerCreateTimerTask>
 8005b0e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d116      	bne.n	8005b44 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	60bb      	str	r3, [r7, #8]
    }
 8005b28:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005b2a:	4b14      	ldr	r3, [pc, #80]	@ (8005b7c <vTaskStartScheduler+0x94>)
 8005b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b30:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <vTaskStartScheduler+0x98>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b38:	4b12      	ldr	r3, [pc, #72]	@ (8005b84 <vTaskStartScheduler+0x9c>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005b3e:	f001 fd21 	bl	8007584 <xPortStartScheduler>
 8005b42:	e00f      	b.n	8005b64 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4a:	d10b      	bne.n	8005b64 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	607b      	str	r3, [r7, #4]
    }
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005b64:	4b08      	ldr	r3, [pc, #32]	@ (8005b88 <vTaskStartScheduler+0xa0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000354 	.word	0x20000354
 8005b74:	080093ac 	.word	0x080093ac
 8005b78:	0800645d 	.word	0x0800645d
 8005b7c:	20000350 	.word	0x20000350
 8005b80:	2000033c 	.word	0x2000033c
 8005b84:	20000334 	.word	0x20000334
 8005b88:	2000002c 	.word	0x2000002c

08005b8c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <vTaskSuspendAll+0x18>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a03      	ldr	r2, [pc, #12]	@ (8005ba4 <vTaskSuspendAll+0x18>)
 8005b98:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005b9a:	bf00      	nop
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000358 	.word	0x20000358

08005ba8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005bb6:	4b71      	ldr	r3, [pc, #452]	@ (8005d7c <xTaskResumeAll+0x1d4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10b      	bne.n	8005bd6 <xTaskResumeAll+0x2e>
        __asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
    }
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005bd6:	f001 fd79 	bl	80076cc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005bda:	4b68      	ldr	r3, [pc, #416]	@ (8005d7c <xTaskResumeAll+0x1d4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a66      	ldr	r2, [pc, #408]	@ (8005d7c <xTaskResumeAll+0x1d4>)
 8005be2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005be4:	4b65      	ldr	r3, [pc, #404]	@ (8005d7c <xTaskResumeAll+0x1d4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f040 80c0 	bne.w	8005d6e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bee:	4b64      	ldr	r3, [pc, #400]	@ (8005d80 <xTaskResumeAll+0x1d8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80bb 	beq.w	8005d6e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	e08a      	b.n	8005d10 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfa:	4b62      	ldr	r3, [pc, #392]	@ (8005d84 <xTaskResumeAll+0x1dc>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	6a12      	ldr	r2, [r2, #32]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	69d2      	ldr	r2, [r2, #28]
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3318      	adds	r3, #24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d103      	bne.n	8005c30 <xTaskResumeAll+0x88>
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2200      	movs	r2, #0
 8005c34:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	68d2      	ldr	r2, [r2, #12]
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	6892      	ldr	r2, [r2, #8]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d103      	bne.n	8005c6e <xTaskResumeAll+0xc6>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2200      	movs	r2, #0
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	1e5a      	subs	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	2201      	movs	r2, #1
 8005c84:	409a      	lsls	r2, r3
 8005c86:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <xTaskResumeAll+0x1e0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d88 <xTaskResumeAll+0x1e0>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c94:	493d      	ldr	r1, [pc, #244]	@ (8005d8c <xTaskResumeAll+0x1e4>)
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	3204      	adds	r2, #4
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	609a      	str	r2, [r3, #8]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d8c <xTaskResumeAll+0x1e4>)
 8005cd4:	441a      	add	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	615a      	str	r2, [r3, #20]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cde:	492b      	ldr	r1, [pc, #172]	@ (8005d8c <xTaskResumeAll+0x1e4>)
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	4827      	ldr	r0, [pc, #156]	@ (8005d8c <xTaskResumeAll+0x1e4>)
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4403      	add	r3, r0
 8005cfa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d00:	4b23      	ldr	r3, [pc, #140]	@ (8005d90 <xTaskResumeAll+0x1e8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8005d0a:	4b22      	ldr	r3, [pc, #136]	@ (8005d94 <xTaskResumeAll+0x1ec>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d10:	4b1c      	ldr	r3, [pc, #112]	@ (8005d84 <xTaskResumeAll+0x1dc>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f47f af70 	bne.w	8005bfa <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005d20:	f000 fc32 	bl	8006588 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d24:	4b1c      	ldr	r3, [pc, #112]	@ (8005d98 <xTaskResumeAll+0x1f0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005d30:	f000 f852 	bl	8005dd8 <xTaskIncrementTick>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <xTaskResumeAll+0x1ec>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f1      	bne.n	8005d30 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8005d4c:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <xTaskResumeAll+0x1f0>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005d52:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <xTaskResumeAll+0x1ec>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <xTaskResumeAll+0x1f4>)
 8005d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005d6e:	f001 fcdf 	bl	8007730 <vPortExitCritical>

    return xAlreadyYielded;
 8005d72:	69bb      	ldr	r3, [r7, #24]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000358 	.word	0x20000358
 8005d80:	20000330 	.word	0x20000330
 8005d84:	200002f0 	.word	0x200002f0
 8005d88:	20000338 	.word	0x20000338
 8005d8c:	2000025c 	.word	0x2000025c
 8005d90:	20000258 	.word	0x20000258
 8005d94:	20000344 	.word	0x20000344
 8005d98:	20000340 	.word	0x20000340
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005da6:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <xTaskGetTickCount+0x1c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005dac:	687b      	ldr	r3, [r7, #4]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000334 	.word	0x20000334

08005dc0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	@ (8005dd4 <uxTaskGetNumberOfTasks+0x14>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000330 	.word	0x20000330

08005dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	@ 0x28
 8005ddc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b7e      	ldr	r3, [pc, #504]	@ (8005fdc <xTaskIncrementTick+0x204>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 80ed 	bne.w	8005fc6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dec:	4b7c      	ldr	r3, [pc, #496]	@ (8005fe0 <xTaskIncrementTick+0x208>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005df4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fe0 <xTaskIncrementTick+0x208>)
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d121      	bne.n	8005e44 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005e00:	4b78      	ldr	r3, [pc, #480]	@ (8005fe4 <xTaskIncrementTick+0x20c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <xTaskIncrementTick+0x4a>
        __asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	607b      	str	r3, [r7, #4]
    }
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <xTaskIncrementTick+0x46>
 8005e22:	4b70      	ldr	r3, [pc, #448]	@ (8005fe4 <xTaskIncrementTick+0x20c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	4b6f      	ldr	r3, [pc, #444]	@ (8005fe8 <xTaskIncrementTick+0x210>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a6d      	ldr	r2, [pc, #436]	@ (8005fe4 <xTaskIncrementTick+0x20c>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a6d      	ldr	r2, [pc, #436]	@ (8005fe8 <xTaskIncrementTick+0x210>)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b6d      	ldr	r3, [pc, #436]	@ (8005fec <xTaskIncrementTick+0x214>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8005fec <xTaskIncrementTick+0x214>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	f000 fba2 	bl	8006588 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005e44:	4b6a      	ldr	r3, [pc, #424]	@ (8005ff0 <xTaskIncrementTick+0x218>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a3a      	ldr	r2, [r7, #32]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	f0c0 80a6 	bcc.w	8005f9c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e50:	4b64      	ldr	r3, [pc, #400]	@ (8005fe4 <xTaskIncrementTick+0x20c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5a:	4b65      	ldr	r3, [pc, #404]	@ (8005ff0 <xTaskIncrementTick+0x218>)
 8005e5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e60:	601a      	str	r2, [r3, #0]
                    break;
 8005e62:	e09b      	b.n	8005f9c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e64:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe4 <xTaskIncrementTick+0x20c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d203      	bcs.n	8005e84 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ff0 <xTaskIncrementTick+0x218>)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005e82:	e08b      	b.n	8005f9c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	68d2      	ldr	r2, [r2, #12]
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d103      	bne.n	8005eb2 <xTaskIncrementTick+0xda>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	615a      	str	r2, [r3, #20]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01e      	beq.n	8005f08 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	6a12      	ldr	r2, [r2, #32]
 8005ed8:	609a      	str	r2, [r3, #8]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	69d2      	ldr	r2, [r2, #28]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	3318      	adds	r3, #24
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d103      	bne.n	8005ef8 <xTaskIncrementTick+0x120>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2200      	movs	r2, #0
 8005efc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1e5a      	subs	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	4b38      	ldr	r3, [pc, #224]	@ (8005ff4 <xTaskIncrementTick+0x21c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	4a37      	ldr	r2, [pc, #220]	@ (8005ff4 <xTaskIncrementTick+0x21c>)
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1e:	4936      	ldr	r1, [pc, #216]	@ (8005ff8 <xTaskIncrementTick+0x220>)
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	609a      	str	r2, [r3, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	3204      	adds	r2, #4
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <xTaskIncrementTick+0x220>)
 8005f5e:	441a      	add	r2, r3
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	615a      	str	r2, [r3, #20]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f68:	4923      	ldr	r1, [pc, #140]	@ (8005ff8 <xTaskIncrementTick+0x220>)
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1c59      	adds	r1, r3, #1
 8005f78:	481f      	ldr	r0, [pc, #124]	@ (8005ff8 <xTaskIncrementTick+0x220>)
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4403      	add	r3, r0
 8005f84:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8005ffc <xTaskIncrementTick+0x224>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	f67f af5d 	bls.w	8005e50 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f9a:	e759      	b.n	8005e50 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f9c:	4b17      	ldr	r3, [pc, #92]	@ (8005ffc <xTaskIncrementTick+0x224>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa2:	4915      	ldr	r1, [pc, #84]	@ (8005ff8 <xTaskIncrementTick+0x220>)
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d901      	bls.n	8005fb8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005fb8:	4b11      	ldr	r3, [pc, #68]	@ (8006000 <xTaskIncrementTick+0x228>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc4:	e004      	b.n	8005fd0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006004 <xTaskIncrementTick+0x22c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8006004 <xTaskIncrementTick+0x22c>)
 8005fce:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3728      	adds	r7, #40	@ 0x28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000358 	.word	0x20000358
 8005fe0:	20000334 	.word	0x20000334
 8005fe4:	200002e8 	.word	0x200002e8
 8005fe8:	200002ec 	.word	0x200002ec
 8005fec:	20000348 	.word	0x20000348
 8005ff0:	20000350 	.word	0x20000350
 8005ff4:	20000338 	.word	0x20000338
 8005ff8:	2000025c 	.word	0x2000025c
 8005ffc:	20000258 	.word	0x20000258
 8006000:	20000344 	.word	0x20000344
 8006004:	20000340 	.word	0x20000340

08006008 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800600e:	4b27      	ldr	r3, [pc, #156]	@ (80060ac <vTaskSwitchContext+0xa4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006016:	4b26      	ldr	r3, [pc, #152]	@ (80060b0 <vTaskSwitchContext+0xa8>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800601c:	e040      	b.n	80060a0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800601e:	4b24      	ldr	r3, [pc, #144]	@ (80060b0 <vTaskSwitchContext+0xa8>)
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006024:	4b23      	ldr	r3, [pc, #140]	@ (80060b4 <vTaskSwitchContext+0xac>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	fab3 f383 	clz	r3, r3
 8006030:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	f1c3 031f 	rsb	r3, r3, #31
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	491f      	ldr	r1, [pc, #124]	@ (80060b8 <vTaskSwitchContext+0xb0>)
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <vTaskSwitchContext+0x5e>
        __asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
    }
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <vTaskSwitchContext+0x5a>
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <vTaskSwitchContext+0xb0>)
 8006072:	4413      	add	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3308      	adds	r3, #8
 8006088:	429a      	cmp	r2, r3
 800608a:	d104      	bne.n	8006096 <vTaskSwitchContext+0x8e>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a07      	ldr	r2, [pc, #28]	@ (80060bc <vTaskSwitchContext+0xb4>)
 800609e:	6013      	str	r3, [r2, #0]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20000358 	.word	0x20000358
 80060b0:	20000344 	.word	0x20000344
 80060b4:	20000338 	.word	0x20000338
 80060b8:	2000025c 	.word	0x2000025c
 80060bc:	20000258 	.word	0x20000258

080060c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
    }
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060e8:	4b07      	ldr	r3, [pc, #28]	@ (8006108 <vTaskPlaceOnEventList+0x48>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3318      	adds	r3, #24
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fe fd18 	bl	8004b26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060f6:	2101      	movs	r1, #1
 80060f8:	6838      	ldr	r0, [r7, #0]
 80060fa:	f000 fe01 	bl	8006d00 <prvAddCurrentTaskToDelayedList>
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000258 	.word	0x20000258

0800610c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	613b      	str	r3, [r7, #16]
    }
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <vTaskPlaceOnEventListRestricted+0x88>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	61da      	str	r2, [r3, #28]
 8006144:	4b13      	ldr	r3, [pc, #76]	@ (8006194 <vTaskPlaceOnEventListRestricted+0x88>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	6892      	ldr	r2, [r2, #8]
 800614c:	621a      	str	r2, [r3, #32]
 800614e:	4b11      	ldr	r3, [pc, #68]	@ (8006194 <vTaskPlaceOnEventListRestricted+0x88>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	3218      	adds	r2, #24
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	4b0e      	ldr	r3, [pc, #56]	@ (8006194 <vTaskPlaceOnEventListRestricted+0x88>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f103 0218 	add.w	r2, r3, #24
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <vTaskPlaceOnEventListRestricted+0x88>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	629a      	str	r2, [r3, #40]	@ 0x28
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800617e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006182:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	68b8      	ldr	r0, [r7, #8]
 8006188:	f000 fdba 	bl	8006d00 <prvAddCurrentTaskToDelayedList>
    }
 800618c:	bf00      	nop
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000258 	.word	0x20000258

08006198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006198:	b480      	push	{r7}
 800619a:	b08b      	sub	sp, #44	@ 0x2c
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
    }
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	6a3a      	ldr	r2, [r7, #32]
 80061d2:	6a12      	ldr	r2, [r2, #32]
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	69d2      	ldr	r2, [r2, #28]
 80061de:	605a      	str	r2, [r3, #4]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	3318      	adds	r3, #24
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d103      	bne.n	80061f4 <xTaskRemoveFromEventList+0x5c>
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	6a1a      	ldr	r2, [r3, #32]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	2200      	movs	r2, #0
 80061f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	1e5a      	subs	r2, r3, #1
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006204:	4b4a      	ldr	r3, [pc, #296]	@ (8006330 <xTaskRemoveFromEventList+0x198>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d15e      	bne.n	80062ca <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	68d2      	ldr	r2, [r2, #12]
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	6892      	ldr	r2, [r2, #8]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	3304      	adds	r3, #4
 800622e:	429a      	cmp	r2, r3
 8006230:	d103      	bne.n	800623a <xTaskRemoveFromEventList+0xa2>
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	2200      	movs	r2, #0
 800623e:	615a      	str	r2, [r3, #20]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1e5a      	subs	r2, r3, #1
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624e:	2201      	movs	r2, #1
 8006250:	409a      	lsls	r2, r3
 8006252:	4b38      	ldr	r3, [pc, #224]	@ (8006334 <xTaskRemoveFromEventList+0x19c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4313      	orrs	r3, r2
 8006258:	4a36      	ldr	r2, [pc, #216]	@ (8006334 <xTaskRemoveFromEventList+0x19c>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006260:	4935      	ldr	r1, [pc, #212]	@ (8006338 <xTaskRemoveFromEventList+0x1a0>)
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	440b      	add	r3, r1
 800626c:	3304      	adds	r3, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	60da      	str	r2, [r3, #12]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	3204      	adds	r2, #4
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	609a      	str	r2, [r3, #8]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4a26      	ldr	r2, [pc, #152]	@ (8006338 <xTaskRemoveFromEventList+0x1a0>)
 80062a0:	441a      	add	r2, r3
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	615a      	str	r2, [r3, #20]
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062aa:	4923      	ldr	r1, [pc, #140]	@ (8006338 <xTaskRemoveFromEventList+0x1a0>)
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	481f      	ldr	r0, [pc, #124]	@ (8006338 <xTaskRemoveFromEventList+0x1a0>)
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4403      	add	r3, r0
 80062c6:	6019      	str	r1, [r3, #0]
 80062c8:	e01b      	b.n	8006302 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062ca:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <xTaskRemoveFromEventList+0x1a4>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	61da      	str	r2, [r3, #28]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	621a      	str	r2, [r3, #32]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	3218      	adds	r2, #24
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	f103 0218 	add.w	r2, r3, #24
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	4a11      	ldr	r2, [pc, #68]	@ (800633c <xTaskRemoveFromEventList+0x1a4>)
 80062f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80062f8:	4b10      	ldr	r3, [pc, #64]	@ (800633c <xTaskRemoveFromEventList+0x1a4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4a0f      	ldr	r2, [pc, #60]	@ (800633c <xTaskRemoveFromEventList+0x1a4>)
 8006300:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006306:	4b0e      	ldr	r3, [pc, #56]	@ (8006340 <xTaskRemoveFromEventList+0x1a8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d905      	bls.n	800631c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006310:	2301      	movs	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006314:	4b0b      	ldr	r3, [pc, #44]	@ (8006344 <xTaskRemoveFromEventList+0x1ac>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e001      	b.n	8006320 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006322:	4618      	mov	r0, r3
 8006324:	372c      	adds	r7, #44	@ 0x2c
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000358 	.word	0x20000358
 8006334:	20000338 	.word	0x20000338
 8006338:	2000025c 	.word	0x2000025c
 800633c:	200002f0 	.word	0x200002f0
 8006340:	20000258 	.word	0x20000258
 8006344:	20000344 	.word	0x20000344

08006348 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006350:	4b06      	ldr	r3, [pc, #24]	@ (800636c <vTaskInternalSetTimeOutState+0x24>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006358:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <vTaskInternalSetTimeOutState+0x28>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	605a      	str	r2, [r3, #4]
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	20000348 	.word	0x20000348
 8006370:	20000334 	.word	0x20000334

08006374 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	613b      	str	r3, [r7, #16]
    }
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60fb      	str	r3, [r7, #12]
    }
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80063ba:	f001 f987 	bl	80076cc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80063be:	4b1f      	ldr	r3, [pc, #124]	@ (800643c <xTaskCheckForTimeOut+0xc8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063d6:	d102      	bne.n	80063de <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e026      	b.n	800642c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b17      	ldr	r3, [pc, #92]	@ (8006440 <xTaskCheckForTimeOut+0xcc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00a      	beq.n	8006400 <xTaskCheckForTimeOut+0x8c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d305      	bcc.n	8006400 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80063f4:	2301      	movs	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e015      	b.n	800642c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	429a      	cmp	r2, r3
 8006408:	d20b      	bcs.n	8006422 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	1ad2      	subs	r2, r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ff96 	bl	8006348 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e004      	b.n	800642c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006428:	2301      	movs	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800642c:	f001 f980 	bl	8007730 <vPortExitCritical>

    return xReturn;
 8006430:	69fb      	ldr	r3, [r7, #28]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000334 	.word	0x20000334
 8006440:	20000348 	.word	0x20000348

08006444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006448:	4b03      	ldr	r3, [pc, #12]	@ (8006458 <vTaskMissedYield+0x14>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000344 	.word	0x20000344

0800645c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006464:	f000 f852 	bl	800650c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006468:	4b06      	ldr	r3, [pc, #24]	@ (8006484 <prvIdleTask+0x28>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d9f9      	bls.n	8006464 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006470:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <prvIdleTask+0x2c>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006480:	e7f0      	b.n	8006464 <prvIdleTask+0x8>
 8006482:	bf00      	nop
 8006484:	2000025c 	.word	0x2000025c
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	e00c      	b.n	80064b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <prvInitialiseTaskLists+0x60>)
 80064a4:	4413      	add	r3, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe faec 	bl	8004a84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3301      	adds	r3, #1
 80064b0:	607b      	str	r3, [r7, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d9ef      	bls.n	8006498 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80064b8:	480d      	ldr	r0, [pc, #52]	@ (80064f0 <prvInitialiseTaskLists+0x64>)
 80064ba:	f7fe fae3 	bl	8004a84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80064be:	480d      	ldr	r0, [pc, #52]	@ (80064f4 <prvInitialiseTaskLists+0x68>)
 80064c0:	f7fe fae0 	bl	8004a84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80064c4:	480c      	ldr	r0, [pc, #48]	@ (80064f8 <prvInitialiseTaskLists+0x6c>)
 80064c6:	f7fe fadd 	bl	8004a84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80064ca:	480c      	ldr	r0, [pc, #48]	@ (80064fc <prvInitialiseTaskLists+0x70>)
 80064cc:	f7fe fada 	bl	8004a84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80064d0:	480b      	ldr	r0, [pc, #44]	@ (8006500 <prvInitialiseTaskLists+0x74>)
 80064d2:	f7fe fad7 	bl	8004a84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <prvInitialiseTaskLists+0x78>)
 80064d8:	4a05      	ldr	r2, [pc, #20]	@ (80064f0 <prvInitialiseTaskLists+0x64>)
 80064da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006508 <prvInitialiseTaskLists+0x7c>)
 80064de:	4a05      	ldr	r2, [pc, #20]	@ (80064f4 <prvInitialiseTaskLists+0x68>)
 80064e0:	601a      	str	r2, [r3, #0]
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	2000025c 	.word	0x2000025c
 80064f0:	200002c0 	.word	0x200002c0
 80064f4:	200002d4 	.word	0x200002d4
 80064f8:	200002f0 	.word	0x200002f0
 80064fc:	20000304 	.word	0x20000304
 8006500:	2000031c 	.word	0x2000031c
 8006504:	200002e8 	.word	0x200002e8
 8006508:	200002ec 	.word	0x200002ec

0800650c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006512:	e019      	b.n	8006548 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006514:	f001 f8da 	bl	80076cc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006518:	4b10      	ldr	r3, [pc, #64]	@ (800655c <prvCheckTasksWaitingTermination+0x50>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fb37 	bl	8004b98 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800652a:	4b0d      	ldr	r3, [pc, #52]	@ (8006560 <prvCheckTasksWaitingTermination+0x54>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3b01      	subs	r3, #1
 8006530:	4a0b      	ldr	r2, [pc, #44]	@ (8006560 <prvCheckTasksWaitingTermination+0x54>)
 8006532:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006534:	4b0b      	ldr	r3, [pc, #44]	@ (8006564 <prvCheckTasksWaitingTermination+0x58>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3b01      	subs	r3, #1
 800653a:	4a0a      	ldr	r2, [pc, #40]	@ (8006564 <prvCheckTasksWaitingTermination+0x58>)
 800653c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800653e:	f001 f8f7 	bl	8007730 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f810 	bl	8006568 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <prvCheckTasksWaitingTermination+0x58>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e1      	bne.n	8006514 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000304 	.word	0x20000304
 8006560:	20000330 	.word	0x20000330
 8006564:	20000318 	.word	0x20000318

08006568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fa8f 	bl	8007a98 <vPortFree>
            vPortFree( pxTCB );
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f001 fa8c 	bl	8007a98 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <prvResetNextTaskUnblockTime+0x30>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006596:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <prvResetNextTaskUnblockTime+0x34>)
 8006598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800659c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800659e:	e005      	b.n	80065ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065a0:	4b05      	ldr	r3, [pc, #20]	@ (80065b8 <prvResetNextTaskUnblockTime+0x30>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a04      	ldr	r2, [pc, #16]	@ (80065bc <prvResetNextTaskUnblockTime+0x34>)
 80065aa:	6013      	str	r3, [r2, #0]
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	200002e8 	.word	0x200002e8
 80065bc:	20000350 	.word	0x20000350

080065c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80065c6:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <xTaskGetSchedulerState+0x34>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80065ce:	2301      	movs	r3, #1
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	e008      	b.n	80065e6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d4:	4b08      	ldr	r3, [pc, #32]	@ (80065f8 <xTaskGetSchedulerState+0x38>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80065dc:	2302      	movs	r3, #2
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	e001      	b.n	80065e6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80065e2:	2300      	movs	r3, #0
 80065e4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80065e6:	687b      	ldr	r3, [r7, #4]
    }
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	2000033c 	.word	0x2000033c
 80065f8:	20000358 	.word	0x20000358

080065fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d065      	beq.n	80066de <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006612:	4b35      	ldr	r3, [pc, #212]	@ (80066e8 <xTaskPriorityDisinherit+0xec>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	d00b      	beq.n	8006634 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
    }
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60bb      	str	r3, [r7, #8]
    }
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006666:	429a      	cmp	r2, r3
 8006668:	d039      	beq.n	80066de <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d135      	bne.n	80066de <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fa8e 	bl	8004b98 <uxListRemove>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	2201      	movs	r2, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43da      	mvns	r2, r3
 800668e:	4b17      	ldr	r3, [pc, #92]	@ (80066ec <xTaskPriorityDisinherit+0xf0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4013      	ands	r3, r2
 8006694:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <xTaskPriorityDisinherit+0xf0>)
 8006696:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	f1c3 0205 	rsb	r2, r3, #5
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	2201      	movs	r2, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <xTaskPriorityDisinherit+0xf0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	4a0c      	ldr	r2, [pc, #48]	@ (80066ec <xTaskPriorityDisinherit+0xf0>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a09      	ldr	r2, [pc, #36]	@ (80066f0 <xTaskPriorityDisinherit+0xf4>)
 80066cc:	441a      	add	r2, r3
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe fa02 	bl	8004ade <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80066de:	697b      	ldr	r3, [r7, #20]
    }
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000258 	.word	0x20000258
 80066ec:	20000338 	.word	0x20000338
 80066f0:	2000025c 	.word	0x2000025c

080066f4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	613b      	str	r3, [r7, #16]
    }
 800671a:	bf00      	nop
 800671c:	bf00      	nop
 800671e:	e7fd      	b.n	800671c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006720:	f000 ffd4 	bl	80076cc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006724:	4b31      	ldr	r3, [pc, #196]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	3354      	adds	r3, #84	@ 0x54
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d022      	beq.n	800677c <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006736:	4b2d      	ldr	r3, [pc, #180]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	3214      	adds	r2, #20
 800673e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	43d2      	mvns	r2, r2
 8006746:	4011      	ands	r1, r2
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	3214      	adds	r2, #20
 800674c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006750:	4b26      	ldr	r3, [pc, #152]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	3354      	adds	r3, #84	@ 0x54
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006764:	2101      	movs	r1, #1
 8006766:	6a38      	ldr	r0, [r7, #32]
 8006768:	f000 faca 	bl	8006d00 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800676c:	4b20      	ldr	r3, [pc, #128]	@ (80067f0 <xTaskGenericNotifyWait+0xfc>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800677c:	f000 ffd8 	bl	8007730 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006780:	f000 ffa4 	bl	80076cc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800678a:	4b18      	ldr	r3, [pc, #96]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	3214      	adds	r2, #20
 8006792:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800679a:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	3354      	adds	r3, #84	@ 0x54
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d002      	beq.n	80067b2 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e00e      	b.n	80067d0 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80067b2:	4b0e      	ldr	r3, [pc, #56]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	3214      	adds	r2, #20
 80067ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	43d2      	mvns	r2, r2
 80067c2:	4011      	ands	r1, r2
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	3214      	adds	r2, #20
 80067c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80067d0:	4b06      	ldr	r3, [pc, #24]	@ (80067ec <xTaskGenericNotifyWait+0xf8>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	3354      	adds	r3, #84	@ 0x54
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80067de:	f000 ffa7 	bl	8007730 <vPortExitCritical>

        return xReturn;
 80067e2:	697b      	ldr	r3, [r7, #20]
    }
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000258 	.word	0x20000258
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08e      	sub	sp, #56	@ 0x38
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006802:	2301      	movs	r3, #1
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <xTaskGenericNotify+0x30>
        __asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
    }
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	e7fd      	b.n	8006820 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <xTaskGenericNotify+0x4e>
        __asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	61fb      	str	r3, [r7, #28]
    }
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8006846:	f000 ff41 	bl	80076cc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800684a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d006      	beq.n	800685e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	3214      	adds	r2, #20
 8006856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800685a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800685e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4413      	add	r3, r2
 8006864:	3354      	adds	r3, #84	@ 0x54
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800686c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4413      	add	r3, r2
 8006872:	3354      	adds	r3, #84	@ 0x54
 8006874:	2202      	movs	r2, #2
 8006876:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	2b04      	cmp	r3, #4
 800687c:	d83b      	bhi.n	80068f6 <xTaskGenericNotify+0x102>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <xTaskGenericNotify+0x90>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	08006917 	.word	0x08006917
 8006888:	08006899 	.word	0x08006899
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068cd 	.word	0x080068cd
 8006894:	080068db 	.word	0x080068db
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	3214      	adds	r2, #20
 800689e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	ea42 0103 	orr.w	r1, r2, r3
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	3214      	adds	r2, #20
 80068ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80068b2:	e033      	b.n	800691c <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	3214      	adds	r2, #20
 80068ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	3214      	adds	r2, #20
 80068c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80068ca:	e027      	b.n	800691c <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	3214      	adds	r2, #20
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80068d8:	e020      	b.n	800691c <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80068da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d006      	beq.n	80068f0 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	3214      	adds	r2, #20
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80068ee:	e015      	b.n	800691c <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80068f4:	e012      	b.n	800691c <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80068f6:	4b4d      	ldr	r3, [pc, #308]	@ (8006a2c <xTaskGenericNotify+0x238>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <xTaskGenericNotify+0x126>
        __asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61bb      	str	r3, [r7, #24]
    }
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xTaskGenericNotify+0x11e>
                    break;
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <xTaskGenericNotify+0x128>

                    break;
 800691a:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800691c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006920:	2b01      	cmp	r3, #1
 8006922:	d17c      	bne.n	8006a1e <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006930:	68d2      	ldr	r2, [r2, #12]
 8006932:	609a      	str	r2, [r3, #8]
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800693a:	6892      	ldr	r2, [r2, #8]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	3304      	adds	r3, #4
 8006946:	429a      	cmp	r2, r3
 8006948:	d103      	bne.n	8006952 <xTaskGenericNotify+0x15e>
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	615a      	str	r2, [r3, #20]
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1e5a      	subs	r2, r3, #1
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006966:	2201      	movs	r2, #1
 8006968:	409a      	lsls	r2, r3
 800696a:	4b31      	ldr	r3, [pc, #196]	@ (8006a30 <xTaskGenericNotify+0x23c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	4a2f      	ldr	r2, [pc, #188]	@ (8006a30 <xTaskGenericNotify+0x23c>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006978:	492e      	ldr	r1, [pc, #184]	@ (8006a34 <xTaskGenericNotify+0x240>)
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	3304      	adds	r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	60da      	str	r2, [r3, #12]
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699e:	3204      	adds	r2, #4
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	609a      	str	r2, [r3, #8]
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a34 <xTaskGenericNotify+0x240>)
 80069b8:	441a      	add	r2, r3
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	615a      	str	r2, [r3, #20]
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c2:	491c      	ldr	r1, [pc, #112]	@ (8006a34 <xTaskGenericNotify+0x240>)
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1c59      	adds	r1, r3, #1
 80069d2:	4818      	ldr	r0, [pc, #96]	@ (8006a34 <xTaskGenericNotify+0x240>)
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4403      	add	r3, r0
 80069de:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <xTaskGenericNotify+0x20c>
        __asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	617b      	str	r3, [r7, #20]
    }
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a04:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <xTaskGenericNotify+0x244>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d907      	bls.n	8006a1e <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <xTaskGenericNotify+0x248>)
 8006a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006a1e:	f000 fe87 	bl	8007730 <vPortExitCritical>

        return xReturn;
 8006a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006a24:	4618      	mov	r0, r3
 8006a26:	3738      	adds	r7, #56	@ 0x38
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000334 	.word	0x20000334
 8006a30:	20000338 	.word	0x20000338
 8006a34:	2000025c 	.word	0x2000025c
 8006a38:	20000258 	.word	0x20000258
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b092      	sub	sp, #72	@ 0x48
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	e7fd      	b.n	8006a8a <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a8e:	f000 ff05 	bl	800789c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 8006a96:	f3ef 8211 	mrs	r2, BASEPRI
 8006a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	623a      	str	r2, [r7, #32]
 8006aac:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006aae:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d006      	beq.n	8006ac6 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	3214      	adds	r2, #20
 8006abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4413      	add	r3, r2
 8006acc:	3354      	adds	r3, #84	@ 0x54
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4413      	add	r3, r2
 8006ada:	3354      	adds	r3, #84	@ 0x54
 8006adc:	2202      	movs	r2, #2
 8006ade:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d83b      	bhi.n	8006b5e <xTaskGenericNotifyFromISR+0x11e>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <xTaskGenericNotifyFromISR+0xac>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b7f 	.word	0x08006b7f
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b35 	.word	0x08006b35
 8006afc:	08006b43 	.word	0x08006b43
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	3214      	adds	r2, #20
 8006b06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	ea42 0103 	orr.w	r1, r2, r3
 8006b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	3214      	adds	r2, #20
 8006b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006b1a:	e033      	b.n	8006b84 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	3214      	adds	r2, #20
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	3214      	adds	r2, #20
 8006b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006b32:	e027      	b.n	8006b84 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	3214      	adds	r2, #20
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006b40:	e020      	b.n	8006b84 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d006      	beq.n	8006b58 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	3214      	adds	r2, #20
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006b56:	e015      	b.n	8006b84 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8006b5c:	e012      	b.n	8006b84 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006b5e:	4b61      	ldr	r3, [pc, #388]	@ (8006ce4 <xTaskGenericNotifyFromISR+0x2a4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	61bb      	str	r3, [r7, #24]
    }
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006b7e:	bf00      	nop
 8006b80:	e000      	b.n	8006b84 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006b82:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b84:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f040 809f 	bne.w	8006ccc <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	617b      	str	r3, [r7, #20]
    }
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bae:	4b4e      	ldr	r3, [pc, #312]	@ (8006ce8 <xTaskGenericNotifyFromISR+0x2a8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d15e      	bne.n	8006c74 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bc2:	68d2      	ldr	r2, [r2, #12]
 8006bc4:	609a      	str	r2, [r3, #8]
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bcc:	6892      	ldr	r2, [r2, #8]
 8006bce:	605a      	str	r2, [r3, #4]
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d103      	bne.n	8006be4 <xTaskGenericNotifyFromISR+0x1a4>
 8006bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be6:	2200      	movs	r2, #0
 8006be8:	615a      	str	r2, [r3, #20]
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1e5a      	subs	r2, r3, #1
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8006cec <xTaskGenericNotifyFromISR+0x2ac>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	4a3a      	ldr	r2, [pc, #232]	@ (8006cec <xTaskGenericNotifyFromISR+0x2ac>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0a:	4939      	ldr	r1, [pc, #228]	@ (8006cf0 <xTaskGenericNotifyFromISR+0x2b0>)
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	3304      	adds	r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c30:	3204      	adds	r2, #4
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c36:	1d1a      	adds	r2, r3, #4
 8006c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4a29      	ldr	r2, [pc, #164]	@ (8006cf0 <xTaskGenericNotifyFromISR+0x2b0>)
 8006c4a:	441a      	add	r2, r3
 8006c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4e:	615a      	str	r2, [r3, #20]
 8006c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c54:	4926      	ldr	r1, [pc, #152]	@ (8006cf0 <xTaskGenericNotifyFromISR+0x2b0>)
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	4822      	ldr	r0, [pc, #136]	@ (8006cf0 <xTaskGenericNotifyFromISR+0x2b0>)
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4403      	add	r3, r0
 8006c70:	6019      	str	r1, [r3, #0]
 8006c72:	e01b      	b.n	8006cac <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c74:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf4 <xTaskGenericNotifyFromISR+0x2b4>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c7e:	61da      	str	r2, [r3, #28]
 8006c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c86:	621a      	str	r2, [r3, #32]
 8006c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c8e:	3218      	adds	r2, #24
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c94:	f103 0218 	add.w	r2, r3, #24
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c9e:	4a15      	ldr	r2, [pc, #84]	@ (8006cf4 <xTaskGenericNotifyFromISR+0x2b4>)
 8006ca0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ca2:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <xTaskGenericNotifyFromISR+0x2b4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	4a12      	ldr	r2, [pc, #72]	@ (8006cf4 <xTaskGenericNotifyFromISR+0x2b4>)
 8006caa:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb0:	4b11      	ldr	r3, [pc, #68]	@ (8006cf8 <xTaskGenericNotifyFromISR+0x2b8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d908      	bls.n	8006ccc <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <xTaskGenericNotifyFromISR+0x2bc>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cce:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f383 8811 	msr	BASEPRI, r3
    }
 8006cd6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3748      	adds	r7, #72	@ 0x48
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000334 	.word	0x20000334
 8006ce8:	20000358 	.word	0x20000358
 8006cec:	20000338 	.word	0x20000338
 8006cf0:	2000025c 	.word	0x2000025c
 8006cf4:	200002f0 	.word	0x200002f0
 8006cf8:	20000258 	.word	0x20000258
 8006cfc:	20000344 	.word	0x20000344

08006d00 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006d0a:	4b36      	ldr	r3, [pc, #216]	@ (8006de4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d10:	4b35      	ldr	r3, [pc, #212]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fd ff3e 	bl	8004b98 <uxListRemove>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d22:	4b31      	ldr	r3, [pc, #196]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	2201      	movs	r2, #1
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	4b2e      	ldr	r3, [pc, #184]	@ (8006dec <prvAddCurrentTaskToDelayedList+0xec>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4013      	ands	r3, r2
 8006d36:	4a2d      	ldr	r2, [pc, #180]	@ (8006dec <prvAddCurrentTaskToDelayedList+0xec>)
 8006d38:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d40:	d124      	bne.n	8006d8c <prvAddCurrentTaskToDelayedList+0x8c>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d021      	beq.n	8006d8c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d48:	4b29      	ldr	r3, [pc, #164]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	4b26      	ldr	r3, [pc, #152]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	609a      	str	r2, [r3, #8]
 8006d56:	4b24      	ldr	r3, [pc, #144]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	6892      	ldr	r2, [r2, #8]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	4b21      	ldr	r3, [pc, #132]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	3204      	adds	r2, #4
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	609a      	str	r2, [r3, #8]
 8006d76:	4b1c      	ldr	r3, [pc, #112]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006d7c:	615a      	str	r2, [r3, #20]
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	4a1a      	ldr	r2, [pc, #104]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006d8a:	e026      	b.n	8006dda <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d94:	4b14      	ldr	r3, [pc, #80]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d209      	bcs.n	8006db8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006da4:	4b13      	ldr	r3, [pc, #76]	@ (8006df4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	4b0f      	ldr	r3, [pc, #60]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f7fd feb8 	bl	8004b26 <vListInsert>
}
 8006db6:	e010      	b.n	8006dda <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db8:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fd feae 	bl	8004b26 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006dca:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0xfc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d202      	bcs.n	8006dda <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006dd4:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0xfc>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6013      	str	r3, [r2, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000334 	.word	0x20000334
 8006de8:	20000258 	.word	0x20000258
 8006dec:	20000338 	.word	0x20000338
 8006df0:	2000031c 	.word	0x2000031c
 8006df4:	200002ec 	.word	0x200002ec
 8006df8:	200002e8 	.word	0x200002e8
 8006dfc:	20000350 	.word	0x20000350

08006e00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006e0a:	f000 faf7 	bl	80073fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006e0e:	4b12      	ldr	r3, [pc, #72]	@ (8006e58 <xTimerCreateTimerTask+0x58>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006e16:	4b11      	ldr	r3, [pc, #68]	@ (8006e5c <xTimerCreateTimerTask+0x5c>)
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006e24:	490e      	ldr	r1, [pc, #56]	@ (8006e60 <xTimerCreateTimerTask+0x60>)
 8006e26:	480f      	ldr	r0, [pc, #60]	@ (8006e64 <xTimerCreateTimerTask+0x64>)
 8006e28:	f7fe fcf2 	bl	8005810 <xTaskCreate>
 8006e2c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10b      	bne.n	8006e4c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	603b      	str	r3, [r7, #0]
    }
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006e4c:	687b      	ldr	r3, [r7, #4]
    }
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	2000038c 	.word	0x2000038c
 8006e5c:	20000390 	.word	0x20000390
 8006e60:	080093b4 	.word	0x080093b4
 8006e64:	0800705d 	.word	0x0800705d

08006e68 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006e76:	202c      	movs	r0, #44	@ 0x2c
 8006e78:	f000 fd52 	bl	8007920 <pvPortMalloc>
 8006e7c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f805 	bl	8006eaa <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006ea0:	697b      	ldr	r3, [r7, #20]
        }
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	617b      	str	r3, [r7, #20]
    }
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006ed6:	f000 fa91 	bl	80073fc <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	6a3a      	ldr	r2, [r7, #32]
 8006ef0:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd fde4 	bl	8004ac4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f08:	f043 0304 	orr.w	r3, r3, #4
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8006f14:	bf00      	nop
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	@ 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <xTimerGenericCommand+0x30>
        __asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	623b      	str	r3, [r7, #32]
    }
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	e7fd      	b.n	8006f48 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006f4c:	4b19      	ldr	r3, [pc, #100]	@ (8006fb4 <xTimerGenericCommand+0x98>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02a      	beq.n	8006faa <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b05      	cmp	r3, #5
 8006f64:	dc18      	bgt.n	8006f98 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f66:	f7ff fb2b 	bl	80065c0 <xTaskGetSchedulerState>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d109      	bne.n	8006f84 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f70:	4b10      	ldr	r3, [pc, #64]	@ (8006fb4 <xTimerGenericCommand+0x98>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	f107 0114 	add.w	r1, r7, #20
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7c:	f7fd ff3a 	bl	8004df4 <xQueueGenericSend>
 8006f80:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f82:	e012      	b.n	8006faa <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f84:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb4 <xTimerGenericCommand+0x98>)
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	f107 0114 	add.w	r1, r7, #20
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f7fd ff30 	bl	8004df4 <xQueueGenericSend>
 8006f94:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f96:	e008      	b.n	8006faa <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f98:	4b06      	ldr	r3, [pc, #24]	@ (8006fb4 <xTimerGenericCommand+0x98>)
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	f107 0114 	add.w	r1, r7, #20
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	f7fe f828 	bl	8004ff8 <xQueueGenericSendFromISR>
 8006fa8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006fac:	4618      	mov	r0, r3
 8006fae:	3728      	adds	r7, #40	@ 0x28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	2000038c 	.word	0x2000038c

08006fb8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006fc4:	e008      	b.n	8006fd8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4413      	add	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	18d1      	adds	r1, r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f8df 	bl	80071a8 <prvInsertTimerInActiveList>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1ea      	bne.n	8006fc6 <prvReloadTimer+0xe>
        }
    }
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007006:	4b14      	ldr	r3, [pc, #80]	@ (8007058 <prvProcessExpiredTimer+0x5c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fdbf 	bl	8004b98 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff ffc3 	bl	8006fb8 <prvReloadTimer>
 8007032:	e008      	b.n	8007046 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	4798      	blx	r3
    }
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000384 	.word	0x20000384

0800705c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007064:	f107 0308 	add.w	r3, r7, #8
 8007068:	4618      	mov	r0, r3
 800706a:	f000 f859 	bl	8007120 <prvGetNextExpireTime>
 800706e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	4619      	mov	r1, r3
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f805 	bl	8007084 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800707a:	f000 f8d7 	bl	800722c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800707e:	bf00      	nop
 8007080:	e7f0      	b.n	8007064 <prvTimerTask+0x8>
	...

08007084 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800708e:	f7fe fd7d 	bl	8005b8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f866 	bl	8007168 <prvSampleTimeNow>
 800709c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d130      	bne.n	8007106 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <prvProcessTimerOrBlockTask+0x3c>
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d806      	bhi.n	80070c0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80070b2:	f7fe fd79 	bl	8005ba8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070b6:	68f9      	ldr	r1, [r7, #12]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ff9f 	bl	8006ffc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80070be:	e024      	b.n	800710a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070c6:	4b13      	ldr	r3, [pc, #76]	@ (8007114 <prvProcessTimerOrBlockTask+0x90>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <prvProcessTimerOrBlockTask+0x50>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <prvProcessTimerOrBlockTask+0x52>
 80070d4:	2300      	movs	r3, #0
 80070d6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007118 <prvProcessTimerOrBlockTask+0x94>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	f7fe fb5f 	bl	80057a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80070ea:	f7fe fd5d 	bl	8005ba8 <xTaskResumeAll>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80070f4:	4b09      	ldr	r3, [pc, #36]	@ (800711c <prvProcessTimerOrBlockTask+0x98>)
 80070f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	f3bf 8f6f 	isb	sy
    }
 8007104:	e001      	b.n	800710a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007106:	f7fe fd4f 	bl	8005ba8 <xTaskResumeAll>
    }
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000388 	.word	0x20000388
 8007118:	2000038c 	.word	0x2000038c
 800711c:	e000ed04 	.word	0xe000ed04

08007120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007128:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <prvGetNextExpireTime+0x44>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <prvGetNextExpireTime+0x16>
 8007132:	2201      	movs	r2, #1
 8007134:	e000      	b.n	8007138 <prvGetNextExpireTime+0x18>
 8007136:	2200      	movs	r2, #0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007144:	4b07      	ldr	r3, [pc, #28]	@ (8007164 <prvGetNextExpireTime+0x44>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	e001      	b.n	8007154 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007154:	68fb      	ldr	r3, [r7, #12]
    }
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000384 	.word	0x20000384

08007168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007170:	f7fe fe16 	bl	8005da0 <xTaskGetTickCount>
 8007174:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007176:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <prvSampleTimeNow+0x3c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	429a      	cmp	r2, r3
 800717e:	d205      	bcs.n	800718c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007180:	f000 f916 	bl	80073b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e002      	b.n	8007192 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007192:	4a04      	ldr	r2, [pc, #16]	@ (80071a4 <prvSampleTimeNow+0x3c>)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007198:	68fb      	ldr	r3, [r7, #12]
    }
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000394 	.word	0x20000394

080071a8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d812      	bhi.n	80071f4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d302      	bcc.n	80071e2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e01b      	b.n	800721a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <prvInsertTimerInActiveList+0x7c>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7fd fc9a 	bl	8004b26 <vListInsert>
 80071f2:	e012      	b.n	800721a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d206      	bcs.n	800720a <prvInsertTimerInActiveList+0x62>
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e007      	b.n	800721a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800720a:	4b07      	ldr	r3, [pc, #28]	@ (8007228 <prvInsertTimerInActiveList+0x80>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fd fc86 	bl	8004b26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800721a:	697b      	ldr	r3, [r7, #20]
    }
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000388 	.word	0x20000388
 8007228:	20000384 	.word	0x20000384

0800722c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007232:	e0a9      	b.n	8007388 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f2c0 80a6 	blt.w	8007388 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f7fd fca3 	bl	8004b98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007252:	1d3b      	adds	r3, r7, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff ff87 	bl	8007168 <prvSampleTimeNow>
 800725a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3b01      	subs	r3, #1
 8007260:	2b08      	cmp	r3, #8
 8007262:	f200 808e 	bhi.w	8007382 <prvProcessReceivedCommands+0x156>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <prvProcessReceivedCommands+0x40>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007291 	.word	0x08007291
 8007270:	08007291 	.word	0x08007291
 8007274:	080072f9 	.word	0x080072f9
 8007278:	0800730d 	.word	0x0800730d
 800727c:	08007359 	.word	0x08007359
 8007280:	08007291 	.word	0x08007291
 8007284:	08007291 	.word	0x08007291
 8007288:	080072f9 	.word	0x080072f9
 800728c:	0800730d 	.word	0x0800730d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	18d1      	adds	r1, r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	69f8      	ldr	r0, [r7, #28]
 80072b0:	f7ff ff7a 	bl	80071a8 <prvInsertTimerInActiveList>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d065      	beq.n	8007386 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4619      	mov	r1, r3
 80072d4:	69f8      	ldr	r0, [r7, #28]
 80072d6:	f7ff fe6f 	bl	8006fb8 <prvReloadTimer>
 80072da:	e008      	b.n	80072ee <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	69f8      	ldr	r0, [r7, #28]
 80072f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80072f6:	e046      	b.n	8007386 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800730a:	e03d      	b.n	8007388 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	b2da      	uxtb	r2, r3
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	617b      	str	r3, [r7, #20]
    }
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	18d1      	adds	r1, r2, r3
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	69f8      	ldr	r0, [r7, #28]
 8007352:	f7ff ff29 	bl	80071a8 <prvInsertTimerInActiveList>
                        break;
 8007356:	e017      	b.n	8007388 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8007366:	69f8      	ldr	r0, [r7, #28]
 8007368:	f000 fb96 	bl	8007a98 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800736c:	e00c      	b.n	8007388 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	b2da      	uxtb	r2, r3
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007380:	e002      	b.n	8007388 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007382:	bf00      	nop
 8007384:	e000      	b.n	8007388 <prvProcessReceivedCommands+0x15c>
                        break;
 8007386:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007388:	4b08      	ldr	r3, [pc, #32]	@ (80073ac <prvProcessReceivedCommands+0x180>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	2200      	movs	r2, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd fee6 	bl	8005164 <xQueueReceive>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	f47f af4a 	bne.w	8007234 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000038c 	.word	0x2000038c

080073b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073b6:	e009      	b.n	80073cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073b8:	4b0e      	ldr	r3, [pc, #56]	@ (80073f4 <prvSwitchTimerLists+0x44>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80073c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80073c6:	6838      	ldr	r0, [r7, #0]
 80073c8:	f7ff fe18 	bl	8006ffc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073cc:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <prvSwitchTimerLists+0x44>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80073d6:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <prvSwitchTimerLists+0x44>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80073dc:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <prvSwitchTimerLists+0x48>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a04      	ldr	r2, [pc, #16]	@ (80073f4 <prvSwitchTimerLists+0x44>)
 80073e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80073e4:	4a04      	ldr	r2, [pc, #16]	@ (80073f8 <prvSwitchTimerLists+0x48>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6013      	str	r3, [r2, #0]
    }
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20000384 	.word	0x20000384
 80073f8:	20000388 	.word	0x20000388

080073fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007400:	f000 f964 	bl	80076cc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007404:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <prvCheckForValidListAndQueue+0x54>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d11d      	bne.n	8007448 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800740c:	4811      	ldr	r0, [pc, #68]	@ (8007454 <prvCheckForValidListAndQueue+0x58>)
 800740e:	f7fd fb39 	bl	8004a84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007412:	4811      	ldr	r0, [pc, #68]	@ (8007458 <prvCheckForValidListAndQueue+0x5c>)
 8007414:	f7fd fb36 	bl	8004a84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007418:	4b10      	ldr	r3, [pc, #64]	@ (800745c <prvCheckForValidListAndQueue+0x60>)
 800741a:	4a0e      	ldr	r2, [pc, #56]	@ (8007454 <prvCheckForValidListAndQueue+0x58>)
 800741c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800741e:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <prvCheckForValidListAndQueue+0x64>)
 8007420:	4a0d      	ldr	r2, [pc, #52]	@ (8007458 <prvCheckForValidListAndQueue+0x5c>)
 8007422:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007424:	2200      	movs	r2, #0
 8007426:	210c      	movs	r1, #12
 8007428:	200a      	movs	r0, #10
 800742a:	f7fd fc71 	bl	8004d10 <xQueueGenericCreate>
 800742e:	4603      	mov	r3, r0
 8007430:	4a07      	ldr	r2, [pc, #28]	@ (8007450 <prvCheckForValidListAndQueue+0x54>)
 8007432:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007434:	4b06      	ldr	r3, [pc, #24]	@ (8007450 <prvCheckForValidListAndQueue+0x54>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800743c:	4b04      	ldr	r3, [pc, #16]	@ (8007450 <prvCheckForValidListAndQueue+0x54>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4908      	ldr	r1, [pc, #32]	@ (8007464 <prvCheckForValidListAndQueue+0x68>)
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe f960 	bl	8005708 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007448:	f000 f972 	bl	8007730 <vPortExitCritical>
    }
 800744c:	bf00      	nop
 800744e:	bd80      	pop	{r7, pc}
 8007450:	2000038c 	.word	0x2000038c
 8007454:	2000035c 	.word	0x2000035c
 8007458:	20000370 	.word	0x20000370
 800745c:	20000384 	.word	0x20000384
 8007460:	20000388 	.word	0x20000388
 8007464:	080093bc 	.word	0x080093bc

08007468 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3b04      	subs	r3, #4
 8007478:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007480:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3b04      	subs	r3, #4
 8007486:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 0201 	bic.w	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3b04      	subs	r3, #4
 8007496:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007498:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <pxPortInitialiseStack+0x64>)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b14      	subs	r3, #20
 80074a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b04      	subs	r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f06f 0202 	mvn.w	r2, #2
 80074b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3b20      	subs	r3, #32
 80074bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	080074d1 	.word	0x080074d1

080074d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80074da:	4b13      	ldr	r3, [pc, #76]	@ (8007528 <prvTaskExitError+0x58>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e2:	d00b      	beq.n	80074fc <prvTaskExitError+0x2c>
        __asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	60fb      	str	r3, [r7, #12]
    }
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <prvTaskExitError+0x28>
        __asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	60bb      	str	r3, [r7, #8]
    }
 800750e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007510:	bf00      	nop
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0fc      	beq.n	8007512 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000030 	.word	0x20000030
 800752c:	00000000 	.word	0x00000000

08007530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007530:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <pxCurrentTCBConst2>)
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	6808      	ldr	r0, [r1, #0]
 8007536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753a:	f380 8809 	msr	PSP, r0
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8811 	msr	BASEPRI, r0
 800754a:	4770      	bx	lr
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst2>:
 8007550:	20000258 	.word	0x20000258
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007558:	4808      	ldr	r0, [pc, #32]	@ (800757c <prvPortStartFirstTask+0x24>)
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f380 8808 	msr	MSP, r0
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8814 	msr	CONTROL, r0
 800756a:	b662      	cpsie	i
 800756c:	b661      	cpsie	f
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	df00      	svc	0
 8007578:	bf00      	nop
 800757a:	0000      	.short	0x0000
 800757c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop

08007584 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <xPortStartScheduler+0x124>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a47      	ldr	r2, [pc, #284]	@ (80076ac <xPortStartScheduler+0x128>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10b      	bne.n	80075ac <xPortStartScheduler+0x28>
        __asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	613b      	str	r3, [r7, #16]
    }
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075ac:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <xPortStartScheduler+0x124>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a3f      	ldr	r2, [pc, #252]	@ (80076b0 <xPortStartScheduler+0x12c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10b      	bne.n	80075ce <xPortStartScheduler+0x4a>
        __asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60fb      	str	r3, [r7, #12]
    }
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075ce:	4b39      	ldr	r3, [pc, #228]	@ (80076b4 <xPortStartScheduler+0x130>)
 80075d0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	22ff      	movs	r2, #255	@ 0xff
 80075de:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <xPortStartScheduler+0x134>)
 80075f4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075f6:	4b31      	ldr	r3, [pc, #196]	@ (80076bc <xPortStartScheduler+0x138>)
 80075f8:	2207      	movs	r2, #7
 80075fa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075fc:	e009      	b.n	8007612 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80075fe:	4b2f      	ldr	r3, [pc, #188]	@ (80076bc <xPortStartScheduler+0x138>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3b01      	subs	r3, #1
 8007604:	4a2d      	ldr	r2, [pc, #180]	@ (80076bc <xPortStartScheduler+0x138>)
 8007606:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	b2db      	uxtb	r3, r3
 8007610:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761a:	2b80      	cmp	r3, #128	@ 0x80
 800761c:	d0ef      	beq.n	80075fe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800761e:	4b27      	ldr	r3, [pc, #156]	@ (80076bc <xPortStartScheduler+0x138>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f1c3 0307 	rsb	r3, r3, #7
 8007626:	2b04      	cmp	r3, #4
 8007628:	d00b      	beq.n	8007642 <xPortStartScheduler+0xbe>
        __asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60bb      	str	r3, [r7, #8]
    }
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007642:	4b1e      	ldr	r3, [pc, #120]	@ (80076bc <xPortStartScheduler+0x138>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	4a1c      	ldr	r2, [pc, #112]	@ (80076bc <xPortStartScheduler+0x138>)
 800764a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800764c:	4b1b      	ldr	r3, [pc, #108]	@ (80076bc <xPortStartScheduler+0x138>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007654:	4a19      	ldr	r2, [pc, #100]	@ (80076bc <xPortStartScheduler+0x138>)
 8007656:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	b2da      	uxtb	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007660:	4b17      	ldr	r3, [pc, #92]	@ (80076c0 <xPortStartScheduler+0x13c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a16      	ldr	r2, [pc, #88]	@ (80076c0 <xPortStartScheduler+0x13c>)
 8007666:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800766a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800766c:	4b14      	ldr	r3, [pc, #80]	@ (80076c0 <xPortStartScheduler+0x13c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a13      	ldr	r2, [pc, #76]	@ (80076c0 <xPortStartScheduler+0x13c>)
 8007672:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007676:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007678:	f000 f8e0 	bl	800783c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800767c:	4b11      	ldr	r3, [pc, #68]	@ (80076c4 <xPortStartScheduler+0x140>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007682:	f000 f8ff 	bl	8007884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007686:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <xPortStartScheduler+0x144>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a0f      	ldr	r2, [pc, #60]	@ (80076c8 <xPortStartScheduler+0x144>)
 800768c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007690:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007692:	f7ff ff61 	bl	8007558 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007696:	f7fe fcb7 	bl	8006008 <vTaskSwitchContext>
    prvTaskExitError();
 800769a:	f7ff ff19 	bl	80074d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	e000ed00 	.word	0xe000ed00
 80076ac:	410fc271 	.word	0x410fc271
 80076b0:	410fc270 	.word	0x410fc270
 80076b4:	e000e400 	.word	0xe000e400
 80076b8:	20000398 	.word	0x20000398
 80076bc:	2000039c 	.word	0x2000039c
 80076c0:	e000ed20 	.word	0xe000ed20
 80076c4:	20000030 	.word	0x20000030
 80076c8:	e000ef34 	.word	0xe000ef34

080076cc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
        __asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	607b      	str	r3, [r7, #4]
    }
 80076e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80076e6:	4b10      	ldr	r3, [pc, #64]	@ (8007728 <vPortEnterCritical+0x5c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007728 <vPortEnterCritical+0x5c>)
 80076ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80076f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <vPortEnterCritical+0x5c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d110      	bne.n	800771a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076f8:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <vPortEnterCritical+0x60>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <vPortEnterCritical+0x4e>
        __asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	603b      	str	r3, [r7, #0]
    }
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	e7fd      	b.n	8007716 <vPortEnterCritical+0x4a>
    }
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000030 	.word	0x20000030
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007736:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <vPortExitCritical+0x50>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10b      	bne.n	8007756 <vPortExitCritical+0x26>
        __asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
    }
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007756:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <vPortExitCritical+0x50>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3b01      	subs	r3, #1
 800775c:	4a08      	ldr	r2, [pc, #32]	@ (8007780 <vPortExitCritical+0x50>)
 800775e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007760:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <vPortExitCritical+0x50>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <vPortExitCritical+0x44>
 8007768:	2300      	movs	r3, #0
 800776a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	f383 8811 	msr	BASEPRI, r3
    }
 8007772:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20000030 	.word	0x20000030
	...

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	@ (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7fe fc22 	bl	8006008 <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	20000258 	.word	0x20000258
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
        __asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
    }
 8007810:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007812:	f7fe fae1 	bl	8005dd8 <xTaskIncrementTick>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <SysTick_Handler+0x40>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
    }
 800782e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007840:	4b0b      	ldr	r3, [pc, #44]	@ (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007846:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <vPortSetupTimerInterrupt+0x38>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <vPortSetupTimerInterrupt+0x3c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <vPortSetupTimerInterrupt+0x40>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	4a09      	ldr	r2, [pc, #36]	@ (8007880 <vPortSetupTimerInterrupt+0x44>)
 800785a:	3b01      	subs	r3, #1
 800785c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800785e:	4b04      	ldr	r3, [pc, #16]	@ (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	e000e010 	.word	0xe000e010
 8007874:	e000e018 	.word	0xe000e018
 8007878:	2000001c 	.word	0x2000001c
 800787c:	10624dd3 	.word	0x10624dd3
 8007880:	e000e014 	.word	0xe000e014

08007884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007894 <vPortEnableVFP+0x10>
 8007888:	6801      	ldr	r1, [r0, #0]
 800788a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800788e:	6001      	str	r1, [r0, #0]
 8007890:	4770      	bx	lr
 8007892:	0000      	.short	0x0000
 8007894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop

0800789c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80078a2:	f3ef 8305 	mrs	r3, IPSR
 80078a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d915      	bls.n	80078da <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ae:	4a18      	ldr	r2, [pc, #96]	@ (8007910 <vPortValidateInterruptPriority+0x74>)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078b8:	4b16      	ldr	r3, [pc, #88]	@ (8007914 <vPortValidateInterruptPriority+0x78>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	7afa      	ldrb	r2, [r7, #11]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d20b      	bcs.n	80078da <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	607b      	str	r3, [r7, #4]
    }
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078da:	4b0f      	ldr	r3, [pc, #60]	@ (8007918 <vPortValidateInterruptPriority+0x7c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80078e2:	4b0e      	ldr	r3, [pc, #56]	@ (800791c <vPortValidateInterruptPriority+0x80>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d90b      	bls.n	8007902 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	603b      	str	r3, [r7, #0]
    }
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <vPortValidateInterruptPriority+0x62>
    }
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	e000e3f0 	.word	0xe000e3f0
 8007914:	20000398 	.word	0x20000398
 8007918:	e000ed0c 	.word	0xe000ed0c
 800791c:	2000039c 	.word	0x2000039c

08007920 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	@ 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800792c:	f7fe f92e 	bl	8005b8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007930:	4b54      	ldr	r3, [pc, #336]	@ (8007a84 <pvPortMalloc+0x164>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007938:	f000 f90c 	bl	8007b54 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d012      	beq.n	8007968 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007942:	2208      	movs	r2, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	3308      	adds	r3, #8
 800794e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	43db      	mvns	r3, r3
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	429a      	cmp	r2, r3
 8007958:	d804      	bhi.n	8007964 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	4413      	add	r3, r2
 8007960:	607b      	str	r3, [r7, #4]
 8007962:	e001      	b.n	8007968 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db71      	blt.n	8007a52 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d06e      	beq.n	8007a52 <pvPortMalloc+0x132>
 8007974:	4b44      	ldr	r3, [pc, #272]	@ (8007a88 <pvPortMalloc+0x168>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d869      	bhi.n	8007a52 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800797e:	4b43      	ldr	r3, [pc, #268]	@ (8007a8c <pvPortMalloc+0x16c>)
 8007980:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007982:	4b42      	ldr	r3, [pc, #264]	@ (8007a8c <pvPortMalloc+0x16c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007988:	e004      	b.n	8007994 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d903      	bls.n	80079a6 <pvPortMalloc+0x86>
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f1      	bne.n	800798a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80079a6:	4b37      	ldr	r3, [pc, #220]	@ (8007a84 <pvPortMalloc+0x164>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d050      	beq.n	8007a52 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4413      	add	r3, r2
 80079b8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	2308      	movs	r3, #8
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d920      	bls.n	8007a14 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <pvPortMalloc+0xdc>
        __asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	613b      	str	r3, [r7, #16]
    }
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	e7fd      	b.n	80079f8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a0e:	6978      	ldr	r0, [r7, #20]
 8007a10:	f000 f8fc 	bl	8007c0c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a14:	4b1c      	ldr	r3, [pc, #112]	@ (8007a88 <pvPortMalloc+0x168>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007a88 <pvPortMalloc+0x168>)
 8007a20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a22:	4b19      	ldr	r3, [pc, #100]	@ (8007a88 <pvPortMalloc+0x168>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b1a      	ldr	r3, [pc, #104]	@ (8007a90 <pvPortMalloc+0x170>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d203      	bcs.n	8007a36 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a2e:	4b16      	ldr	r3, [pc, #88]	@ (8007a88 <pvPortMalloc+0x168>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a17      	ldr	r2, [pc, #92]	@ (8007a90 <pvPortMalloc+0x170>)
 8007a34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007a48:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <pvPortMalloc+0x174>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a11      	ldr	r2, [pc, #68]	@ (8007a94 <pvPortMalloc+0x174>)
 8007a50:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007a52:	f7fe f8a9 	bl	8005ba8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <pvPortMalloc+0x158>
        __asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
    }
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <pvPortMalloc+0x154>
    return pvReturn;
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3728      	adds	r7, #40	@ 0x28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20012fa8 	.word	0x20012fa8
 8007a88:	20012fac 	.word	0x20012fac
 8007a8c:	20012fa0 	.word	0x20012fa0
 8007a90:	20012fb0 	.word	0x20012fb0
 8007a94:	20012fb4 	.word	0x20012fb4

08007a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d04b      	beq.n	8007b42 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007aaa:	2308      	movs	r3, #8
 8007aac:	425b      	negs	r3, r3
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db0b      	blt.n	8007ad8 <vPortFree+0x40>
        __asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
    }
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <vPortFree+0x60>
        __asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60bb      	str	r3, [r7, #8]
    }
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	0fdb      	lsrs	r3, r3, #31
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01c      	beq.n	8007b42 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d118      	bne.n	8007b42 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007b1c:	f7fe f836 	bl	8005b8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <vPortFree+0xb4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4413      	add	r3, r2
 8007b2a:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <vPortFree+0xb4>)
 8007b2c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f000 f86c 	bl	8007c0c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007b34:	4b06      	ldr	r3, [pc, #24]	@ (8007b50 <vPortFree+0xb8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	4a05      	ldr	r2, [pc, #20]	@ (8007b50 <vPortFree+0xb8>)
 8007b3c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007b3e:	f7fe f833 	bl	8005ba8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007b42:	bf00      	nop
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20012fac 	.word	0x20012fac
 8007b50:	20012fb8 	.word	0x20012fb8

08007b54 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b5a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8007b5e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007b60:	4b25      	ldr	r3, [pc, #148]	@ (8007bf8 <prvHeapInit+0xa4>)
 8007b62:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3307      	adds	r3, #7
 8007b72:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0307 	bic.w	r3, r3, #7
 8007b7a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <prvHeapInit+0xa4>)
 8007b84:	4413      	add	r3, r2
 8007b86:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bfc <prvHeapInit+0xa8>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007b92:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <prvHeapInit+0xa8>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a13      	ldr	r2, [pc, #76]	@ (8007c00 <prvHeapInit+0xac>)
 8007bb4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007bb6:	4b12      	ldr	r3, [pc, #72]	@ (8007c00 <prvHeapInit+0xac>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007bbe:	4b10      	ldr	r3, [pc, #64]	@ (8007c00 <prvHeapInit+0xac>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007c00 <prvHeapInit+0xac>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a08      	ldr	r2, [pc, #32]	@ (8007c04 <prvHeapInit+0xb0>)
 8007be2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4a07      	ldr	r2, [pc, #28]	@ (8007c08 <prvHeapInit+0xb4>)
 8007bea:	6013      	str	r3, [r2, #0]
}
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	200003a0 	.word	0x200003a0
 8007bfc:	20012fa0 	.word	0x20012fa0
 8007c00:	20012fa8 	.word	0x20012fa8
 8007c04:	20012fb0 	.word	0x20012fb0
 8007c08:	20012fac 	.word	0x20012fac

08007c0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c14:	4b28      	ldr	r3, [pc, #160]	@ (8007cb8 <prvInsertBlockIntoFreeList+0xac>)
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e002      	b.n	8007c20 <prvInsertBlockIntoFreeList+0x14>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d8f7      	bhi.n	8007c1a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d108      	bne.n	8007c4e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	441a      	add	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	441a      	add	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d118      	bne.n	8007c94 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b15      	ldr	r3, [pc, #84]	@ (8007cbc <prvInsertBlockIntoFreeList+0xb0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d00d      	beq.n	8007c8a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	441a      	add	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e008      	b.n	8007c9c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <prvInsertBlockIntoFreeList+0xb0>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e003      	b.n	8007c9c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d002      	beq.n	8007caa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20012fa0 	.word	0x20012fa0
 8007cbc:	20012fa8 	.word	0x20012fa8

08007cc0 <siprintf>:
 8007cc0:	b40e      	push	{r1, r2, r3}
 8007cc2:	b500      	push	{lr}
 8007cc4:	b09c      	sub	sp, #112	@ 0x70
 8007cc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007cc8:	9002      	str	r0, [sp, #8]
 8007cca:	9006      	str	r0, [sp, #24]
 8007ccc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007cd0:	4809      	ldr	r0, [pc, #36]	@ (8007cf8 <siprintf+0x38>)
 8007cd2:	9107      	str	r1, [sp, #28]
 8007cd4:	9104      	str	r1, [sp, #16]
 8007cd6:	4909      	ldr	r1, [pc, #36]	@ (8007cfc <siprintf+0x3c>)
 8007cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	6800      	ldr	r0, [r0, #0]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	a902      	add	r1, sp, #8
 8007ce4:	f000 f920 	bl	8007f28 <_svfiprintf_r>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	b01c      	add	sp, #112	@ 0x70
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	b003      	add	sp, #12
 8007cf6:	4770      	bx	lr
 8007cf8:	20000034 	.word	0x20000034
 8007cfc:	ffff0208 	.word	0xffff0208

08007d00 <siscanf>:
 8007d00:	b40e      	push	{r1, r2, r3}
 8007d02:	b530      	push	{r4, r5, lr}
 8007d04:	b09c      	sub	sp, #112	@ 0x70
 8007d06:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007d08:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007d0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007d10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d14:	9002      	str	r0, [sp, #8]
 8007d16:	9006      	str	r0, [sp, #24]
 8007d18:	f7f8 fa62 	bl	80001e0 <strlen>
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d4c <siscanf+0x4c>)
 8007d1e:	9003      	str	r0, [sp, #12]
 8007d20:	9007      	str	r0, [sp, #28]
 8007d22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d24:	480a      	ldr	r0, [pc, #40]	@ (8007d50 <siscanf+0x50>)
 8007d26:	9401      	str	r4, [sp, #4]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d2c:	9314      	str	r3, [sp, #80]	@ 0x50
 8007d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d36:	462a      	mov	r2, r5
 8007d38:	4623      	mov	r3, r4
 8007d3a:	a902      	add	r1, sp, #8
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f000 fa47 	bl	80081d0 <__ssvfiscanf_r>
 8007d42:	b01c      	add	sp, #112	@ 0x70
 8007d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d48:	b003      	add	sp, #12
 8007d4a:	4770      	bx	lr
 8007d4c:	08007d55 	.word	0x08007d55
 8007d50:	20000034 	.word	0x20000034

08007d54 <__seofread>:
 8007d54:	2000      	movs	r0, #0
 8007d56:	4770      	bx	lr

08007d58 <memset>:
 8007d58:	4402      	add	r2, r0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d100      	bne.n	8007d62 <memset+0xa>
 8007d60:	4770      	bx	lr
 8007d62:	f803 1b01 	strb.w	r1, [r3], #1
 8007d66:	e7f9      	b.n	8007d5c <memset+0x4>

08007d68 <__errno>:
 8007d68:	4b01      	ldr	r3, [pc, #4]	@ (8007d70 <__errno+0x8>)
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000034 	.word	0x20000034

08007d74 <__libc_init_array>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4d0d      	ldr	r5, [pc, #52]	@ (8007dac <__libc_init_array+0x38>)
 8007d78:	4c0d      	ldr	r4, [pc, #52]	@ (8007db0 <__libc_init_array+0x3c>)
 8007d7a:	1b64      	subs	r4, r4, r5
 8007d7c:	10a4      	asrs	r4, r4, #2
 8007d7e:	2600      	movs	r6, #0
 8007d80:	42a6      	cmp	r6, r4
 8007d82:	d109      	bne.n	8007d98 <__libc_init_array+0x24>
 8007d84:	4d0b      	ldr	r5, [pc, #44]	@ (8007db4 <__libc_init_array+0x40>)
 8007d86:	4c0c      	ldr	r4, [pc, #48]	@ (8007db8 <__libc_init_array+0x44>)
 8007d88:	f001 f8e0 	bl	8008f4c <_init>
 8007d8c:	1b64      	subs	r4, r4, r5
 8007d8e:	10a4      	asrs	r4, r4, #2
 8007d90:	2600      	movs	r6, #0
 8007d92:	42a6      	cmp	r6, r4
 8007d94:	d105      	bne.n	8007da2 <__libc_init_array+0x2e>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9c:	4798      	blx	r3
 8007d9e:	3601      	adds	r6, #1
 8007da0:	e7ee      	b.n	8007d80 <__libc_init_array+0xc>
 8007da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da6:	4798      	blx	r3
 8007da8:	3601      	adds	r6, #1
 8007daa:	e7f2      	b.n	8007d92 <__libc_init_array+0x1e>
 8007dac:	08009540 	.word	0x08009540
 8007db0:	08009540 	.word	0x08009540
 8007db4:	08009540 	.word	0x08009540
 8007db8:	08009544 	.word	0x08009544

08007dbc <__retarget_lock_acquire_recursive>:
 8007dbc:	4770      	bx	lr

08007dbe <__retarget_lock_release_recursive>:
 8007dbe:	4770      	bx	lr

08007dc0 <memcpy>:
 8007dc0:	440a      	add	r2, r1
 8007dc2:	4291      	cmp	r1, r2
 8007dc4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007dc8:	d100      	bne.n	8007dcc <memcpy+0xc>
 8007dca:	4770      	bx	lr
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd6:	4291      	cmp	r1, r2
 8007dd8:	d1f9      	bne.n	8007dce <memcpy+0xe>
 8007dda:	bd10      	pop	{r4, pc}

08007ddc <_free_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4605      	mov	r5, r0
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d041      	beq.n	8007e68 <_free_r+0x8c>
 8007de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de8:	1f0c      	subs	r4, r1, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfb8      	it	lt
 8007dee:	18e4      	addlt	r4, r4, r3
 8007df0:	f000 ff1a 	bl	8008c28 <__malloc_lock>
 8007df4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e6c <_free_r+0x90>)
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	b933      	cbnz	r3, 8007e08 <_free_r+0x2c>
 8007dfa:	6063      	str	r3, [r4, #4]
 8007dfc:	6014      	str	r4, [r2, #0]
 8007dfe:	4628      	mov	r0, r5
 8007e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e04:	f000 bf16 	b.w	8008c34 <__malloc_unlock>
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d908      	bls.n	8007e1e <_free_r+0x42>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	1821      	adds	r1, r4, r0
 8007e10:	428b      	cmp	r3, r1
 8007e12:	bf01      	itttt	eq
 8007e14:	6819      	ldreq	r1, [r3, #0]
 8007e16:	685b      	ldreq	r3, [r3, #4]
 8007e18:	1809      	addeq	r1, r1, r0
 8007e1a:	6021      	streq	r1, [r4, #0]
 8007e1c:	e7ed      	b.n	8007dfa <_free_r+0x1e>
 8007e1e:	461a      	mov	r2, r3
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	b10b      	cbz	r3, 8007e28 <_free_r+0x4c>
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	d9fa      	bls.n	8007e1e <_free_r+0x42>
 8007e28:	6811      	ldr	r1, [r2, #0]
 8007e2a:	1850      	adds	r0, r2, r1
 8007e2c:	42a0      	cmp	r0, r4
 8007e2e:	d10b      	bne.n	8007e48 <_free_r+0x6c>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	4401      	add	r1, r0
 8007e34:	1850      	adds	r0, r2, r1
 8007e36:	4283      	cmp	r3, r0
 8007e38:	6011      	str	r1, [r2, #0]
 8007e3a:	d1e0      	bne.n	8007dfe <_free_r+0x22>
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	6053      	str	r3, [r2, #4]
 8007e42:	4408      	add	r0, r1
 8007e44:	6010      	str	r0, [r2, #0]
 8007e46:	e7da      	b.n	8007dfe <_free_r+0x22>
 8007e48:	d902      	bls.n	8007e50 <_free_r+0x74>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	e7d6      	b.n	8007dfe <_free_r+0x22>
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	1821      	adds	r1, r4, r0
 8007e54:	428b      	cmp	r3, r1
 8007e56:	bf04      	itt	eq
 8007e58:	6819      	ldreq	r1, [r3, #0]
 8007e5a:	685b      	ldreq	r3, [r3, #4]
 8007e5c:	6063      	str	r3, [r4, #4]
 8007e5e:	bf04      	itt	eq
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	6054      	str	r4, [r2, #4]
 8007e66:	e7ca      	b.n	8007dfe <_free_r+0x22>
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20013100 	.word	0x20013100

08007e70 <__ssputs_r>:
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	688e      	ldr	r6, [r1, #8]
 8007e76:	461f      	mov	r7, r3
 8007e78:	42be      	cmp	r6, r7
 8007e7a:	680b      	ldr	r3, [r1, #0]
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	4690      	mov	r8, r2
 8007e82:	d82d      	bhi.n	8007ee0 <__ssputs_r+0x70>
 8007e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e8c:	d026      	beq.n	8007edc <__ssputs_r+0x6c>
 8007e8e:	6965      	ldr	r5, [r4, #20]
 8007e90:	6909      	ldr	r1, [r1, #16]
 8007e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e96:	eba3 0901 	sub.w	r9, r3, r1
 8007e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e9e:	1c7b      	adds	r3, r7, #1
 8007ea0:	444b      	add	r3, r9
 8007ea2:	106d      	asrs	r5, r5, #1
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	bf38      	it	cc
 8007ea8:	461d      	movcc	r5, r3
 8007eaa:	0553      	lsls	r3, r2, #21
 8007eac:	d527      	bpl.n	8007efe <__ssputs_r+0x8e>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f000 fb24 	bl	80084fc <_malloc_r>
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	b360      	cbz	r0, 8007f12 <__ssputs_r+0xa2>
 8007eb8:	6921      	ldr	r1, [r4, #16]
 8007eba:	464a      	mov	r2, r9
 8007ebc:	f7ff ff80 	bl	8007dc0 <memcpy>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	6126      	str	r6, [r4, #16]
 8007ece:	6165      	str	r5, [r4, #20]
 8007ed0:	444e      	add	r6, r9
 8007ed2:	eba5 0509 	sub.w	r5, r5, r9
 8007ed6:	6026      	str	r6, [r4, #0]
 8007ed8:	60a5      	str	r5, [r4, #8]
 8007eda:	463e      	mov	r6, r7
 8007edc:	42be      	cmp	r6, r7
 8007ede:	d900      	bls.n	8007ee2 <__ssputs_r+0x72>
 8007ee0:	463e      	mov	r6, r7
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	4641      	mov	r1, r8
 8007ee8:	f000 fffe 	bl	8008ee8 <memmove>
 8007eec:	68a3      	ldr	r3, [r4, #8]
 8007eee:	1b9b      	subs	r3, r3, r6
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	4433      	add	r3, r6
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efe:	462a      	mov	r2, r5
 8007f00:	f000 fed8 	bl	8008cb4 <_realloc_r>
 8007f04:	4606      	mov	r6, r0
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d1e0      	bne.n	8007ecc <__ssputs_r+0x5c>
 8007f0a:	6921      	ldr	r1, [r4, #16]
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	f7ff ff65 	bl	8007ddc <_free_r>
 8007f12:	230c      	movs	r3, #12
 8007f14:	f8ca 3000 	str.w	r3, [sl]
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f24:	e7e9      	b.n	8007efa <__ssputs_r+0x8a>
	...

08007f28 <_svfiprintf_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	898b      	ldrh	r3, [r1, #12]
 8007f30:	061b      	lsls	r3, r3, #24
 8007f32:	b09d      	sub	sp, #116	@ 0x74
 8007f34:	4607      	mov	r7, r0
 8007f36:	460d      	mov	r5, r1
 8007f38:	4614      	mov	r4, r2
 8007f3a:	d510      	bpl.n	8007f5e <_svfiprintf_r+0x36>
 8007f3c:	690b      	ldr	r3, [r1, #16]
 8007f3e:	b973      	cbnz	r3, 8007f5e <_svfiprintf_r+0x36>
 8007f40:	2140      	movs	r1, #64	@ 0x40
 8007f42:	f000 fadb 	bl	80084fc <_malloc_r>
 8007f46:	6028      	str	r0, [r5, #0]
 8007f48:	6128      	str	r0, [r5, #16]
 8007f4a:	b930      	cbnz	r0, 8007f5a <_svfiprintf_r+0x32>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f54:	b01d      	add	sp, #116	@ 0x74
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	2340      	movs	r3, #64	@ 0x40
 8007f5c:	616b      	str	r3, [r5, #20]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f62:	2320      	movs	r3, #32
 8007f64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f6c:	2330      	movs	r3, #48	@ 0x30
 8007f6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800810c <_svfiprintf_r+0x1e4>
 8007f72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f76:	f04f 0901 	mov.w	r9, #1
 8007f7a:	4623      	mov	r3, r4
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f82:	b10a      	cbz	r2, 8007f88 <_svfiprintf_r+0x60>
 8007f84:	2a25      	cmp	r2, #37	@ 0x25
 8007f86:	d1f9      	bne.n	8007f7c <_svfiprintf_r+0x54>
 8007f88:	ebba 0b04 	subs.w	fp, sl, r4
 8007f8c:	d00b      	beq.n	8007fa6 <_svfiprintf_r+0x7e>
 8007f8e:	465b      	mov	r3, fp
 8007f90:	4622      	mov	r2, r4
 8007f92:	4629      	mov	r1, r5
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff ff6b 	bl	8007e70 <__ssputs_r>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f000 80a7 	beq.w	80080ee <_svfiprintf_r+0x1c6>
 8007fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fa2:	445a      	add	r2, fp
 8007fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 809f 	beq.w	80080ee <_svfiprintf_r+0x1c6>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fba:	f10a 0a01 	add.w	sl, sl, #1
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2205      	movs	r2, #5
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	484e      	ldr	r0, [pc, #312]	@ (800810c <_svfiprintf_r+0x1e4>)
 8007fd2:	f7f8 f91d 	bl	8000210 <memchr>
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_svfiprintf_r+0xea>
 8007fda:	06d0      	lsls	r0, r2, #27
 8007fdc:	bf44      	itt	mi
 8007fde:	2320      	movmi	r3, #32
 8007fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fe4:	0711      	lsls	r1, r2, #28
 8007fe6:	bf44      	itt	mi
 8007fe8:	232b      	movmi	r3, #43	@ 0x2b
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ff4:	d015      	beq.n	8008022 <_svfiprintf_r+0xfa>
 8007ff6:	9a07      	ldr	r2, [sp, #28]
 8007ff8:	4654      	mov	r4, sl
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f04f 0c0a 	mov.w	ip, #10
 8008000:	4621      	mov	r1, r4
 8008002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008006:	3b30      	subs	r3, #48	@ 0x30
 8008008:	2b09      	cmp	r3, #9
 800800a:	d94b      	bls.n	80080a4 <_svfiprintf_r+0x17c>
 800800c:	b1b0      	cbz	r0, 800803c <_svfiprintf_r+0x114>
 800800e:	9207      	str	r2, [sp, #28]
 8008010:	e014      	b.n	800803c <_svfiprintf_r+0x114>
 8008012:	eba0 0308 	sub.w	r3, r0, r8
 8008016:	fa09 f303 	lsl.w	r3, r9, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	46a2      	mov	sl, r4
 8008020:	e7d2      	b.n	8007fc8 <_svfiprintf_r+0xa0>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	1d19      	adds	r1, r3, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	9103      	str	r1, [sp, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfbb      	ittet	lt
 800802e:	425b      	neglt	r3, r3
 8008030:	f042 0202 	orrlt.w	r2, r2, #2
 8008034:	9307      	strge	r3, [sp, #28]
 8008036:	9307      	strlt	r3, [sp, #28]
 8008038:	bfb8      	it	lt
 800803a:	9204      	strlt	r2, [sp, #16]
 800803c:	7823      	ldrb	r3, [r4, #0]
 800803e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008040:	d10a      	bne.n	8008058 <_svfiprintf_r+0x130>
 8008042:	7863      	ldrb	r3, [r4, #1]
 8008044:	2b2a      	cmp	r3, #42	@ 0x2a
 8008046:	d132      	bne.n	80080ae <_svfiprintf_r+0x186>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	1d1a      	adds	r2, r3, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	9203      	str	r2, [sp, #12]
 8008050:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008054:	3402      	adds	r4, #2
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800811c <_svfiprintf_r+0x1f4>
 800805c:	7821      	ldrb	r1, [r4, #0]
 800805e:	2203      	movs	r2, #3
 8008060:	4650      	mov	r0, sl
 8008062:	f7f8 f8d5 	bl	8000210 <memchr>
 8008066:	b138      	cbz	r0, 8008078 <_svfiprintf_r+0x150>
 8008068:	9b04      	ldr	r3, [sp, #16]
 800806a:	eba0 000a 	sub.w	r0, r0, sl
 800806e:	2240      	movs	r2, #64	@ 0x40
 8008070:	4082      	lsls	r2, r0
 8008072:	4313      	orrs	r3, r2
 8008074:	3401      	adds	r4, #1
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	4824      	ldr	r0, [pc, #144]	@ (8008110 <_svfiprintf_r+0x1e8>)
 800807e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008082:	2206      	movs	r2, #6
 8008084:	f7f8 f8c4 	bl	8000210 <memchr>
 8008088:	2800      	cmp	r0, #0
 800808a:	d036      	beq.n	80080fa <_svfiprintf_r+0x1d2>
 800808c:	4b21      	ldr	r3, [pc, #132]	@ (8008114 <_svfiprintf_r+0x1ec>)
 800808e:	bb1b      	cbnz	r3, 80080d8 <_svfiprintf_r+0x1b0>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	3307      	adds	r3, #7
 8008094:	f023 0307 	bic.w	r3, r3, #7
 8008098:	3308      	adds	r3, #8
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809e:	4433      	add	r3, r6
 80080a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a2:	e76a      	b.n	8007f7a <_svfiprintf_r+0x52>
 80080a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a8:	460c      	mov	r4, r1
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7a8      	b.n	8008000 <_svfiprintf_r+0xd8>
 80080ae:	2300      	movs	r3, #0
 80080b0:	3401      	adds	r4, #1
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c0:	3a30      	subs	r2, #48	@ 0x30
 80080c2:	2a09      	cmp	r2, #9
 80080c4:	d903      	bls.n	80080ce <_svfiprintf_r+0x1a6>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0c6      	beq.n	8008058 <_svfiprintf_r+0x130>
 80080ca:	9105      	str	r1, [sp, #20]
 80080cc:	e7c4      	b.n	8008058 <_svfiprintf_r+0x130>
 80080ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d2:	4604      	mov	r4, r0
 80080d4:	2301      	movs	r3, #1
 80080d6:	e7f0      	b.n	80080ba <_svfiprintf_r+0x192>
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b0e      	ldr	r3, [pc, #56]	@ (8008118 <_svfiprintf_r+0x1f0>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4638      	mov	r0, r7
 80080e4:	f3af 8000 	nop.w
 80080e8:	1c42      	adds	r2, r0, #1
 80080ea:	4606      	mov	r6, r0
 80080ec:	d1d6      	bne.n	800809c <_svfiprintf_r+0x174>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	065b      	lsls	r3, r3, #25
 80080f2:	f53f af2d 	bmi.w	8007f50 <_svfiprintf_r+0x28>
 80080f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080f8:	e72c      	b.n	8007f54 <_svfiprintf_r+0x2c>
 80080fa:	ab03      	add	r3, sp, #12
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	462a      	mov	r2, r5
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <_svfiprintf_r+0x1f0>)
 8008102:	a904      	add	r1, sp, #16
 8008104:	4638      	mov	r0, r7
 8008106:	f000 fae7 	bl	80086d8 <_printf_i>
 800810a:	e7ed      	b.n	80080e8 <_svfiprintf_r+0x1c0>
 800810c:	080093e8 	.word	0x080093e8
 8008110:	080093f2 	.word	0x080093f2
 8008114:	00000000 	.word	0x00000000
 8008118:	08007e71 	.word	0x08007e71
 800811c:	080093ee 	.word	0x080093ee

08008120 <_sungetc_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	1c4b      	adds	r3, r1, #1
 8008124:	4614      	mov	r4, r2
 8008126:	d103      	bne.n	8008130 <_sungetc_r+0x10>
 8008128:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800812c:	4628      	mov	r0, r5
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	8993      	ldrh	r3, [r2, #12]
 8008132:	f023 0320 	bic.w	r3, r3, #32
 8008136:	8193      	strh	r3, [r2, #12]
 8008138:	6853      	ldr	r3, [r2, #4]
 800813a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800813c:	b2cd      	uxtb	r5, r1
 800813e:	b18a      	cbz	r2, 8008164 <_sungetc_r+0x44>
 8008140:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008142:	429a      	cmp	r2, r3
 8008144:	dd08      	ble.n	8008158 <_sungetc_r+0x38>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	6022      	str	r2, [r4, #0]
 800814c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008150:	6863      	ldr	r3, [r4, #4]
 8008152:	3301      	adds	r3, #1
 8008154:	6063      	str	r3, [r4, #4]
 8008156:	e7e9      	b.n	800812c <_sungetc_r+0xc>
 8008158:	4621      	mov	r1, r4
 800815a:	f000 fd71 	bl	8008c40 <__submore>
 800815e:	2800      	cmp	r0, #0
 8008160:	d0f1      	beq.n	8008146 <_sungetc_r+0x26>
 8008162:	e7e1      	b.n	8008128 <_sungetc_r+0x8>
 8008164:	6921      	ldr	r1, [r4, #16]
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	b141      	cbz	r1, 800817c <_sungetc_r+0x5c>
 800816a:	4291      	cmp	r1, r2
 800816c:	d206      	bcs.n	800817c <_sungetc_r+0x5c>
 800816e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008172:	42a9      	cmp	r1, r5
 8008174:	d102      	bne.n	800817c <_sungetc_r+0x5c>
 8008176:	3a01      	subs	r2, #1
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	e7ea      	b.n	8008152 <_sungetc_r+0x32>
 800817c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008184:	6363      	str	r3, [r4, #52]	@ 0x34
 8008186:	2303      	movs	r3, #3
 8008188:	63a3      	str	r3, [r4, #56]	@ 0x38
 800818a:	4623      	mov	r3, r4
 800818c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	2301      	movs	r3, #1
 8008194:	e7de      	b.n	8008154 <_sungetc_r+0x34>

08008196 <__ssrefill_r>:
 8008196:	b510      	push	{r4, lr}
 8008198:	460c      	mov	r4, r1
 800819a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800819c:	b169      	cbz	r1, 80081ba <__ssrefill_r+0x24>
 800819e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081a2:	4299      	cmp	r1, r3
 80081a4:	d001      	beq.n	80081aa <__ssrefill_r+0x14>
 80081a6:	f7ff fe19 	bl	8007ddc <_free_r>
 80081aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081ac:	6063      	str	r3, [r4, #4]
 80081ae:	2000      	movs	r0, #0
 80081b0:	6360      	str	r0, [r4, #52]	@ 0x34
 80081b2:	b113      	cbz	r3, 80081ba <__ssrefill_r+0x24>
 80081b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	bd10      	pop	{r4, pc}
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	2300      	movs	r3, #0
 80081c0:	6063      	str	r3, [r4, #4]
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0320 	orr.w	r3, r3, #32
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081ce:	e7f3      	b.n	80081b8 <__ssrefill_r+0x22>

080081d0 <__ssvfiscanf_r>:
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	460c      	mov	r4, r1
 80081d6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80081da:	2100      	movs	r1, #0
 80081dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80081e0:	49a5      	ldr	r1, [pc, #660]	@ (8008478 <__ssvfiscanf_r+0x2a8>)
 80081e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80081e4:	f10d 0804 	add.w	r8, sp, #4
 80081e8:	49a4      	ldr	r1, [pc, #656]	@ (800847c <__ssvfiscanf_r+0x2ac>)
 80081ea:	4fa5      	ldr	r7, [pc, #660]	@ (8008480 <__ssvfiscanf_r+0x2b0>)
 80081ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80081f0:	4606      	mov	r6, r0
 80081f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	7813      	ldrb	r3, [r2, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8158 	beq.w	80084ae <__ssvfiscanf_r+0x2de>
 80081fe:	5cf9      	ldrb	r1, [r7, r3]
 8008200:	f011 0108 	ands.w	r1, r1, #8
 8008204:	f102 0501 	add.w	r5, r2, #1
 8008208:	d019      	beq.n	800823e <__ssvfiscanf_r+0x6e>
 800820a:	6863      	ldr	r3, [r4, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd0f      	ble.n	8008230 <__ssvfiscanf_r+0x60>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	781a      	ldrb	r2, [r3, #0]
 8008214:	5cba      	ldrb	r2, [r7, r2]
 8008216:	0712      	lsls	r2, r2, #28
 8008218:	d401      	bmi.n	800821e <__ssvfiscanf_r+0x4e>
 800821a:	462a      	mov	r2, r5
 800821c:	e7eb      	b.n	80081f6 <__ssvfiscanf_r+0x26>
 800821e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008220:	3201      	adds	r2, #1
 8008222:	9245      	str	r2, [sp, #276]	@ 0x114
 8008224:	6862      	ldr	r2, [r4, #4]
 8008226:	3301      	adds	r3, #1
 8008228:	3a01      	subs	r2, #1
 800822a:	6062      	str	r2, [r4, #4]
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	e7ec      	b.n	800820a <__ssvfiscanf_r+0x3a>
 8008230:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008232:	4621      	mov	r1, r4
 8008234:	4630      	mov	r0, r6
 8008236:	4798      	blx	r3
 8008238:	2800      	cmp	r0, #0
 800823a:	d0e9      	beq.n	8008210 <__ssvfiscanf_r+0x40>
 800823c:	e7ed      	b.n	800821a <__ssvfiscanf_r+0x4a>
 800823e:	2b25      	cmp	r3, #37	@ 0x25
 8008240:	d012      	beq.n	8008268 <__ssvfiscanf_r+0x98>
 8008242:	4699      	mov	r9, r3
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f340 8093 	ble.w	8008372 <__ssvfiscanf_r+0x1a2>
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	7813      	ldrb	r3, [r2, #0]
 8008250:	454b      	cmp	r3, r9
 8008252:	f040 812c 	bne.w	80084ae <__ssvfiscanf_r+0x2de>
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	3b01      	subs	r3, #1
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800825e:	3201      	adds	r2, #1
 8008260:	3301      	adds	r3, #1
 8008262:	6022      	str	r2, [r4, #0]
 8008264:	9345      	str	r3, [sp, #276]	@ 0x114
 8008266:	e7d8      	b.n	800821a <__ssvfiscanf_r+0x4a>
 8008268:	9141      	str	r1, [sp, #260]	@ 0x104
 800826a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800826c:	7853      	ldrb	r3, [r2, #1]
 800826e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008270:	bf02      	ittt	eq
 8008272:	2310      	moveq	r3, #16
 8008274:	1c95      	addeq	r5, r2, #2
 8008276:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008278:	220a      	movs	r2, #10
 800827a:	46a9      	mov	r9, r5
 800827c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008280:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008284:	2b09      	cmp	r3, #9
 8008286:	d91e      	bls.n	80082c6 <__ssvfiscanf_r+0xf6>
 8008288:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008484 <__ssvfiscanf_r+0x2b4>
 800828c:	2203      	movs	r2, #3
 800828e:	4650      	mov	r0, sl
 8008290:	f7f7 ffbe 	bl	8000210 <memchr>
 8008294:	b138      	cbz	r0, 80082a6 <__ssvfiscanf_r+0xd6>
 8008296:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008298:	eba0 000a 	sub.w	r0, r0, sl
 800829c:	2301      	movs	r3, #1
 800829e:	4083      	lsls	r3, r0
 80082a0:	4313      	orrs	r3, r2
 80082a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80082a4:	464d      	mov	r5, r9
 80082a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082aa:	2b78      	cmp	r3, #120	@ 0x78
 80082ac:	d806      	bhi.n	80082bc <__ssvfiscanf_r+0xec>
 80082ae:	2b57      	cmp	r3, #87	@ 0x57
 80082b0:	d810      	bhi.n	80082d4 <__ssvfiscanf_r+0x104>
 80082b2:	2b25      	cmp	r3, #37	@ 0x25
 80082b4:	d0c5      	beq.n	8008242 <__ssvfiscanf_r+0x72>
 80082b6:	d857      	bhi.n	8008368 <__ssvfiscanf_r+0x198>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d065      	beq.n	8008388 <__ssvfiscanf_r+0x1b8>
 80082bc:	2303      	movs	r3, #3
 80082be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80082c0:	230a      	movs	r3, #10
 80082c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80082c4:	e078      	b.n	80083b8 <__ssvfiscanf_r+0x1e8>
 80082c6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80082c8:	fb02 1103 	mla	r1, r2, r3, r1
 80082cc:	3930      	subs	r1, #48	@ 0x30
 80082ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 80082d0:	464d      	mov	r5, r9
 80082d2:	e7d2      	b.n	800827a <__ssvfiscanf_r+0xaa>
 80082d4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80082d8:	2a20      	cmp	r2, #32
 80082da:	d8ef      	bhi.n	80082bc <__ssvfiscanf_r+0xec>
 80082dc:	a101      	add	r1, pc, #4	@ (adr r1, 80082e4 <__ssvfiscanf_r+0x114>)
 80082de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	08008397 	.word	0x08008397
 80082e8:	080082bd 	.word	0x080082bd
 80082ec:	080082bd 	.word	0x080082bd
 80082f0:	080083f1 	.word	0x080083f1
 80082f4:	080082bd 	.word	0x080082bd
 80082f8:	080082bd 	.word	0x080082bd
 80082fc:	080082bd 	.word	0x080082bd
 8008300:	080082bd 	.word	0x080082bd
 8008304:	080082bd 	.word	0x080082bd
 8008308:	080082bd 	.word	0x080082bd
 800830c:	080082bd 	.word	0x080082bd
 8008310:	08008407 	.word	0x08008407
 8008314:	080083ed 	.word	0x080083ed
 8008318:	0800836f 	.word	0x0800836f
 800831c:	0800836f 	.word	0x0800836f
 8008320:	0800836f 	.word	0x0800836f
 8008324:	080082bd 	.word	0x080082bd
 8008328:	080083a9 	.word	0x080083a9
 800832c:	080082bd 	.word	0x080082bd
 8008330:	080082bd 	.word	0x080082bd
 8008334:	080082bd 	.word	0x080082bd
 8008338:	080082bd 	.word	0x080082bd
 800833c:	08008417 	.word	0x08008417
 8008340:	080083b1 	.word	0x080083b1
 8008344:	0800838f 	.word	0x0800838f
 8008348:	080082bd 	.word	0x080082bd
 800834c:	080082bd 	.word	0x080082bd
 8008350:	08008413 	.word	0x08008413
 8008354:	080082bd 	.word	0x080082bd
 8008358:	080083ed 	.word	0x080083ed
 800835c:	080082bd 	.word	0x080082bd
 8008360:	080082bd 	.word	0x080082bd
 8008364:	08008397 	.word	0x08008397
 8008368:	3b45      	subs	r3, #69	@ 0x45
 800836a:	2b02      	cmp	r3, #2
 800836c:	d8a6      	bhi.n	80082bc <__ssvfiscanf_r+0xec>
 800836e:	2305      	movs	r3, #5
 8008370:	e021      	b.n	80083b6 <__ssvfiscanf_r+0x1e6>
 8008372:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008374:	4621      	mov	r1, r4
 8008376:	4630      	mov	r0, r6
 8008378:	4798      	blx	r3
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f af66 	beq.w	800824c <__ssvfiscanf_r+0x7c>
 8008380:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008382:	2800      	cmp	r0, #0
 8008384:	f040 808b 	bne.w	800849e <__ssvfiscanf_r+0x2ce>
 8008388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800838c:	e08b      	b.n	80084a6 <__ssvfiscanf_r+0x2d6>
 800838e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008390:	f042 0220 	orr.w	r2, r2, #32
 8008394:	9241      	str	r2, [sp, #260]	@ 0x104
 8008396:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800839c:	9241      	str	r2, [sp, #260]	@ 0x104
 800839e:	2210      	movs	r2, #16
 80083a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80083a2:	9242      	str	r2, [sp, #264]	@ 0x108
 80083a4:	d902      	bls.n	80083ac <__ssvfiscanf_r+0x1dc>
 80083a6:	e005      	b.n	80083b4 <__ssvfiscanf_r+0x1e4>
 80083a8:	2300      	movs	r3, #0
 80083aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80083ac:	2303      	movs	r3, #3
 80083ae:	e002      	b.n	80083b6 <__ssvfiscanf_r+0x1e6>
 80083b0:	2308      	movs	r3, #8
 80083b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80083b4:	2304      	movs	r3, #4
 80083b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dd39      	ble.n	8008432 <__ssvfiscanf_r+0x262>
 80083be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80083c0:	0659      	lsls	r1, r3, #25
 80083c2:	d404      	bmi.n	80083ce <__ssvfiscanf_r+0x1fe>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	5cba      	ldrb	r2, [r7, r2]
 80083ca:	0712      	lsls	r2, r2, #28
 80083cc:	d438      	bmi.n	8008440 <__ssvfiscanf_r+0x270>
 80083ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	dc47      	bgt.n	8008464 <__ssvfiscanf_r+0x294>
 80083d4:	466b      	mov	r3, sp
 80083d6:	4622      	mov	r2, r4
 80083d8:	a941      	add	r1, sp, #260	@ 0x104
 80083da:	4630      	mov	r0, r6
 80083dc:	f000 fa9c 	bl	8008918 <_scanf_chars>
 80083e0:	2801      	cmp	r0, #1
 80083e2:	d064      	beq.n	80084ae <__ssvfiscanf_r+0x2de>
 80083e4:	2802      	cmp	r0, #2
 80083e6:	f47f af18 	bne.w	800821a <__ssvfiscanf_r+0x4a>
 80083ea:	e7c9      	b.n	8008380 <__ssvfiscanf_r+0x1b0>
 80083ec:	220a      	movs	r2, #10
 80083ee:	e7d7      	b.n	80083a0 <__ssvfiscanf_r+0x1d0>
 80083f0:	4629      	mov	r1, r5
 80083f2:	4640      	mov	r0, r8
 80083f4:	f000 fbde 	bl	8008bb4 <__sccl>
 80083f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80083fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8008400:	4605      	mov	r5, r0
 8008402:	2301      	movs	r3, #1
 8008404:	e7d7      	b.n	80083b6 <__ssvfiscanf_r+0x1e6>
 8008406:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840c:	9341      	str	r3, [sp, #260]	@ 0x104
 800840e:	2300      	movs	r3, #0
 8008410:	e7d1      	b.n	80083b6 <__ssvfiscanf_r+0x1e6>
 8008412:	2302      	movs	r3, #2
 8008414:	e7cf      	b.n	80083b6 <__ssvfiscanf_r+0x1e6>
 8008416:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008418:	06c3      	lsls	r3, r0, #27
 800841a:	f53f aefe 	bmi.w	800821a <__ssvfiscanf_r+0x4a>
 800841e:	9b00      	ldr	r3, [sp, #0]
 8008420:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008422:	1d19      	adds	r1, r3, #4
 8008424:	9100      	str	r1, [sp, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	07c0      	lsls	r0, r0, #31
 800842a:	bf4c      	ite	mi
 800842c:	801a      	strhmi	r2, [r3, #0]
 800842e:	601a      	strpl	r2, [r3, #0]
 8008430:	e6f3      	b.n	800821a <__ssvfiscanf_r+0x4a>
 8008432:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008434:	4621      	mov	r1, r4
 8008436:	4630      	mov	r0, r6
 8008438:	4798      	blx	r3
 800843a:	2800      	cmp	r0, #0
 800843c:	d0bf      	beq.n	80083be <__ssvfiscanf_r+0x1ee>
 800843e:	e79f      	b.n	8008380 <__ssvfiscanf_r+0x1b0>
 8008440:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008442:	3201      	adds	r2, #1
 8008444:	9245      	str	r2, [sp, #276]	@ 0x114
 8008446:	6862      	ldr	r2, [r4, #4]
 8008448:	3a01      	subs	r2, #1
 800844a:	2a00      	cmp	r2, #0
 800844c:	6062      	str	r2, [r4, #4]
 800844e:	dd02      	ble.n	8008456 <__ssvfiscanf_r+0x286>
 8008450:	3301      	adds	r3, #1
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	e7b6      	b.n	80083c4 <__ssvfiscanf_r+0x1f4>
 8008456:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008458:	4621      	mov	r1, r4
 800845a:	4630      	mov	r0, r6
 800845c:	4798      	blx	r3
 800845e:	2800      	cmp	r0, #0
 8008460:	d0b0      	beq.n	80083c4 <__ssvfiscanf_r+0x1f4>
 8008462:	e78d      	b.n	8008380 <__ssvfiscanf_r+0x1b0>
 8008464:	2b04      	cmp	r3, #4
 8008466:	dc0f      	bgt.n	8008488 <__ssvfiscanf_r+0x2b8>
 8008468:	466b      	mov	r3, sp
 800846a:	4622      	mov	r2, r4
 800846c:	a941      	add	r1, sp, #260	@ 0x104
 800846e:	4630      	mov	r0, r6
 8008470:	f000 faac 	bl	80089cc <_scanf_i>
 8008474:	e7b4      	b.n	80083e0 <__ssvfiscanf_r+0x210>
 8008476:	bf00      	nop
 8008478:	08008121 	.word	0x08008121
 800847c:	08008197 	.word	0x08008197
 8008480:	08009437 	.word	0x08009437
 8008484:	080093ee 	.word	0x080093ee
 8008488:	4b0a      	ldr	r3, [pc, #40]	@ (80084b4 <__ssvfiscanf_r+0x2e4>)
 800848a:	2b00      	cmp	r3, #0
 800848c:	f43f aec5 	beq.w	800821a <__ssvfiscanf_r+0x4a>
 8008490:	466b      	mov	r3, sp
 8008492:	4622      	mov	r2, r4
 8008494:	a941      	add	r1, sp, #260	@ 0x104
 8008496:	4630      	mov	r0, r6
 8008498:	f3af 8000 	nop.w
 800849c:	e7a0      	b.n	80083e0 <__ssvfiscanf_r+0x210>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	065b      	lsls	r3, r3, #25
 80084a2:	f53f af71 	bmi.w	8008388 <__ssvfiscanf_r+0x1b8>
 80084a6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80084b0:	e7f9      	b.n	80084a6 <__ssvfiscanf_r+0x2d6>
 80084b2:	bf00      	nop
 80084b4:	00000000 	.word	0x00000000

080084b8 <sbrk_aligned>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4e0f      	ldr	r6, [pc, #60]	@ (80084f8 <sbrk_aligned+0x40>)
 80084bc:	460c      	mov	r4, r1
 80084be:	6831      	ldr	r1, [r6, #0]
 80084c0:	4605      	mov	r5, r0
 80084c2:	b911      	cbnz	r1, 80084ca <sbrk_aligned+0x12>
 80084c4:	f000 fd2a 	bl	8008f1c <_sbrk_r>
 80084c8:	6030      	str	r0, [r6, #0]
 80084ca:	4621      	mov	r1, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 fd25 	bl	8008f1c <_sbrk_r>
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	d103      	bne.n	80084de <sbrk_aligned+0x26>
 80084d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80084da:	4620      	mov	r0, r4
 80084dc:	bd70      	pop	{r4, r5, r6, pc}
 80084de:	1cc4      	adds	r4, r0, #3
 80084e0:	f024 0403 	bic.w	r4, r4, #3
 80084e4:	42a0      	cmp	r0, r4
 80084e6:	d0f8      	beq.n	80084da <sbrk_aligned+0x22>
 80084e8:	1a21      	subs	r1, r4, r0
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 fd16 	bl	8008f1c <_sbrk_r>
 80084f0:	3001      	adds	r0, #1
 80084f2:	d1f2      	bne.n	80084da <sbrk_aligned+0x22>
 80084f4:	e7ef      	b.n	80084d6 <sbrk_aligned+0x1e>
 80084f6:	bf00      	nop
 80084f8:	200130fc 	.word	0x200130fc

080084fc <_malloc_r>:
 80084fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008500:	1ccd      	adds	r5, r1, #3
 8008502:	f025 0503 	bic.w	r5, r5, #3
 8008506:	3508      	adds	r5, #8
 8008508:	2d0c      	cmp	r5, #12
 800850a:	bf38      	it	cc
 800850c:	250c      	movcc	r5, #12
 800850e:	2d00      	cmp	r5, #0
 8008510:	4606      	mov	r6, r0
 8008512:	db01      	blt.n	8008518 <_malloc_r+0x1c>
 8008514:	42a9      	cmp	r1, r5
 8008516:	d904      	bls.n	8008522 <_malloc_r+0x26>
 8008518:	230c      	movs	r3, #12
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	2000      	movs	r0, #0
 800851e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085f8 <_malloc_r+0xfc>
 8008526:	f000 fb7f 	bl	8008c28 <__malloc_lock>
 800852a:	f8d8 3000 	ldr.w	r3, [r8]
 800852e:	461c      	mov	r4, r3
 8008530:	bb44      	cbnz	r4, 8008584 <_malloc_r+0x88>
 8008532:	4629      	mov	r1, r5
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff ffbf 	bl	80084b8 <sbrk_aligned>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	4604      	mov	r4, r0
 800853e:	d158      	bne.n	80085f2 <_malloc_r+0xf6>
 8008540:	f8d8 4000 	ldr.w	r4, [r8]
 8008544:	4627      	mov	r7, r4
 8008546:	2f00      	cmp	r7, #0
 8008548:	d143      	bne.n	80085d2 <_malloc_r+0xd6>
 800854a:	2c00      	cmp	r4, #0
 800854c:	d04b      	beq.n	80085e6 <_malloc_r+0xea>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	4639      	mov	r1, r7
 8008552:	4630      	mov	r0, r6
 8008554:	eb04 0903 	add.w	r9, r4, r3
 8008558:	f000 fce0 	bl	8008f1c <_sbrk_r>
 800855c:	4581      	cmp	r9, r0
 800855e:	d142      	bne.n	80085e6 <_malloc_r+0xea>
 8008560:	6821      	ldr	r1, [r4, #0]
 8008562:	1a6d      	subs	r5, r5, r1
 8008564:	4629      	mov	r1, r5
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff ffa6 	bl	80084b8 <sbrk_aligned>
 800856c:	3001      	adds	r0, #1
 800856e:	d03a      	beq.n	80085e6 <_malloc_r+0xea>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	442b      	add	r3, r5
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	f8d8 3000 	ldr.w	r3, [r8]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	bb62      	cbnz	r2, 80085d8 <_malloc_r+0xdc>
 800857e:	f8c8 7000 	str.w	r7, [r8]
 8008582:	e00f      	b.n	80085a4 <_malloc_r+0xa8>
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	1b52      	subs	r2, r2, r5
 8008588:	d420      	bmi.n	80085cc <_malloc_r+0xd0>
 800858a:	2a0b      	cmp	r2, #11
 800858c:	d917      	bls.n	80085be <_malloc_r+0xc2>
 800858e:	1961      	adds	r1, r4, r5
 8008590:	42a3      	cmp	r3, r4
 8008592:	6025      	str	r5, [r4, #0]
 8008594:	bf18      	it	ne
 8008596:	6059      	strne	r1, [r3, #4]
 8008598:	6863      	ldr	r3, [r4, #4]
 800859a:	bf08      	it	eq
 800859c:	f8c8 1000 	streq.w	r1, [r8]
 80085a0:	5162      	str	r2, [r4, r5]
 80085a2:	604b      	str	r3, [r1, #4]
 80085a4:	4630      	mov	r0, r6
 80085a6:	f000 fb45 	bl	8008c34 <__malloc_unlock>
 80085aa:	f104 000b 	add.w	r0, r4, #11
 80085ae:	1d23      	adds	r3, r4, #4
 80085b0:	f020 0007 	bic.w	r0, r0, #7
 80085b4:	1ac2      	subs	r2, r0, r3
 80085b6:	bf1c      	itt	ne
 80085b8:	1a1b      	subne	r3, r3, r0
 80085ba:	50a3      	strne	r3, [r4, r2]
 80085bc:	e7af      	b.n	800851e <_malloc_r+0x22>
 80085be:	6862      	ldr	r2, [r4, #4]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	bf0c      	ite	eq
 80085c4:	f8c8 2000 	streq.w	r2, [r8]
 80085c8:	605a      	strne	r2, [r3, #4]
 80085ca:	e7eb      	b.n	80085a4 <_malloc_r+0xa8>
 80085cc:	4623      	mov	r3, r4
 80085ce:	6864      	ldr	r4, [r4, #4]
 80085d0:	e7ae      	b.n	8008530 <_malloc_r+0x34>
 80085d2:	463c      	mov	r4, r7
 80085d4:	687f      	ldr	r7, [r7, #4]
 80085d6:	e7b6      	b.n	8008546 <_malloc_r+0x4a>
 80085d8:	461a      	mov	r2, r3
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	42a3      	cmp	r3, r4
 80085de:	d1fb      	bne.n	80085d8 <_malloc_r+0xdc>
 80085e0:	2300      	movs	r3, #0
 80085e2:	6053      	str	r3, [r2, #4]
 80085e4:	e7de      	b.n	80085a4 <_malloc_r+0xa8>
 80085e6:	230c      	movs	r3, #12
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 fb22 	bl	8008c34 <__malloc_unlock>
 80085f0:	e794      	b.n	800851c <_malloc_r+0x20>
 80085f2:	6005      	str	r5, [r0, #0]
 80085f4:	e7d6      	b.n	80085a4 <_malloc_r+0xa8>
 80085f6:	bf00      	nop
 80085f8:	20013100 	.word	0x20013100

080085fc <_printf_common>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	4616      	mov	r6, r2
 8008602:	4698      	mov	r8, r3
 8008604:	688a      	ldr	r2, [r1, #8]
 8008606:	690b      	ldr	r3, [r1, #16]
 8008608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800860c:	4293      	cmp	r3, r2
 800860e:	bfb8      	it	lt
 8008610:	4613      	movlt	r3, r2
 8008612:	6033      	str	r3, [r6, #0]
 8008614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008618:	4607      	mov	r7, r0
 800861a:	460c      	mov	r4, r1
 800861c:	b10a      	cbz	r2, 8008622 <_printf_common+0x26>
 800861e:	3301      	adds	r3, #1
 8008620:	6033      	str	r3, [r6, #0]
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	0699      	lsls	r1, r3, #26
 8008626:	bf42      	ittt	mi
 8008628:	6833      	ldrmi	r3, [r6, #0]
 800862a:	3302      	addmi	r3, #2
 800862c:	6033      	strmi	r3, [r6, #0]
 800862e:	6825      	ldr	r5, [r4, #0]
 8008630:	f015 0506 	ands.w	r5, r5, #6
 8008634:	d106      	bne.n	8008644 <_printf_common+0x48>
 8008636:	f104 0a19 	add.w	sl, r4, #25
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	6832      	ldr	r2, [r6, #0]
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	42ab      	cmp	r3, r5
 8008642:	dc26      	bgt.n	8008692 <_printf_common+0x96>
 8008644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	3b00      	subs	r3, #0
 800864c:	bf18      	it	ne
 800864e:	2301      	movne	r3, #1
 8008650:	0692      	lsls	r2, r2, #26
 8008652:	d42b      	bmi.n	80086ac <_printf_common+0xb0>
 8008654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008658:	4641      	mov	r1, r8
 800865a:	4638      	mov	r0, r7
 800865c:	47c8      	blx	r9
 800865e:	3001      	adds	r0, #1
 8008660:	d01e      	beq.n	80086a0 <_printf_common+0xa4>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	f003 0306 	and.w	r3, r3, #6
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf02      	ittt	eq
 800866e:	68e5      	ldreq	r5, [r4, #12]
 8008670:	6833      	ldreq	r3, [r6, #0]
 8008672:	1aed      	subeq	r5, r5, r3
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	bf0c      	ite	eq
 8008678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800867c:	2500      	movne	r5, #0
 800867e:	4293      	cmp	r3, r2
 8008680:	bfc4      	itt	gt
 8008682:	1a9b      	subgt	r3, r3, r2
 8008684:	18ed      	addgt	r5, r5, r3
 8008686:	2600      	movs	r6, #0
 8008688:	341a      	adds	r4, #26
 800868a:	42b5      	cmp	r5, r6
 800868c:	d11a      	bne.n	80086c4 <_printf_common+0xc8>
 800868e:	2000      	movs	r0, #0
 8008690:	e008      	b.n	80086a4 <_printf_common+0xa8>
 8008692:	2301      	movs	r3, #1
 8008694:	4652      	mov	r2, sl
 8008696:	4641      	mov	r1, r8
 8008698:	4638      	mov	r0, r7
 800869a:	47c8      	blx	r9
 800869c:	3001      	adds	r0, #1
 800869e:	d103      	bne.n	80086a8 <_printf_common+0xac>
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a8:	3501      	adds	r5, #1
 80086aa:	e7c6      	b.n	800863a <_printf_common+0x3e>
 80086ac:	18e1      	adds	r1, r4, r3
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	2030      	movs	r0, #48	@ 0x30
 80086b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086b6:	4422      	add	r2, r4
 80086b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086c0:	3302      	adds	r3, #2
 80086c2:	e7c7      	b.n	8008654 <_printf_common+0x58>
 80086c4:	2301      	movs	r3, #1
 80086c6:	4622      	mov	r2, r4
 80086c8:	4641      	mov	r1, r8
 80086ca:	4638      	mov	r0, r7
 80086cc:	47c8      	blx	r9
 80086ce:	3001      	adds	r0, #1
 80086d0:	d0e6      	beq.n	80086a0 <_printf_common+0xa4>
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7d9      	b.n	800868a <_printf_common+0x8e>
	...

080086d8 <_printf_i>:
 80086d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	7e0f      	ldrb	r7, [r1, #24]
 80086de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086e0:	2f78      	cmp	r7, #120	@ 0x78
 80086e2:	4691      	mov	r9, r2
 80086e4:	4680      	mov	r8, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	469a      	mov	sl, r3
 80086ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ee:	d807      	bhi.n	8008700 <_printf_i+0x28>
 80086f0:	2f62      	cmp	r7, #98	@ 0x62
 80086f2:	d80a      	bhi.n	800870a <_printf_i+0x32>
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	f000 80d2 	beq.w	800889e <_printf_i+0x1c6>
 80086fa:	2f58      	cmp	r7, #88	@ 0x58
 80086fc:	f000 80b9 	beq.w	8008872 <_printf_i+0x19a>
 8008700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008708:	e03a      	b.n	8008780 <_printf_i+0xa8>
 800870a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800870e:	2b15      	cmp	r3, #21
 8008710:	d8f6      	bhi.n	8008700 <_printf_i+0x28>
 8008712:	a101      	add	r1, pc, #4	@ (adr r1, 8008718 <_printf_i+0x40>)
 8008714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008718:	08008771 	.word	0x08008771
 800871c:	08008785 	.word	0x08008785
 8008720:	08008701 	.word	0x08008701
 8008724:	08008701 	.word	0x08008701
 8008728:	08008701 	.word	0x08008701
 800872c:	08008701 	.word	0x08008701
 8008730:	08008785 	.word	0x08008785
 8008734:	08008701 	.word	0x08008701
 8008738:	08008701 	.word	0x08008701
 800873c:	08008701 	.word	0x08008701
 8008740:	08008701 	.word	0x08008701
 8008744:	08008885 	.word	0x08008885
 8008748:	080087af 	.word	0x080087af
 800874c:	0800883f 	.word	0x0800883f
 8008750:	08008701 	.word	0x08008701
 8008754:	08008701 	.word	0x08008701
 8008758:	080088a7 	.word	0x080088a7
 800875c:	08008701 	.word	0x08008701
 8008760:	080087af 	.word	0x080087af
 8008764:	08008701 	.word	0x08008701
 8008768:	08008701 	.word	0x08008701
 800876c:	08008847 	.word	0x08008847
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	1d1a      	adds	r2, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6032      	str	r2, [r6, #0]
 8008778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800877c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008780:	2301      	movs	r3, #1
 8008782:	e09d      	b.n	80088c0 <_printf_i+0x1e8>
 8008784:	6833      	ldr	r3, [r6, #0]
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	1d19      	adds	r1, r3, #4
 800878a:	6031      	str	r1, [r6, #0]
 800878c:	0606      	lsls	r6, r0, #24
 800878e:	d501      	bpl.n	8008794 <_printf_i+0xbc>
 8008790:	681d      	ldr	r5, [r3, #0]
 8008792:	e003      	b.n	800879c <_printf_i+0xc4>
 8008794:	0645      	lsls	r5, r0, #25
 8008796:	d5fb      	bpl.n	8008790 <_printf_i+0xb8>
 8008798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800879c:	2d00      	cmp	r5, #0
 800879e:	da03      	bge.n	80087a8 <_printf_i+0xd0>
 80087a0:	232d      	movs	r3, #45	@ 0x2d
 80087a2:	426d      	negs	r5, r5
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a8:	4859      	ldr	r0, [pc, #356]	@ (8008910 <_printf_i+0x238>)
 80087aa:	230a      	movs	r3, #10
 80087ac:	e011      	b.n	80087d2 <_printf_i+0xfa>
 80087ae:	6821      	ldr	r1, [r4, #0]
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	0608      	lsls	r0, r1, #24
 80087b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80087b8:	d402      	bmi.n	80087c0 <_printf_i+0xe8>
 80087ba:	0649      	lsls	r1, r1, #25
 80087bc:	bf48      	it	mi
 80087be:	b2ad      	uxthmi	r5, r5
 80087c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80087c2:	4853      	ldr	r0, [pc, #332]	@ (8008910 <_printf_i+0x238>)
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	bf14      	ite	ne
 80087c8:	230a      	movne	r3, #10
 80087ca:	2308      	moveq	r3, #8
 80087cc:	2100      	movs	r1, #0
 80087ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087d2:	6866      	ldr	r6, [r4, #4]
 80087d4:	60a6      	str	r6, [r4, #8]
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	bfa2      	ittt	ge
 80087da:	6821      	ldrge	r1, [r4, #0]
 80087dc:	f021 0104 	bicge.w	r1, r1, #4
 80087e0:	6021      	strge	r1, [r4, #0]
 80087e2:	b90d      	cbnz	r5, 80087e8 <_printf_i+0x110>
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	d04b      	beq.n	8008880 <_printf_i+0x1a8>
 80087e8:	4616      	mov	r6, r2
 80087ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ee:	fb03 5711 	mls	r7, r3, r1, r5
 80087f2:	5dc7      	ldrb	r7, [r0, r7]
 80087f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087f8:	462f      	mov	r7, r5
 80087fa:	42bb      	cmp	r3, r7
 80087fc:	460d      	mov	r5, r1
 80087fe:	d9f4      	bls.n	80087ea <_printf_i+0x112>
 8008800:	2b08      	cmp	r3, #8
 8008802:	d10b      	bne.n	800881c <_printf_i+0x144>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	07df      	lsls	r7, r3, #31
 8008808:	d508      	bpl.n	800881c <_printf_i+0x144>
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	4299      	cmp	r1, r3
 8008810:	bfde      	ittt	le
 8008812:	2330      	movle	r3, #48	@ 0x30
 8008814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008818:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800881c:	1b92      	subs	r2, r2, r6
 800881e:	6122      	str	r2, [r4, #16]
 8008820:	f8cd a000 	str.w	sl, [sp]
 8008824:	464b      	mov	r3, r9
 8008826:	aa03      	add	r2, sp, #12
 8008828:	4621      	mov	r1, r4
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff fee6 	bl	80085fc <_printf_common>
 8008830:	3001      	adds	r0, #1
 8008832:	d14a      	bne.n	80088ca <_printf_i+0x1f2>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008838:	b004      	add	sp, #16
 800883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	4833      	ldr	r0, [pc, #204]	@ (8008914 <_printf_i+0x23c>)
 8008848:	2778      	movs	r7, #120	@ 0x78
 800884a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6831      	ldr	r1, [r6, #0]
 8008852:	061f      	lsls	r7, r3, #24
 8008854:	f851 5b04 	ldr.w	r5, [r1], #4
 8008858:	d402      	bmi.n	8008860 <_printf_i+0x188>
 800885a:	065f      	lsls	r7, r3, #25
 800885c:	bf48      	it	mi
 800885e:	b2ad      	uxthmi	r5, r5
 8008860:	6031      	str	r1, [r6, #0]
 8008862:	07d9      	lsls	r1, r3, #31
 8008864:	bf44      	itt	mi
 8008866:	f043 0320 	orrmi.w	r3, r3, #32
 800886a:	6023      	strmi	r3, [r4, #0]
 800886c:	b11d      	cbz	r5, 8008876 <_printf_i+0x19e>
 800886e:	2310      	movs	r3, #16
 8008870:	e7ac      	b.n	80087cc <_printf_i+0xf4>
 8008872:	4827      	ldr	r0, [pc, #156]	@ (8008910 <_printf_i+0x238>)
 8008874:	e7e9      	b.n	800884a <_printf_i+0x172>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f023 0320 	bic.w	r3, r3, #32
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	e7f6      	b.n	800886e <_printf_i+0x196>
 8008880:	4616      	mov	r6, r2
 8008882:	e7bd      	b.n	8008800 <_printf_i+0x128>
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	6961      	ldr	r1, [r4, #20]
 800888a:	1d18      	adds	r0, r3, #4
 800888c:	6030      	str	r0, [r6, #0]
 800888e:	062e      	lsls	r6, r5, #24
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	d501      	bpl.n	8008898 <_printf_i+0x1c0>
 8008894:	6019      	str	r1, [r3, #0]
 8008896:	e002      	b.n	800889e <_printf_i+0x1c6>
 8008898:	0668      	lsls	r0, r5, #25
 800889a:	d5fb      	bpl.n	8008894 <_printf_i+0x1bc>
 800889c:	8019      	strh	r1, [r3, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	6123      	str	r3, [r4, #16]
 80088a2:	4616      	mov	r6, r2
 80088a4:	e7bc      	b.n	8008820 <_printf_i+0x148>
 80088a6:	6833      	ldr	r3, [r6, #0]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	6032      	str	r2, [r6, #0]
 80088ac:	681e      	ldr	r6, [r3, #0]
 80088ae:	6862      	ldr	r2, [r4, #4]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7f7 fcac 	bl	8000210 <memchr>
 80088b8:	b108      	cbz	r0, 80088be <_printf_i+0x1e6>
 80088ba:	1b80      	subs	r0, r0, r6
 80088bc:	6060      	str	r0, [r4, #4]
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	2300      	movs	r3, #0
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088c8:	e7aa      	b.n	8008820 <_printf_i+0x148>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	4632      	mov	r2, r6
 80088ce:	4649      	mov	r1, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	47d0      	blx	sl
 80088d4:	3001      	adds	r0, #1
 80088d6:	d0ad      	beq.n	8008834 <_printf_i+0x15c>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	079b      	lsls	r3, r3, #30
 80088dc:	d413      	bmi.n	8008906 <_printf_i+0x22e>
 80088de:	68e0      	ldr	r0, [r4, #12]
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	4298      	cmp	r0, r3
 80088e4:	bfb8      	it	lt
 80088e6:	4618      	movlt	r0, r3
 80088e8:	e7a6      	b.n	8008838 <_printf_i+0x160>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4632      	mov	r2, r6
 80088ee:	4649      	mov	r1, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	47d0      	blx	sl
 80088f4:	3001      	adds	r0, #1
 80088f6:	d09d      	beq.n	8008834 <_printf_i+0x15c>
 80088f8:	3501      	adds	r5, #1
 80088fa:	68e3      	ldr	r3, [r4, #12]
 80088fc:	9903      	ldr	r1, [sp, #12]
 80088fe:	1a5b      	subs	r3, r3, r1
 8008900:	42ab      	cmp	r3, r5
 8008902:	dcf2      	bgt.n	80088ea <_printf_i+0x212>
 8008904:	e7eb      	b.n	80088de <_printf_i+0x206>
 8008906:	2500      	movs	r5, #0
 8008908:	f104 0619 	add.w	r6, r4, #25
 800890c:	e7f5      	b.n	80088fa <_printf_i+0x222>
 800890e:	bf00      	nop
 8008910:	080093f9 	.word	0x080093f9
 8008914:	0800940a 	.word	0x0800940a

08008918 <_scanf_chars>:
 8008918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800891c:	4615      	mov	r5, r2
 800891e:	688a      	ldr	r2, [r1, #8]
 8008920:	4680      	mov	r8, r0
 8008922:	460c      	mov	r4, r1
 8008924:	b932      	cbnz	r2, 8008934 <_scanf_chars+0x1c>
 8008926:	698a      	ldr	r2, [r1, #24]
 8008928:	2a00      	cmp	r2, #0
 800892a:	bf14      	ite	ne
 800892c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008930:	2201      	moveq	r2, #1
 8008932:	608a      	str	r2, [r1, #8]
 8008934:	6822      	ldr	r2, [r4, #0]
 8008936:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80089c8 <_scanf_chars+0xb0>
 800893a:	06d1      	lsls	r1, r2, #27
 800893c:	bf5f      	itttt	pl
 800893e:	681a      	ldrpl	r2, [r3, #0]
 8008940:	1d11      	addpl	r1, r2, #4
 8008942:	6019      	strpl	r1, [r3, #0]
 8008944:	6816      	ldrpl	r6, [r2, #0]
 8008946:	2700      	movs	r7, #0
 8008948:	69a0      	ldr	r0, [r4, #24]
 800894a:	b188      	cbz	r0, 8008970 <_scanf_chars+0x58>
 800894c:	2801      	cmp	r0, #1
 800894e:	d107      	bne.n	8008960 <_scanf_chars+0x48>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	6963      	ldr	r3, [r4, #20]
 8008956:	5c9b      	ldrb	r3, [r3, r2]
 8008958:	b953      	cbnz	r3, 8008970 <_scanf_chars+0x58>
 800895a:	2f00      	cmp	r7, #0
 800895c:	d031      	beq.n	80089c2 <_scanf_chars+0xaa>
 800895e:	e022      	b.n	80089a6 <_scanf_chars+0x8e>
 8008960:	2802      	cmp	r0, #2
 8008962:	d120      	bne.n	80089a6 <_scanf_chars+0x8e>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	f819 3003 	ldrb.w	r3, [r9, r3]
 800896c:	071b      	lsls	r3, r3, #28
 800896e:	d41a      	bmi.n	80089a6 <_scanf_chars+0x8e>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	06da      	lsls	r2, r3, #27
 8008974:	bf5e      	ittt	pl
 8008976:	682b      	ldrpl	r3, [r5, #0]
 8008978:	781b      	ldrbpl	r3, [r3, #0]
 800897a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800897e:	682a      	ldr	r2, [r5, #0]
 8008980:	686b      	ldr	r3, [r5, #4]
 8008982:	3201      	adds	r2, #1
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	68a2      	ldr	r2, [r4, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	3a01      	subs	r2, #1
 800898c:	606b      	str	r3, [r5, #4]
 800898e:	3701      	adds	r7, #1
 8008990:	60a2      	str	r2, [r4, #8]
 8008992:	b142      	cbz	r2, 80089a6 <_scanf_chars+0x8e>
 8008994:	2b00      	cmp	r3, #0
 8008996:	dcd7      	bgt.n	8008948 <_scanf_chars+0x30>
 8008998:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800899c:	4629      	mov	r1, r5
 800899e:	4640      	mov	r0, r8
 80089a0:	4798      	blx	r3
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0d0      	beq.n	8008948 <_scanf_chars+0x30>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	f013 0310 	ands.w	r3, r3, #16
 80089ac:	d105      	bne.n	80089ba <_scanf_chars+0xa2>
 80089ae:	68e2      	ldr	r2, [r4, #12]
 80089b0:	3201      	adds	r2, #1
 80089b2:	60e2      	str	r2, [r4, #12]
 80089b4:	69a2      	ldr	r2, [r4, #24]
 80089b6:	b102      	cbz	r2, 80089ba <_scanf_chars+0xa2>
 80089b8:	7033      	strb	r3, [r6, #0]
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	443b      	add	r3, r7
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	2000      	movs	r0, #0
 80089c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c6:	bf00      	nop
 80089c8:	08009437 	.word	0x08009437

080089cc <_scanf_i>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	4698      	mov	r8, r3
 80089d2:	4b74      	ldr	r3, [pc, #464]	@ (8008ba4 <_scanf_i+0x1d8>)
 80089d4:	460c      	mov	r4, r1
 80089d6:	4682      	mov	sl, r0
 80089d8:	4616      	mov	r6, r2
 80089da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089de:	b087      	sub	sp, #28
 80089e0:	ab03      	add	r3, sp, #12
 80089e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089e6:	4b70      	ldr	r3, [pc, #448]	@ (8008ba8 <_scanf_i+0x1dc>)
 80089e8:	69a1      	ldr	r1, [r4, #24]
 80089ea:	4a70      	ldr	r2, [pc, #448]	@ (8008bac <_scanf_i+0x1e0>)
 80089ec:	2903      	cmp	r1, #3
 80089ee:	bf08      	it	eq
 80089f0:	461a      	moveq	r2, r3
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	9201      	str	r2, [sp, #4]
 80089f6:	1e5a      	subs	r2, r3, #1
 80089f8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089fc:	bf88      	it	hi
 80089fe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a02:	4627      	mov	r7, r4
 8008a04:	bf82      	ittt	hi
 8008a06:	eb03 0905 	addhi.w	r9, r3, r5
 8008a0a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a0e:	60a3      	strhi	r3, [r4, #8]
 8008a10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008a14:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008a18:	bf98      	it	ls
 8008a1a:	f04f 0900 	movls.w	r9, #0
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	463d      	mov	r5, r7
 8008a22:	f04f 0b00 	mov.w	fp, #0
 8008a26:	6831      	ldr	r1, [r6, #0]
 8008a28:	ab03      	add	r3, sp, #12
 8008a2a:	7809      	ldrb	r1, [r1, #0]
 8008a2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a30:	2202      	movs	r2, #2
 8008a32:	f7f7 fbed 	bl	8000210 <memchr>
 8008a36:	b328      	cbz	r0, 8008a84 <_scanf_i+0xb8>
 8008a38:	f1bb 0f01 	cmp.w	fp, #1
 8008a3c:	d159      	bne.n	8008af2 <_scanf_i+0x126>
 8008a3e:	6862      	ldr	r2, [r4, #4]
 8008a40:	b92a      	cbnz	r2, 8008a4e <_scanf_i+0x82>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	2108      	movs	r1, #8
 8008a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a4a:	6061      	str	r1, [r4, #4]
 8008a4c:	6022      	str	r2, [r4, #0]
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	68a2      	ldr	r2, [r4, #8]
 8008a58:	1e51      	subs	r1, r2, #1
 8008a5a:	60a1      	str	r1, [r4, #8]
 8008a5c:	b192      	cbz	r2, 8008a84 <_scanf_i+0xb8>
 8008a5e:	6832      	ldr	r2, [r6, #0]
 8008a60:	1c51      	adds	r1, r2, #1
 8008a62:	6031      	str	r1, [r6, #0]
 8008a64:	7812      	ldrb	r2, [r2, #0]
 8008a66:	f805 2b01 	strb.w	r2, [r5], #1
 8008a6a:	6872      	ldr	r2, [r6, #4]
 8008a6c:	3a01      	subs	r2, #1
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	6072      	str	r2, [r6, #4]
 8008a72:	dc07      	bgt.n	8008a84 <_scanf_i+0xb8>
 8008a74:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	4790      	blx	r2
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f040 8085 	bne.w	8008b8e <_scanf_i+0x1c2>
 8008a84:	f10b 0b01 	add.w	fp, fp, #1
 8008a88:	f1bb 0f03 	cmp.w	fp, #3
 8008a8c:	d1cb      	bne.n	8008a26 <_scanf_i+0x5a>
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	b90b      	cbnz	r3, 8008a96 <_scanf_i+0xca>
 8008a92:	230a      	movs	r3, #10
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6863      	ldr	r3, [r4, #4]
 8008a98:	4945      	ldr	r1, [pc, #276]	@ (8008bb0 <_scanf_i+0x1e4>)
 8008a9a:	6960      	ldr	r0, [r4, #20]
 8008a9c:	1ac9      	subs	r1, r1, r3
 8008a9e:	f000 f889 	bl	8008bb4 <__sccl>
 8008aa2:	f04f 0b00 	mov.w	fp, #0
 8008aa6:	68a3      	ldr	r3, [r4, #8]
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d03d      	beq.n	8008b2a <_scanf_i+0x15e>
 8008aae:	6831      	ldr	r1, [r6, #0]
 8008ab0:	6960      	ldr	r0, [r4, #20]
 8008ab2:	f891 c000 	ldrb.w	ip, [r1]
 8008ab6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d035      	beq.n	8008b2a <_scanf_i+0x15e>
 8008abe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008ac2:	d124      	bne.n	8008b0e <_scanf_i+0x142>
 8008ac4:	0510      	lsls	r0, r2, #20
 8008ac6:	d522      	bpl.n	8008b0e <_scanf_i+0x142>
 8008ac8:	f10b 0b01 	add.w	fp, fp, #1
 8008acc:	f1b9 0f00 	cmp.w	r9, #0
 8008ad0:	d003      	beq.n	8008ada <_scanf_i+0x10e>
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008ad8:	60a3      	str	r3, [r4, #8]
 8008ada:	6873      	ldr	r3, [r6, #4]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	6073      	str	r3, [r6, #4]
 8008ae2:	dd1b      	ble.n	8008b1c <_scanf_i+0x150>
 8008ae4:	6833      	ldr	r3, [r6, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	e7d9      	b.n	8008aa6 <_scanf_i+0xda>
 8008af2:	f1bb 0f02 	cmp.w	fp, #2
 8008af6:	d1ae      	bne.n	8008a56 <_scanf_i+0x8a>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008afe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008b02:	d1bf      	bne.n	8008a84 <_scanf_i+0xb8>
 8008b04:	2110      	movs	r1, #16
 8008b06:	6061      	str	r1, [r4, #4]
 8008b08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b0c:	e7a2      	b.n	8008a54 <_scanf_i+0x88>
 8008b0e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008b12:	6022      	str	r2, [r4, #0]
 8008b14:	780b      	ldrb	r3, [r1, #0]
 8008b16:	f805 3b01 	strb.w	r3, [r5], #1
 8008b1a:	e7de      	b.n	8008ada <_scanf_i+0x10e>
 8008b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b20:	4631      	mov	r1, r6
 8008b22:	4650      	mov	r0, sl
 8008b24:	4798      	blx	r3
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d0df      	beq.n	8008aea <_scanf_i+0x11e>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	05d9      	lsls	r1, r3, #23
 8008b2e:	d50d      	bpl.n	8008b4c <_scanf_i+0x180>
 8008b30:	42bd      	cmp	r5, r7
 8008b32:	d909      	bls.n	8008b48 <_scanf_i+0x17c>
 8008b34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4650      	mov	r0, sl
 8008b40:	4798      	blx	r3
 8008b42:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8008b46:	464d      	mov	r5, r9
 8008b48:	42bd      	cmp	r5, r7
 8008b4a:	d028      	beq.n	8008b9e <_scanf_i+0x1d2>
 8008b4c:	6822      	ldr	r2, [r4, #0]
 8008b4e:	f012 0210 	ands.w	r2, r2, #16
 8008b52:	d113      	bne.n	8008b7c <_scanf_i+0x1b0>
 8008b54:	702a      	strb	r2, [r5, #0]
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	9e01      	ldr	r6, [sp, #4]
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	47b0      	blx	r6
 8008b60:	f8d8 3000 	ldr.w	r3, [r8]
 8008b64:	6821      	ldr	r1, [r4, #0]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	f8c8 2000 	str.w	r2, [r8]
 8008b6c:	f011 0f20 	tst.w	r1, #32
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	d00f      	beq.n	8008b94 <_scanf_i+0x1c8>
 8008b74:	6018      	str	r0, [r3, #0]
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60e3      	str	r3, [r4, #12]
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	1bed      	subs	r5, r5, r7
 8008b80:	445d      	add	r5, fp
 8008b82:	442b      	add	r3, r5
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	2000      	movs	r0, #0
 8008b88:	b007      	add	sp, #28
 8008b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8e:	f04f 0b00 	mov.w	fp, #0
 8008b92:	e7ca      	b.n	8008b2a <_scanf_i+0x15e>
 8008b94:	07ca      	lsls	r2, r1, #31
 8008b96:	bf4c      	ite	mi
 8008b98:	8018      	strhmi	r0, [r3, #0]
 8008b9a:	6018      	strpl	r0, [r3, #0]
 8008b9c:	e7eb      	b.n	8008b76 <_scanf_i+0x1aa>
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	e7f2      	b.n	8008b88 <_scanf_i+0x1bc>
 8008ba2:	bf00      	nop
 8008ba4:	080093c4 	.word	0x080093c4
 8008ba8:	08008e05 	.word	0x08008e05
 8008bac:	08008ee5 	.word	0x08008ee5
 8008bb0:	0800942b 	.word	0x0800942b

08008bb4 <__sccl>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	780b      	ldrb	r3, [r1, #0]
 8008bb8:	4604      	mov	r4, r0
 8008bba:	2b5e      	cmp	r3, #94	@ 0x5e
 8008bbc:	bf0b      	itete	eq
 8008bbe:	784b      	ldrbeq	r3, [r1, #1]
 8008bc0:	1c4a      	addne	r2, r1, #1
 8008bc2:	1c8a      	addeq	r2, r1, #2
 8008bc4:	2100      	movne	r1, #0
 8008bc6:	bf08      	it	eq
 8008bc8:	2101      	moveq	r1, #1
 8008bca:	3801      	subs	r0, #1
 8008bcc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008bd0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008bd4:	42a8      	cmp	r0, r5
 8008bd6:	d1fb      	bne.n	8008bd0 <__sccl+0x1c>
 8008bd8:	b90b      	cbnz	r3, 8008bde <__sccl+0x2a>
 8008bda:	1e50      	subs	r0, r2, #1
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
 8008bde:	f081 0101 	eor.w	r1, r1, #1
 8008be2:	54e1      	strb	r1, [r4, r3]
 8008be4:	4610      	mov	r0, r2
 8008be6:	4602      	mov	r2, r0
 8008be8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008bec:	2d2d      	cmp	r5, #45	@ 0x2d
 8008bee:	d005      	beq.n	8008bfc <__sccl+0x48>
 8008bf0:	2d5d      	cmp	r5, #93	@ 0x5d
 8008bf2:	d016      	beq.n	8008c22 <__sccl+0x6e>
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	d0f1      	beq.n	8008bdc <__sccl+0x28>
 8008bf8:	462b      	mov	r3, r5
 8008bfa:	e7f2      	b.n	8008be2 <__sccl+0x2e>
 8008bfc:	7846      	ldrb	r6, [r0, #1]
 8008bfe:	2e5d      	cmp	r6, #93	@ 0x5d
 8008c00:	d0fa      	beq.n	8008bf8 <__sccl+0x44>
 8008c02:	42b3      	cmp	r3, r6
 8008c04:	dcf8      	bgt.n	8008bf8 <__sccl+0x44>
 8008c06:	3002      	adds	r0, #2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	3201      	adds	r2, #1
 8008c0c:	4296      	cmp	r6, r2
 8008c0e:	54a1      	strb	r1, [r4, r2]
 8008c10:	dcfb      	bgt.n	8008c0a <__sccl+0x56>
 8008c12:	1af2      	subs	r2, r6, r3
 8008c14:	3a01      	subs	r2, #1
 8008c16:	1c5d      	adds	r5, r3, #1
 8008c18:	42b3      	cmp	r3, r6
 8008c1a:	bfa8      	it	ge
 8008c1c:	2200      	movge	r2, #0
 8008c1e:	18ab      	adds	r3, r5, r2
 8008c20:	e7e1      	b.n	8008be6 <__sccl+0x32>
 8008c22:	4610      	mov	r0, r2
 8008c24:	e7da      	b.n	8008bdc <__sccl+0x28>
	...

08008c28 <__malloc_lock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	@ (8008c30 <__malloc_lock+0x8>)
 8008c2a:	f7ff b8c7 	b.w	8007dbc <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	200130f8 	.word	0x200130f8

08008c34 <__malloc_unlock>:
 8008c34:	4801      	ldr	r0, [pc, #4]	@ (8008c3c <__malloc_unlock+0x8>)
 8008c36:	f7ff b8c2 	b.w	8007dbe <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	200130f8 	.word	0x200130f8

08008c40 <__submore>:
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	460c      	mov	r4, r1
 8008c46:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008c48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c4c:	4299      	cmp	r1, r3
 8008c4e:	d11d      	bne.n	8008c8c <__submore+0x4c>
 8008c50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008c54:	f7ff fc52 	bl	80084fc <_malloc_r>
 8008c58:	b918      	cbnz	r0, 8008c62 <__submore+0x22>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c66:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008c68:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008c6c:	6360      	str	r0, [r4, #52]	@ 0x34
 8008c6e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008c72:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008c76:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008c7a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008c7e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008c82:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	2000      	movs	r0, #0
 8008c8a:	e7e8      	b.n	8008c5e <__submore+0x1e>
 8008c8c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008c8e:	0077      	lsls	r7, r6, #1
 8008c90:	463a      	mov	r2, r7
 8008c92:	f000 f80f 	bl	8008cb4 <_realloc_r>
 8008c96:	4605      	mov	r5, r0
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d0de      	beq.n	8008c5a <__submore+0x1a>
 8008c9c:	eb00 0806 	add.w	r8, r0, r6
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4632      	mov	r2, r6
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	f7ff f88b 	bl	8007dc0 <memcpy>
 8008caa:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008cae:	f8c4 8000 	str.w	r8, [r4]
 8008cb2:	e7e9      	b.n	8008c88 <__submore+0x48>

08008cb4 <_realloc_r>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4615      	mov	r5, r2
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	b921      	cbnz	r1, 8008cca <_realloc_r+0x16>
 8008cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	f7ff bc19 	b.w	80084fc <_malloc_r>
 8008cca:	b92a      	cbnz	r2, 8008cd8 <_realloc_r+0x24>
 8008ccc:	f7ff f886 	bl	8007ddc <_free_r>
 8008cd0:	2400      	movs	r4, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	f000 f930 	bl	8008f3c <_malloc_usable_size_r>
 8008cdc:	4285      	cmp	r5, r0
 8008cde:	4606      	mov	r6, r0
 8008ce0:	d802      	bhi.n	8008ce8 <_realloc_r+0x34>
 8008ce2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ce6:	d8f4      	bhi.n	8008cd2 <_realloc_r+0x1e>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4640      	mov	r0, r8
 8008cec:	f7ff fc06 	bl	80084fc <_malloc_r>
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d0ec      	beq.n	8008cd0 <_realloc_r+0x1c>
 8008cf6:	42b5      	cmp	r5, r6
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	bf28      	it	cs
 8008cfe:	4632      	movcs	r2, r6
 8008d00:	f7ff f85e 	bl	8007dc0 <memcpy>
 8008d04:	4621      	mov	r1, r4
 8008d06:	4640      	mov	r0, r8
 8008d08:	f7ff f868 	bl	8007ddc <_free_r>
 8008d0c:	463c      	mov	r4, r7
 8008d0e:	e7e0      	b.n	8008cd2 <_realloc_r+0x1e>

08008d10 <_strtol_l.constprop.0>:
 8008d10:	2b24      	cmp	r3, #36	@ 0x24
 8008d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d16:	4686      	mov	lr, r0
 8008d18:	4690      	mov	r8, r2
 8008d1a:	d801      	bhi.n	8008d20 <_strtol_l.constprop.0+0x10>
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d106      	bne.n	8008d2e <_strtol_l.constprop.0+0x1e>
 8008d20:	f7ff f822 	bl	8007d68 <__errno>
 8008d24:	2316      	movs	r3, #22
 8008d26:	6003      	str	r3, [r0, #0]
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	4834      	ldr	r0, [pc, #208]	@ (8008e00 <_strtol_l.constprop.0+0xf0>)
 8008d30:	460d      	mov	r5, r1
 8008d32:	462a      	mov	r2, r5
 8008d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d38:	5d06      	ldrb	r6, [r0, r4]
 8008d3a:	f016 0608 	ands.w	r6, r6, #8
 8008d3e:	d1f8      	bne.n	8008d32 <_strtol_l.constprop.0+0x22>
 8008d40:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d42:	d12d      	bne.n	8008da0 <_strtol_l.constprop.0+0x90>
 8008d44:	782c      	ldrb	r4, [r5, #0]
 8008d46:	2601      	movs	r6, #1
 8008d48:	1c95      	adds	r5, r2, #2
 8008d4a:	f033 0210 	bics.w	r2, r3, #16
 8008d4e:	d109      	bne.n	8008d64 <_strtol_l.constprop.0+0x54>
 8008d50:	2c30      	cmp	r4, #48	@ 0x30
 8008d52:	d12a      	bne.n	8008daa <_strtol_l.constprop.0+0x9a>
 8008d54:	782a      	ldrb	r2, [r5, #0]
 8008d56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d5a:	2a58      	cmp	r2, #88	@ 0x58
 8008d5c:	d125      	bne.n	8008daa <_strtol_l.constprop.0+0x9a>
 8008d5e:	786c      	ldrb	r4, [r5, #1]
 8008d60:	2310      	movs	r3, #16
 8008d62:	3502      	adds	r5, #2
 8008d64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d68:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	fbbc f9f3 	udiv	r9, ip, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d7c:	2f09      	cmp	r7, #9
 8008d7e:	d81b      	bhi.n	8008db8 <_strtol_l.constprop.0+0xa8>
 8008d80:	463c      	mov	r4, r7
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	dd27      	ble.n	8008dd6 <_strtol_l.constprop.0+0xc6>
 8008d86:	1c57      	adds	r7, r2, #1
 8008d88:	d007      	beq.n	8008d9a <_strtol_l.constprop.0+0x8a>
 8008d8a:	4581      	cmp	r9, r0
 8008d8c:	d320      	bcc.n	8008dd0 <_strtol_l.constprop.0+0xc0>
 8008d8e:	d101      	bne.n	8008d94 <_strtol_l.constprop.0+0x84>
 8008d90:	45a2      	cmp	sl, r4
 8008d92:	db1d      	blt.n	8008dd0 <_strtol_l.constprop.0+0xc0>
 8008d94:	fb00 4003 	mla	r0, r0, r3, r4
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d9e:	e7eb      	b.n	8008d78 <_strtol_l.constprop.0+0x68>
 8008da0:	2c2b      	cmp	r4, #43	@ 0x2b
 8008da2:	bf04      	itt	eq
 8008da4:	782c      	ldrbeq	r4, [r5, #0]
 8008da6:	1c95      	addeq	r5, r2, #2
 8008da8:	e7cf      	b.n	8008d4a <_strtol_l.constprop.0+0x3a>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1da      	bne.n	8008d64 <_strtol_l.constprop.0+0x54>
 8008dae:	2c30      	cmp	r4, #48	@ 0x30
 8008db0:	bf0c      	ite	eq
 8008db2:	2308      	moveq	r3, #8
 8008db4:	230a      	movne	r3, #10
 8008db6:	e7d5      	b.n	8008d64 <_strtol_l.constprop.0+0x54>
 8008db8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008dbc:	2f19      	cmp	r7, #25
 8008dbe:	d801      	bhi.n	8008dc4 <_strtol_l.constprop.0+0xb4>
 8008dc0:	3c37      	subs	r4, #55	@ 0x37
 8008dc2:	e7de      	b.n	8008d82 <_strtol_l.constprop.0+0x72>
 8008dc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008dc8:	2f19      	cmp	r7, #25
 8008dca:	d804      	bhi.n	8008dd6 <_strtol_l.constprop.0+0xc6>
 8008dcc:	3c57      	subs	r4, #87	@ 0x57
 8008dce:	e7d8      	b.n	8008d82 <_strtol_l.constprop.0+0x72>
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dd4:	e7e1      	b.n	8008d9a <_strtol_l.constprop.0+0x8a>
 8008dd6:	1c53      	adds	r3, r2, #1
 8008dd8:	d108      	bne.n	8008dec <_strtol_l.constprop.0+0xdc>
 8008dda:	2322      	movs	r3, #34	@ 0x22
 8008ddc:	f8ce 3000 	str.w	r3, [lr]
 8008de0:	4660      	mov	r0, ip
 8008de2:	f1b8 0f00 	cmp.w	r8, #0
 8008de6:	d0a0      	beq.n	8008d2a <_strtol_l.constprop.0+0x1a>
 8008de8:	1e69      	subs	r1, r5, #1
 8008dea:	e006      	b.n	8008dfa <_strtol_l.constprop.0+0xea>
 8008dec:	b106      	cbz	r6, 8008df0 <_strtol_l.constprop.0+0xe0>
 8008dee:	4240      	negs	r0, r0
 8008df0:	f1b8 0f00 	cmp.w	r8, #0
 8008df4:	d099      	beq.n	8008d2a <_strtol_l.constprop.0+0x1a>
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	d1f6      	bne.n	8008de8 <_strtol_l.constprop.0+0xd8>
 8008dfa:	f8c8 1000 	str.w	r1, [r8]
 8008dfe:	e794      	b.n	8008d2a <_strtol_l.constprop.0+0x1a>
 8008e00:	08009437 	.word	0x08009437

08008e04 <_strtol_r>:
 8008e04:	f7ff bf84 	b.w	8008d10 <_strtol_l.constprop.0>

08008e08 <_strtoul_l.constprop.0>:
 8008e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4e34      	ldr	r6, [pc, #208]	@ (8008ee0 <_strtoul_l.constprop.0+0xd8>)
 8008e0e:	4686      	mov	lr, r0
 8008e10:	460d      	mov	r5, r1
 8008e12:	4628      	mov	r0, r5
 8008e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e18:	5d37      	ldrb	r7, [r6, r4]
 8008e1a:	f017 0708 	ands.w	r7, r7, #8
 8008e1e:	d1f8      	bne.n	8008e12 <_strtoul_l.constprop.0+0xa>
 8008e20:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e22:	d12f      	bne.n	8008e84 <_strtoul_l.constprop.0+0x7c>
 8008e24:	782c      	ldrb	r4, [r5, #0]
 8008e26:	2701      	movs	r7, #1
 8008e28:	1c85      	adds	r5, r0, #2
 8008e2a:	f033 0010 	bics.w	r0, r3, #16
 8008e2e:	d109      	bne.n	8008e44 <_strtoul_l.constprop.0+0x3c>
 8008e30:	2c30      	cmp	r4, #48	@ 0x30
 8008e32:	d12c      	bne.n	8008e8e <_strtoul_l.constprop.0+0x86>
 8008e34:	7828      	ldrb	r0, [r5, #0]
 8008e36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008e3a:	2858      	cmp	r0, #88	@ 0x58
 8008e3c:	d127      	bne.n	8008e8e <_strtoul_l.constprop.0+0x86>
 8008e3e:	786c      	ldrb	r4, [r5, #1]
 8008e40:	2310      	movs	r3, #16
 8008e42:	3502      	adds	r5, #2
 8008e44:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8008e48:	2600      	movs	r6, #0
 8008e4a:	fbb8 f8f3 	udiv	r8, r8, r3
 8008e4e:	fb03 f908 	mul.w	r9, r3, r8
 8008e52:	ea6f 0909 	mvn.w	r9, r9
 8008e56:	4630      	mov	r0, r6
 8008e58:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008e5c:	f1bc 0f09 	cmp.w	ip, #9
 8008e60:	d81c      	bhi.n	8008e9c <_strtoul_l.constprop.0+0x94>
 8008e62:	4664      	mov	r4, ip
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	dd2a      	ble.n	8008ebe <_strtoul_l.constprop.0+0xb6>
 8008e68:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8008e6c:	d007      	beq.n	8008e7e <_strtoul_l.constprop.0+0x76>
 8008e6e:	4580      	cmp	r8, r0
 8008e70:	d322      	bcc.n	8008eb8 <_strtoul_l.constprop.0+0xb0>
 8008e72:	d101      	bne.n	8008e78 <_strtoul_l.constprop.0+0x70>
 8008e74:	45a1      	cmp	r9, r4
 8008e76:	db1f      	blt.n	8008eb8 <_strtoul_l.constprop.0+0xb0>
 8008e78:	fb00 4003 	mla	r0, r0, r3, r4
 8008e7c:	2601      	movs	r6, #1
 8008e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e82:	e7e9      	b.n	8008e58 <_strtoul_l.constprop.0+0x50>
 8008e84:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e86:	bf04      	itt	eq
 8008e88:	782c      	ldrbeq	r4, [r5, #0]
 8008e8a:	1c85      	addeq	r5, r0, #2
 8008e8c:	e7cd      	b.n	8008e2a <_strtoul_l.constprop.0+0x22>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1d8      	bne.n	8008e44 <_strtoul_l.constprop.0+0x3c>
 8008e92:	2c30      	cmp	r4, #48	@ 0x30
 8008e94:	bf0c      	ite	eq
 8008e96:	2308      	moveq	r3, #8
 8008e98:	230a      	movne	r3, #10
 8008e9a:	e7d3      	b.n	8008e44 <_strtoul_l.constprop.0+0x3c>
 8008e9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008ea0:	f1bc 0f19 	cmp.w	ip, #25
 8008ea4:	d801      	bhi.n	8008eaa <_strtoul_l.constprop.0+0xa2>
 8008ea6:	3c37      	subs	r4, #55	@ 0x37
 8008ea8:	e7dc      	b.n	8008e64 <_strtoul_l.constprop.0+0x5c>
 8008eaa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008eae:	f1bc 0f19 	cmp.w	ip, #25
 8008eb2:	d804      	bhi.n	8008ebe <_strtoul_l.constprop.0+0xb6>
 8008eb4:	3c57      	subs	r4, #87	@ 0x57
 8008eb6:	e7d5      	b.n	8008e64 <_strtoul_l.constprop.0+0x5c>
 8008eb8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8008ebc:	e7df      	b.n	8008e7e <_strtoul_l.constprop.0+0x76>
 8008ebe:	1c73      	adds	r3, r6, #1
 8008ec0:	d106      	bne.n	8008ed0 <_strtoul_l.constprop.0+0xc8>
 8008ec2:	2322      	movs	r3, #34	@ 0x22
 8008ec4:	f8ce 3000 	str.w	r3, [lr]
 8008ec8:	4630      	mov	r0, r6
 8008eca:	b932      	cbnz	r2, 8008eda <_strtoul_l.constprop.0+0xd2>
 8008ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed0:	b107      	cbz	r7, 8008ed4 <_strtoul_l.constprop.0+0xcc>
 8008ed2:	4240      	negs	r0, r0
 8008ed4:	2a00      	cmp	r2, #0
 8008ed6:	d0f9      	beq.n	8008ecc <_strtoul_l.constprop.0+0xc4>
 8008ed8:	b106      	cbz	r6, 8008edc <_strtoul_l.constprop.0+0xd4>
 8008eda:	1e69      	subs	r1, r5, #1
 8008edc:	6011      	str	r1, [r2, #0]
 8008ede:	e7f5      	b.n	8008ecc <_strtoul_l.constprop.0+0xc4>
 8008ee0:	08009437 	.word	0x08009437

08008ee4 <_strtoul_r>:
 8008ee4:	f7ff bf90 	b.w	8008e08 <_strtoul_l.constprop.0>

08008ee8 <memmove>:
 8008ee8:	4288      	cmp	r0, r1
 8008eea:	b510      	push	{r4, lr}
 8008eec:	eb01 0402 	add.w	r4, r1, r2
 8008ef0:	d902      	bls.n	8008ef8 <memmove+0x10>
 8008ef2:	4284      	cmp	r4, r0
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	d807      	bhi.n	8008f08 <memmove+0x20>
 8008ef8:	1e43      	subs	r3, r0, #1
 8008efa:	42a1      	cmp	r1, r4
 8008efc:	d008      	beq.n	8008f10 <memmove+0x28>
 8008efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f06:	e7f8      	b.n	8008efa <memmove+0x12>
 8008f08:	4402      	add	r2, r0
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	428a      	cmp	r2, r1
 8008f0e:	d100      	bne.n	8008f12 <memmove+0x2a>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f1a:	e7f7      	b.n	8008f0c <memmove+0x24>

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d06      	ldr	r5, [pc, #24]	@ (8008f38 <_sbrk_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7f8 f808 	bl	8000f3c <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	200130f4 	.word	0x200130f4

08008f3c <_malloc_usable_size_r>:
 8008f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f40:	1f18      	subs	r0, r3, #4
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bfbc      	itt	lt
 8008f46:	580b      	ldrlt	r3, [r1, r0]
 8008f48:	18c0      	addlt	r0, r0, r3
 8008f4a:	4770      	bx	lr

08008f4c <_init>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr

08008f58 <_fini>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	bf00      	nop
 8008f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	469e      	mov	lr, r3
 8008f62:	4770      	bx	lr
