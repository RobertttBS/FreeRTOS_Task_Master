
8_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08009ce4  08009ce4  0000ace4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a350  0800a350  0000c084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a350  0800a350  0000b350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a358  0800a358  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a358  0800a358  0000b358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a35c  0800a35c  0000b35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a360  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000130f0  20000084  0800a3e4  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013174  0800a3e4  0000c174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016454  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003752  00000000  00000000  00022508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00025c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4b  00000000  00000000  00027010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019703  00000000  00000000  00027f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ec8  00000000  00000000  0004165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db51  00000000  00000000  00059526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a28  00000000  00000000  000f70bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fcae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ccc 	.word	0x08009ccc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08009ccc 	.word	0x08009ccc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f001 fa5b 	bl	8001a60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f92f 	bl	800080c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 faa9 	bl	8000b04 <MX_GPIO_Init>
	MX_DMA_Init();
 80005b2:	f000 fa5b 	bl	8000a6c <MX_DMA_Init>
	MX_RTC_Init();
 80005b6:	f000 f993 	bl	80008e0 <MX_RTC_Init>
	MX_USART2_UART_Init();
 80005ba:	f000 fa2d 	bl	8000a18 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80005be:	f000 f9b5 	bl	800092c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* Start PWM */
 80005c2:	2100      	movs	r1, #0
 80005c4:	4876      	ldr	r0, [pc, #472]	@ (80007a0 <main+0x200>)
 80005c6:	f003 f9e3 	bl	8003990 <HAL_TIM_PWM_Start>

	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2,
 80005ca:	4b76      	ldr	r3, [pc, #472]	@ (80007a4 <main+0x204>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22fa      	movs	r2, #250	@ 0xfa
 80005d6:	4974      	ldr	r1, [pc, #464]	@ (80007a8 <main+0x208>)
 80005d8:	4874      	ldr	r0, [pc, #464]	@ (80007ac <main+0x20c>)
 80005da:	f005 ffd7 	bl	800658c <xTaskCreate>
 80005de:	6278      	str	r0, [r7, #36]	@ 0x24
			&handle_menu_task);
	configASSERT(status == pdPASS);
 80005e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00b      	beq.n	80005fe <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x5a>

	status = xTaskCreate(uart_task, "uart_task", 250, NULL, 2,
 80005fe:	4b6c      	ldr	r3, [pc, #432]	@ (80007b0 <main+0x210>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22fa      	movs	r2, #250	@ 0xfa
 800060a:	496a      	ldr	r1, [pc, #424]	@ (80007b4 <main+0x214>)
 800060c:	486a      	ldr	r0, [pc, #424]	@ (80007b8 <main+0x218>)
 800060e:	f005 ffbd 	bl	800658c <xTaskCreate>
 8000612:	6278      	str	r0, [r7, #36]	@ 0x24
			&handle_uart_task);
	configASSERT(status == pdPASS);
 8000614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00b      	beq.n	8000632 <main+0x92>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	61fb      	str	r3, [r7, #28]
    }
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x8e>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2,
 8000632:	4b62      	ldr	r3, [pc, #392]	@ (80007bc <main+0x21c>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	22fa      	movs	r2, #250	@ 0xfa
 800063e:	4960      	ldr	r1, [pc, #384]	@ (80007c0 <main+0x220>)
 8000640:	4860      	ldr	r0, [pc, #384]	@ (80007c4 <main+0x224>)
 8000642:	f005 ffa3 	bl	800658c <xTaskCreate>
 8000646:	6278      	str	r0, [r7, #36]	@ 0x24
			&handle_cmd_task);
	configASSERT(status == pdPASS);
 8000648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064a:	2b01      	cmp	r3, #1
 800064c:	d00b      	beq.n	8000666 <main+0xc6>
        __asm volatile
 800064e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000652:	f383 8811 	msr	BASEPRI, r3
 8000656:	f3bf 8f6f 	isb	sy
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	61bb      	str	r3, [r7, #24]
    }
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0xc2>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000666:	4b58      	ldr	r3, [pc, #352]	@ (80007c8 <main+0x228>)
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	22fa      	movs	r2, #250	@ 0xfa
 8000672:	4956      	ldr	r1, [pc, #344]	@ (80007cc <main+0x22c>)
 8000674:	4856      	ldr	r0, [pc, #344]	@ (80007d0 <main+0x230>)
 8000676:	f005 ff89 	bl	800658c <xTaskCreate>
 800067a:	6278      	str	r0, [r7, #36]	@ 0x24
	configASSERT(status == pdPASS);
 800067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067e:	2b01      	cmp	r3, #1
 8000680:	d00b      	beq.n	800069a <main+0xfa>
        __asm volatile
 8000682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	617b      	str	r3, [r7, #20]
    }
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0xf6>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 800069a:	4b4e      	ldr	r3, [pc, #312]	@ (80007d4 <main+0x234>)
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	22fa      	movs	r2, #250	@ 0xfa
 80006a6:	494c      	ldr	r1, [pc, #304]	@ (80007d8 <main+0x238>)
 80006a8:	484c      	ldr	r0, [pc, #304]	@ (80007dc <main+0x23c>)
 80006aa:	f005 ff6f 	bl	800658c <xTaskCreate>
 80006ae:	6278      	str	r0, [r7, #36]	@ 0x24
	configASSERT(status == pdPASS);
 80006b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d00b      	beq.n	80006ce <main+0x12e>
        __asm volatile
 80006b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ba:	f383 8811 	msr	BASEPRI, r3
 80006be:	f3bf 8f6f 	isb	sy
 80006c2:	f3bf 8f4f 	dsb	sy
 80006c6:	613b      	str	r3, [r7, #16]
    }
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	e7fd      	b.n	80006ca <main+0x12a>

	status = xTaskCreate(dma_task, "dma_task", 250, NULL, 2, &handle_dma_task);
 80006ce:	4b44      	ldr	r3, [pc, #272]	@ (80007e0 <main+0x240>)
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	22fa      	movs	r2, #250	@ 0xfa
 80006da:	4942      	ldr	r1, [pc, #264]	@ (80007e4 <main+0x244>)
 80006dc:	4842      	ldr	r0, [pc, #264]	@ (80007e8 <main+0x248>)
 80006de:	f005 ff55 	bl	800658c <xTaskCreate>
 80006e2:	6278      	str	r0, [r7, #36]	@ 0x24
	configASSERT(status == pdPASS);
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d00b      	beq.n	8000702 <main+0x162>
        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	60fb      	str	r3, [r7, #12]
    }
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	e7fd      	b.n	80006fe <main+0x15e>

	q_data = xQueueCreate(10, sizeof(char));
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	200a      	movs	r0, #10
 8000708:	f005 f9c0 	bl	8005a8c <xQueueGenericCreate>
 800070c:	4603      	mov	r3, r0
 800070e:	4a37      	ldr	r2, [pc, #220]	@ (80007ec <main+0x24c>)
 8000710:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 8000712:	4b36      	ldr	r3, [pc, #216]	@ (80007ec <main+0x24c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10b      	bne.n	8000732 <main+0x192>
        __asm volatile
 800071a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800071e:	f383 8811 	msr	BASEPRI, r3
 8000722:	f3bf 8f6f 	isb	sy
 8000726:	f3bf 8f4f 	dsb	sy
 800072a:	60bb      	str	r3, [r7, #8]
    }
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	e7fd      	b.n	800072e <main+0x18e>

	q_print = xQueueCreate(10, sizeof(size_t));
 8000732:	2200      	movs	r2, #0
 8000734:	2104      	movs	r1, #4
 8000736:	200a      	movs	r0, #10
 8000738:	f005 f9a8 	bl	8005a8c <xQueueGenericCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <main+0x250>)
 8000740:	6013      	str	r3, [r2, #0]
	configASSERT(q_print != NULL);
 8000742:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <main+0x250>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10b      	bne.n	8000762 <main+0x1c2>
        __asm volatile
 800074a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800074e:	f383 8811 	msr	BASEPRI, r3
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	f3bf 8f4f 	dsb	sy
 800075a:	607b      	str	r3, [r7, #4]
    }
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	e7fd      	b.n	800075e <main+0x1be>

	//Create software timers for LED effects
	handle_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(250),
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <main+0x254>)
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	2201      	movs	r2, #1
 800076a:	21fa      	movs	r1, #250	@ 0xfa
 800076c:	4822      	ldr	r0, [pc, #136]	@ (80007f8 <main+0x258>)
 800076e:	f007 fa39 	bl	8007be4 <xTimerCreate>
 8000772:	4603      	mov	r3, r0
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <main+0x25c>)
 8000776:	6013      	str	r3, [r2, #0]
	pdTRUE, (void*) 1, led_effect_callback);

	HAL_UART_Transmit(&huart2, (uint8_t*) hello, strlen(hello), 100);
 8000778:	4821      	ldr	r0, [pc, #132]	@ (8000800 <main+0x260>)
 800077a:	f7ff fd31 	bl	80001e0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	2364      	movs	r3, #100	@ 0x64
 8000784:	491e      	ldr	r1, [pc, #120]	@ (8000800 <main+0x260>)
 8000786:	481f      	ldr	r0, [pc, #124]	@ (8000804 <main+0x264>)
 8000788:	f003 fffe 	bl	8004788 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	491e      	ldr	r1, [pc, #120]	@ (8000808 <main+0x268>)
 8000790:	481c      	ldr	r0, [pc, #112]	@ (8000804 <main+0x264>)
 8000792:	f004 f8ba 	bl	800490a <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 8000796:	f006 f865 	bl	8006864 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800079a:	bf00      	nop
 800079c:	e7fd      	b.n	800079a <main+0x1fa>
 800079e:	bf00      	nop
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	08009ce4 	.word	0x08009ce4
 80007ac:	08001185 	.word	0x08001185
 80007b0:	200000a8 	.word	0x200000a8
 80007b4:	08009cf0 	.word	0x08009cf0
 80007b8:	080012d5 	.word	0x080012d5
 80007bc:	200000a0 	.word	0x200000a0
 80007c0:	08009cfc 	.word	0x08009cfc
 80007c4:	08001391 	.word	0x08001391
 80007c8:	200000ac 	.word	0x200000ac
 80007cc:	08009d08 	.word	0x08009d08
 80007d0:	08001801 	.word	0x08001801
 80007d4:	200000b0 	.word	0x200000b0
 80007d8:	08009d14 	.word	0x08009d14
 80007dc:	080016b1 	.word	0x080016b1
 80007e0:	200000b4 	.word	0x200000b4
 80007e4:	08009d20 	.word	0x08009d20
 80007e8:	0800192d 	.word	0x0800192d
 80007ec:	200000bc 	.word	0x200000bc
 80007f0:	200000c0 	.word	0x200000c0
 80007f4:	08000be9 	.word	0x08000be9
 80007f8:	08009d2c 	.word	0x08009d2c
 80007fc:	200000b8 	.word	0x200000b8
 8000800:	20000000 	.word	0x20000000
 8000804:	20000130 	.word	0x20000130
 8000808:	200000c4 	.word	0x200000c4

0800080c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	@ 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 f95c 	bl	8008ad8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	@ (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000868:	230a      	movs	r3, #10
 800086a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000880:	2310      	movs	r3, #16
 8000882:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000884:	23a8      	movs	r3, #168	@ 0xa8
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fee9 	bl	800266c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x98>
		Error_Handler();
 80008a0:	f000 f9e6 	bl	8000c70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2102      	movs	r1, #2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f94b 	bl	8002b5c <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xc4>
		Error_Handler();
 80008cc:	f000 f9d0 	bl	8000c70 <Error_Handler>
	}
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	@ 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_RTC_Init+0x44>)
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <MX_RTC_Init+0x48>)
 80008e8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_RTC_Init+0x44>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_RTC_Init+0x44>)
 80008f2:	227f      	movs	r2, #127	@ 0x7f
 80008f4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_RTC_Init+0x44>)
 80008f8:	22ff      	movs	r2, #255	@ 0xff
 80008fa:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_RTC_Init+0x44>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_RTC_Init+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_RTC_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_RTC_Init+0x44>)
 8000910:	f002 fc26 	bl	8003160 <HAL_RTC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_RTC_Init+0x3e>
		Error_Handler();
 800091a:	f000 f9a9 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000c8 	.word	0x200000c8
 8000928:	40002800 	.word	0x40002800

0800092c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800095c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 800095e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000962:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 83;
 8000964:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 8000966:	2253      	movs	r2, #83	@ 0x53
 8000968:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000970:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 8000972:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000976:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000984:	4823      	ldr	r0, [pc, #140]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 8000986:	f002 fef7 	bl	8003778 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000990:	f000 f96e 	bl	8000c70 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800099a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099e:	4619      	mov	r1, r3
 80009a0:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 80009a2:	f003 fa57 	bl	8003e54 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x84>
		Error_Handler();
 80009ac:	f000 f960 	bl	8000c70 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009b0:	4818      	ldr	r0, [pc, #96]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 80009b2:	f002 ff93 	bl	80038dc <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x94>
		Error_Handler();
 80009bc:	f000 f958 	bl	8000c70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 80009d0:	f003 fe08 	bl	80045e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80009da:	f000 f949 	bl	8000c70 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	@ 0x60
 80009e0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 31250;
 80009e2:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80009e6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 80009f8:	f003 f96a 	bl	8003cd0 <HAL_TIM_PWM_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000a02:	f000 f935 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a06:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <MX_TIM2_Init+0xe8>)
 8000a08:	f000 fa40 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000a0c:	bf00      	nop
 8000a0e:	3738      	adds	r7, #56	@ 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000e8 	.word	0x200000e8

08000a18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f003 fe4a 	bl	80046e8 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a5a:	f000 f909 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000130 	.word	0x20000130
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <MX_DMA_Init+0x8c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000af8 <MX_DMA_Init+0x8c>)
 8000a7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_DMA_Init+0x8c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_DMA_Init+0x90>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <MX_DMA_Init+0x94>)
 8000a92:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_DMA_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_DMA_Init+0x90>)
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_DMA_Init+0x90>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa6:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_DMA_Init+0x90>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aae:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_DMA_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_DMA_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_DMA_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_DMA_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_DMA_Init+0x90>)
 8000aca:	2204      	movs	r2, #4
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_DMA_Init+0x90>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_DMA_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_DMA_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK) {
 8000ae0:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_DMA_Init+0x90>)
 8000ae2:	f001 f905 	bl	8001cf0 <HAL_DMA_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_DMA_Init+0x84>
		Error_Handler();
 8000aec:	f000 f8c0 	bl	8000c70 <Error_Handler>
	}

}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	20000178 	.word	0x20000178
 8000b00:	40026410 	.word	0x40026410

08000b04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_GPIO_Init+0x30>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <MX_GPIO_Init+0x30>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_GPIO_Init+0x30>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for (uint32_t i = 0; i < 150; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	e002      	b.n	8000b4c <HAL_UART_RxCpltCallback+0x14>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b95      	cmp	r3, #149	@ 0x95
 8000b50:	d9f9      	bls.n	8000b46 <HAL_UART_RxCpltCallback+0xe>
		;

	HAL_UART_Transmit_IT(&huart2, (uint8_t*) &user_data, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	4920      	ldr	r1, [pc, #128]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000b56:	4821      	ldr	r0, [pc, #132]	@ (8000bdc <HAL_UART_RxCpltCallback+0xa4>)
 8000b58:	f003 fea1 	bl	800489e <HAL_UART_Transmit_IT>

	if (!xQueueIsQueueFullFromISR(q_data)) {
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <HAL_UART_RxCpltCallback+0xa8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 fc68 	bl	8006436 <xQueueIsQueueFullFromISR>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d107      	bne.n	8000b7c <HAL_UART_RxCpltCallback+0x44>
		/*Enqueue data byte */
		xQueueSendFromISR(q_data, (void* )&user_data, NULL);
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <HAL_UART_RxCpltCallback+0xa8>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	2200      	movs	r2, #0
 8000b74:	4918      	ldr	r1, [pc, #96]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000b76:	f005 f8fd 	bl	8005d74 <xQueueGenericSendFromISR>
 8000b7a:	e013      	b.n	8000ba4 <HAL_UART_RxCpltCallback+0x6c>
	} else {
		if (user_data == '\n') {
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d10e      	bne.n	8000ba4 <HAL_UART_RxCpltCallback+0x6c>
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void*) &dummy, NULL); // task out an element from queue
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_UART_RxCpltCallback+0xa8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f107 010b 	add.w	r1, r7, #11
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 fa87 	bl	80060a4 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void* )&user_data, NULL); // then push the element into the queue
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_UART_RxCpltCallback+0xa8>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	490e      	ldr	r1, [pc, #56]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000ba0:	f005 f8e8 	bl	8005d74 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if (user_data == '\n') {
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d10a      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x8c>
		/*send notification to command handling task */
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_UART_RxCpltCallback+0xac>)
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f006 fdfc 	bl	80077bc <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <HAL_UART_RxCpltCallback+0xa4>)
 8000bca:	f003 fe9e 	bl	800490a <HAL_UART_Receive_IT>
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000c4 	.word	0x200000c4
 8000bdc:	20000130 	.word	0x20000130
 8000be0:	200000bc 	.word	0x200000bc
 8000be4:	200000a0 	.word	0x200000a0

08000be8 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	static uint32_t brightness = 0;
	static int8_t direction = 1;

	for (int i = 0; i < 1000; i++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e013      	b.n	8000c1e <led_effect_callback+0x36>
		brightness += direction;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <led_effect_callback+0x58>)
 8000bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <led_effect_callback+0x5c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <led_effect_callback+0x5c>)
 8000c06:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness);
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <led_effect_callback+0x60>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <led_effect_callback+0x5c>)
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 ff66 	bl	8001ae4 <HAL_Delay>
	for (int i = 0; i < 1000; i++) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c24:	dbe7      	blt.n	8000bf6 <led_effect_callback+0xe>
	}

	direction = 0 - direction;
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <led_effect_callback+0x58>)
 8000c28:	f993 3000 	ldrsb.w	r3, [r3]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	425b      	negs	r3, r3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	b25a      	sxtb	r2, r3
 8000c34:	4b02      	ldr	r3, [pc, #8]	@ (8000c40 <led_effect_callback+0x58>)
 8000c36:	701a      	strb	r2, [r3, #0]

//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000012 	.word	0x20000012
 8000c44:	200001d8 	.word	0x200001d8
 8000c48:	200000e8 	.word	0x200000e8

08000c4c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c5e:	f000 ff21 	bl	8001aa4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40000c00 	.word	0x40000c00

08000c70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <rtc_configure_date>:
 *      Author: robert
 */

#include "main.h"

void rtc_configure_date(RTC_DateTypeDef *date) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <rtc_configure_date+0x1c>)
 8000c8a:	f002 fbe4 	bl	8003456 <HAL_RTC_SetDate>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000c8 	.word	0x200000c8

08000c9c <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <rtc_configure_time+0x2c>)
 8000cbc:	f002 fad3 	bl	8003266 <HAL_RTC_SetTime>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000c8 	.word	0x200000c8

08000ccc <show_time_date>:

void show_time_date(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f007 fefc 	bl	8008ad8 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2214      	movs	r2, #20
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f007 fef6 	bl	8008ad8 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4821      	ldr	r0, [pc, #132]	@ (8000d78 <show_time_date+0xac>)
 8000cf4:	f002 fb51 	bl	800339a <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481d      	ldr	r0, [pc, #116]	@ (8000d78 <show_time_date+0xac>)
 8000d02:	f002 fc2c 	bl	800355e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <show_time_date+0x44>
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <show_time_date+0xb0>)
 8000d0e:	e000      	b.n	8000d12 <show_time_date+0x46>
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <show_time_date+0xb4>)
 8000d12:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000d14:	793b      	ldrb	r3, [r7, #4]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000d16:	4618      	mov	r0, r3
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000d18:	797b      	ldrb	r3, [r7, #5]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000d1a:	461a      	mov	r2, r3
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000d1e:	4619      	mov	r1, r3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	9302      	str	r3, [sp, #8]
 8000d24:	9101      	str	r1, [sp, #4]
 8000d26:	9200      	str	r2, [sp, #0]
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <show_time_date+0xb8>)
 8000d2c:	4916      	ldr	r1, [pc, #88]	@ (8000d88 <show_time_date+0xbc>)
 8000d2e:	4817      	ldr	r0, [pc, #92]	@ (8000d8c <show_time_date+0xc0>)
 8000d30:	f007 fe86 	bl	8008a40 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <show_time_date+0xc4>)
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d3e:	4915      	ldr	r1, [pc, #84]	@ (8000d94 <show_time_date+0xc8>)
 8000d40:	f004 ff16 	bl	8005b70 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000d44:	7e7b      	ldrb	r3, [r7, #25]
 8000d46:	461a      	mov	r2, r3
			rtc_date.Date, 2000 + rtc_date.Year);
 8000d48:	7ebb      	ldrb	r3, [r7, #26]
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000d4a:	4619      	mov	r1, r3
			rtc_date.Date, 2000 + rtc_date.Year);
 8000d4c:	7efb      	ldrb	r3, [r7, #27]
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000d4e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	460b      	mov	r3, r1
 8000d56:	4910      	ldr	r1, [pc, #64]	@ (8000d98 <show_time_date+0xcc>)
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <show_time_date+0xd0>)
 8000d5a:	f007 fe71 	bl	8008a40 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <show_time_date+0xc4>)
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d68:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <show_time_date+0xd4>)
 8000d6a:	f004 ff01 	bl	8005b70 <xQueueGenericSend>
}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000c8 	.word	0x200000c8
 8000d7c:	08009d38 	.word	0x08009d38
 8000d80:	08009d3c 	.word	0x08009d3c
 8000d84:	08009d40 	.word	0x08009d40
 8000d88:	08009d54 	.word	0x08009d54
 8000d8c:	200001dc 	.word	0x200001dc
 8000d90:	200000c0 	.word	0x200000c0
 8000d94:	20000014 	.word	0x20000014
 8000d98:	08009d6c 	.word	0x08009d6c
 8000d9c:	20000204 	.word	0x20000204
 8000da0:	20000018 	.word	0x20000018

08000da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <HAL_RTC_MspInit+0x50>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d111      	bne.n	8000e3c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f8aa 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e32:	f7ff ff1d 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <HAL_RTC_MspInit+0x54>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40002800 	.word	0x40002800
 8000e48:	42470e3c 	.word	0x42470e3c

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eac:	d11d      	bne.n	8000eea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eca:	2320      	movs	r3, #32
 8000ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000ee6:	f001 fa3d 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <HAL_UART_MspInit+0x94>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d133      	bne.n	8000f86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f56:	230c      	movs	r3, #12
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f72:	f001 f9f7 	bl	8002364 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2106      	movs	r1, #6
 8000f7a:	2026      	movs	r0, #38	@ 0x26
 8000f7c:	f000 fe8e 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f80:	2026      	movs	r0, #38	@ 0x26
 8000f82:	f000 fea7 	bl	8001cd4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	@ 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	@ 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <HAL_InitTick+0xe4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <HAL_InitTick+0xe4>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <HAL_InitTick+0xe4>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc8:	f107 0210 	add.w	r2, r7, #16
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 ffa2 	bl	8002f1c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fe2:	f001 ff73 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8000fe6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fe8:	e004      	b.n	8000ff4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fea:	f001 ff6f 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff6:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <HAL_InitTick+0xe8>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0c9b      	lsrs	r3, r3, #18
 8000ffe:	3b01      	subs	r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001002:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <HAL_InitTick+0xec>)
 8001004:	4a21      	ldr	r2, [pc, #132]	@ (800108c <HAL_InitTick+0xf0>)
 8001006:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <HAL_InitTick+0xec>)
 800100a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800100e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001010:	4a1d      	ldr	r2, [pc, #116]	@ (8001088 <HAL_InitTick+0xec>)
 8001012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001014:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_InitTick+0xec>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <HAL_InitTick+0xec>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_InitTick+0xec>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001028:	4817      	ldr	r0, [pc, #92]	@ (8001088 <HAL_InitTick+0xec>)
 800102a:	f002 fba5 	bl	8003778 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001034:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11b      	bne.n	8001074 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800103c:	4812      	ldr	r0, [pc, #72]	@ (8001088 <HAL_InitTick+0xec>)
 800103e:	f002 fbeb 	bl	8003818 <HAL_TIM_Base_Start_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800104c:	2b00      	cmp	r3, #0
 800104e:	d111      	bne.n	8001074 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001050:	2032      	movs	r0, #50	@ 0x32
 8001052:	f000 fe3f 	bl	8001cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d808      	bhi.n	800106e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	2032      	movs	r0, #50	@ 0x32
 8001062:	f000 fe1b 	bl	8001c9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_InitTick+0xf4>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e002      	b.n	8001074 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001078:	4618      	mov	r0, r3
 800107a:	3738      	adds	r7, #56	@ 0x38
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	431bde83 	.word	0x431bde83
 8001088:	2000022c 	.word	0x2000022c
 800108c:	40000c00 	.word	0x40000c00
 8001090:	20000024 	.word	0x20000024

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <UsageFault_Handler+0x4>

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <USART2_IRQHandler+0x10>)
 80010d2:	f003 fc3f 	bl	8004954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000130 	.word	0x20000130

080010e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <TIM5_IRQHandler+0x10>)
 80010e6:	f002 fd03 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000022c 	.word	0x2000022c

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f007 fce0 	bl	8008ae8 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20020000 	.word	0x20020000
 8001154:	00000400 	.word	0x00000400
 8001158:	20000274 	.word	0x20000274
 800115c:	20013178 	.word	0x20013178

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <menu_task>:
uint8_t Buffer_Src[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
uint8_t Buffer_Dest[10];

state_t curr_state = sMainMenu;

void menu_task(void *param) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	@ 0x30
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char *msg_menu = "\n========================\n"
 800118c:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <menu_task+0x128>)
 800118e:	61bb      	str	r3, [r7, #24]
			"Date and time ----> 1\n"
			"DMA           ----> 2\n"
			"Enter your choice here : ";

	while (1) {
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001190:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <menu_task+0x12c>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f107 0118 	add.w	r1, r7, #24
 8001198:	2300      	movs	r3, #0
 800119a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800119e:	f004 fce7 	bl	8005b70 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f006 f95d 	bl	8007470 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24

		if (cmd->len == 1) {
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d161      	bne.n	8001286 <menu_task+0x102>
			option = cmd->payload[0] - '0';
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3b30      	subs	r3, #48	@ 0x30
 80011c8:	623b      	str	r3, [r7, #32]
			switch (option) {
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d039      	beq.n	8001244 <menu_task+0xc0>
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	dc4e      	bgt.n	8001274 <menu_task+0xf0>
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <menu_task+0x60>
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d018      	beq.n	8001214 <menu_task+0x90>
 80011e2:	e047      	b.n	8001274 <menu_task+0xf0>
			case 0:
				const char *msg_led = "Switch to LED task\n";
 80011e4:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <menu_task+0x130>)
 80011e6:	617b      	str	r3, [r7, #20]
				xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <menu_task+0x12c>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f107 0114 	add.w	r1, r7, #20
 80011f0:	2300      	movs	r3, #0
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011f6:	f004 fcbb 	bl	8005b70 <xQueueGenericSend>
				curr_state = sLedEffect;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <menu_task+0x134>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task, 0, eNoAction);
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <menu_task+0x138>)
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	f006 f9af 	bl	8007570 <xTaskGenericNotify>
				break;
 8001212:	e041      	b.n	8001298 <menu_task+0x114>
			case 1:
				const char *msg_rtc = "Switch to RTC task\n";
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <menu_task+0x13c>)
 8001216:	613b      	str	r3, [r7, #16]
				xQueueSend(q_print, &msg_rtc, portMAX_DELAY);
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <menu_task+0x12c>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	f107 0110 	add.w	r1, r7, #16
 8001220:	2300      	movs	r3, #0
 8001222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001226:	f004 fca3 	bl	8005b70 <xQueueGenericSend>
				curr_state = sRtcMenu;
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <menu_task+0x134>)
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001230:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <menu_task+0x140>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2300      	movs	r3, #0
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	f006 f997 	bl	8007570 <xTaskGenericNotify>
				break;
 8001242:	e029      	b.n	8001298 <menu_task+0x114>
			case 2: /*implement exit */
				const char *msg_dma = "Switch to DMA task\n";
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <menu_task+0x144>)
 8001246:	60fb      	str	r3, [r7, #12]
				xQueueSend(q_print, &msg_dma, portMAX_DELAY);
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <menu_task+0x12c>)
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f107 010c 	add.w	r1, r7, #12
 8001250:	2300      	movs	r3, #0
 8001252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001256:	f004 fc8b 	bl	8005b70 <xQueueGenericSend>
				curr_state = sDmaTransfer;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <menu_task+0x134>)
 800125c:	2206      	movs	r2, #6
 800125e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_dma_task, 0, eNoAction);
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <menu_task+0x148>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	f006 f97f 	bl	8007570 <xTaskGenericNotify>
				break;
 8001272:	e011      	b.n	8001298 <menu_task+0x114>
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <menu_task+0x12c>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800127e:	4914      	ldr	r1, [pc, #80]	@ (80012d0 <menu_task+0x14c>)
 8001280:	f004 fc76 	bl	8005b70 <xQueueGenericSend>
 8001284:	e784      	b.n	8001190 <menu_task+0xc>
				continue;
			}

		} else {
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <menu_task+0x12c>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001290:	490f      	ldr	r1, [pc, #60]	@ (80012d0 <menu_task+0x14c>)
 8001292:	f004 fc6d 	bl	8005b70 <xQueueGenericSend>
			continue;
 8001296:	e008      	b.n	80012aa <menu_task+0x126>
		}
		// wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f006 f8e3 	bl	8007470 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80012aa:	e771      	b.n	8001190 <menu_task+0xc>
 80012ac:	08009d94 	.word	0x08009d94
 80012b0:	200000c0 	.word	0x200000c0
 80012b4:	08009e3c 	.word	0x08009e3c
 80012b8:	20000282 	.word	0x20000282
 80012bc:	200000ac 	.word	0x200000ac
 80012c0:	08009e50 	.word	0x08009e50
 80012c4:	200000b0 	.word	0x200000b0
 80012c8:	08009e64 	.word	0x08009e64
 80012cc:	200000b4 	.word	0x200000b4
 80012d0:	20000020 	.word	0x20000020

080012d4 <uart_task>:
	} // while super loop
}

void uart_task(void *param) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while (1) {
		// Get string from queue and then send it out.
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <uart_task+0x38>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f107 010c 	add.w	r1, r7, #12
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 fdf9 	bl	8005ee0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char*) msg),
 80012ee:	68fc      	ldr	r4, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff74 	bl	80001e0 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001300:	4621      	mov	r1, r4
 8001302:	4803      	ldr	r0, [pc, #12]	@ (8001310 <uart_task+0x3c>)
 8001304:	f003 fa40 	bl	8004788 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001308:	bf00      	nop
 800130a:	e7e7      	b.n	80012dc <uart_task+0x8>
 800130c:	200000c0 	.word	0x200000c0
 8001310:	20000130 	.word	0x20000130

08001314 <extract_command>:
		HAL_MAX_DELAY);
	} //while super loop
}

static inline int extract_command(command_t *cmd) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;
	uint8_t i = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	75fb      	strb	r3, [r7, #23]

	// Check if there are any messages waiting in the queue.s
	status = uxQueueMessagesWaiting(q_data);
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <extract_command+0x78>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f004 ff57 	bl	80061d8 <uxQueueMessagesWaiting>
 800132a:	4603      	mov	r3, r0
 800132c:	613b      	str	r3, [r7, #16]
	if (!status)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <extract_command+0x26>
		return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001338:	e023      	b.n	8001382 <extract_command+0x6e>

	do {
		status = xQueueReceive(q_data, &item, 0);
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <extract_command+0x78>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f107 010f 	add.w	r1, r7, #15
 8001342:	2200      	movs	r2, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fdcb 	bl	8005ee0 <xQueueReceive>
 800134a:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE && item != '\r')
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d109      	bne.n	8001366 <extract_command+0x52>
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b0d      	cmp	r3, #13
 8001356:	d006      	beq.n	8001366 <extract_command+0x52>
			cmd->payload[i++] = item;
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	75fa      	strb	r2, [r7, #23]
 800135e:	461a      	mov	r2, r3
 8001360:	7bf9      	ldrb	r1, [r7, #15]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	5499      	strb	r1, [r3, r2]
	} while (item != '\n');
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b0a      	cmp	r3, #10
 800136a:	d1e6      	bne.n	800133a <extract_command+0x26>

	cmd->payload[i - 1] = '\0';
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	3b01      	subs	r3, #1
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	2100      	movs	r1, #0
 8001374:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1; /*save  length of the command excluding null char */
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	3b01      	subs	r3, #1
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]

	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000bc 	.word	0x200000bc

08001390 <cmd_handler_task>:

void cmd_handler_task(void *param) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while (1) {
		/*Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f006 f863 	bl	8007470 <xTaskGenericNotifyWait>
 80013aa:	61f8      	str	r0, [r7, #28]

		if (ret == pdTRUE) {
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d1f2      	bne.n	8001398 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			extract_command(&cmd);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffac 	bl	8001314 <extract_command>

			switch (curr_state) {
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <cmd_handler_task+0xb4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d8e9      	bhi.n	8001398 <cmd_handler_task+0x8>
 80013c4:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <cmd_handler_task+0x3c>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	080013e9 	.word	0x080013e9
 80013d0:	080013ff 	.word	0x080013ff
 80013d4:	08001415 	.word	0x08001415
 80013d8:	08001415 	.word	0x08001415
 80013dc:	08001415 	.word	0x08001415
 80013e0:	08001415 	.word	0x08001415
 80013e4:	0800142b 	.word	0x0800142b
			case sMainMenu:
				xTaskNotify(handle_menu_task, (uint32_t )&cmd,
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <cmd_handler_task+0xb8>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f107 020c 	add.w	r2, r7, #12
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2303      	movs	r3, #3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f006 f8ba 	bl	8007570 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 80013fc:	e021      	b.n	8001442 <cmd_handler_task+0xb2>

			case sLedEffect:
				xTaskNotify(handle_led_task, (uint32_t )&cmd,
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <cmd_handler_task+0xbc>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f107 020c 	add.w	r2, r7, #12
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2303      	movs	r3, #3
 800140c:	2100      	movs	r1, #0
 800140e:	f006 f8af 	bl	8007570 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 8001412:	e016      	b.n	8001442 <cmd_handler_task+0xb2>

			case sRtcMenu:
			case sRtcTimeConfig:
			case sRtcDateConfig:
			case sRtcReport:
				xTaskNotify(handle_rtc_task, (uint32_t )&cmd,
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <cmd_handler_task+0xc0>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2303      	movs	r3, #3
 8001422:	2100      	movs	r1, #0
 8001424:	f006 f8a4 	bl	8007570 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 8001428:	e00b      	b.n	8001442 <cmd_handler_task+0xb2>
			case sDmaTransfer:
				xTaskNotify(handle_dma_task, (uint32_t )&cmd,
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <cmd_handler_task+0xc4>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f107 020c 	add.w	r2, r7, #12
 8001432:	2300      	movs	r3, #0
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2303      	movs	r3, #3
 8001438:	2100      	movs	r1, #0
 800143a:	f006 f899 	bl	8007570 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 800143e:	bf00      	nop
 8001440:	e7aa      	b.n	8001398 <cmd_handler_task+0x8>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001442:	e7a9      	b.n	8001398 <cmd_handler_task+0x8>
 8001444:	20000282 	.word	0x20000282
 8001448:	200000a4 	.word	0x200000a4
 800144c:	200000ac 	.word	0x200000ac
 8001450:	200000b0 	.word	0x200000b0
 8001454:	200000b4 	.word	0x200000b4

08001458 <led_effect_stop>:
			}
		}
	}
}

void led_effect_stop(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af02      	add	r7, sp, #8
	xTimerStop(handle_led_timer, portMAX_DELAY);
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <led_effect_stop+0x20>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	2200      	movs	r2, #0
 800146c:	2103      	movs	r1, #3
 800146e:	f006 fc13 	bl	8007c98 <xTimerGenericCommand>
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200000b8 	.word	0x200000b8

0800147c <led_effect>:

static inline void led_effect(int n) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b092      	sub	sp, #72	@ 0x48
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
	// use sprintf() put "You select type %d\n"
	char msg[50];
	sprintf(msg, "You select type %d led effect\n", n);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4912      	ldr	r1, [pc, #72]	@ (80014d4 <led_effect+0x58>)
 800148c:	4618      	mov	r0, r3
 800148e:	f007 fad7 	bl	8008a40 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fea2 	bl	80001e0 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f107 010c 	add.w	r1, r7, #12
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <led_effect+0x5c>)
 80014aa:	f003 f96d 	bl	8004788 <HAL_UART_Transmit>

	led_effect_stop();
 80014ae:	f7ff ffd3 	bl	8001458 <led_effect_stop>
	xTimerChangePeriod(handle_led_timer, n * portTICK_PERIOD_MS * 1000, 100);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <led_effect+0x60>)
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014bc:	fb03 f202 	mul.w	r2, r3, r2
 80014c0:	2364      	movs	r3, #100	@ 0x64
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	2104      	movs	r1, #4
 80014c8:	f006 fbe6 	bl	8007c98 <xTimerGenericCommand>
}
 80014cc:	bf00      	nop
 80014ce:	3740      	adds	r7, #64	@ 0x40
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	08009e78 	.word	0x08009e78
 80014d8:	20000130 	.word	0x20000130
 80014dc:	200000b8 	.word	0x200000b8

080014e0 <rtc_time_config>:

void rtc_time_config(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	@ 0x38
 80014e4:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef time;
	const char *msg = "Enter hour(1-12):minutes(0-59):seconds(0-59)\n";
 80014e6:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <rtc_time_config+0xc0>)
 80014e8:	617b      	str	r3, [r7, #20]
	int min;
	int sec;
	uint32_t cmd_addr;
	command_t *cmd;

	xQueueSend(q_print, &msg, portMAX_DELAY);
 80014ea:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <rtc_time_config+0xc4>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f107 0114 	add.w	r1, r7, #20
 80014f2:	2300      	movs	r3, #0
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014f8:	f004 fb3a 	bl	8005b70 <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2000      	movs	r0, #0
 800150a:	f005 ffb1 	bl	8007470 <xTaskGenericNotifyWait>
	cmd = (command_t*) cmd_addr;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// parse the string "cmd", which format is <hour>:<min>:<sec> into the uint8_t variables
	if (sscanf((char*) cmd->payload, "%d:%d:%d", &hour, &min, &sec) == 3) {
 8001512:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001514:	f107 010c 	add.w	r1, r7, #12
 8001518:	f107 0210 	add.w	r2, r7, #16
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	460b      	mov	r3, r1
 8001524:	4920      	ldr	r1, [pc, #128]	@ (80015a8 <rtc_time_config+0xc8>)
 8001526:	f007 faab 	bl	8008a80 <siscanf>
 800152a:	4603      	mov	r3, r0
 800152c:	2b03      	cmp	r3, #3
 800152e:	d12b      	bne.n	8001588 <rtc_time_config+0xa8>
		// Validate the input
		if (hour >= 1 && hour <= 12 && min >= 0 && min <= 59 && sec >= 0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dd1f      	ble.n	8001576 <rtc_time_config+0x96>
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	dc1c      	bgt.n	8001576 <rtc_time_config+0x96>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db19      	blt.n	8001576 <rtc_time_config+0x96>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b3b      	cmp	r3, #59	@ 0x3b
 8001546:	dc16      	bgt.n	8001576 <rtc_time_config+0x96>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db13      	blt.n	8001576 <rtc_time_config+0x96>
				&& sec <= 59) {
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b3b      	cmp	r3, #59	@ 0x3b
 8001552:	dc10      	bgt.n	8001576 <rtc_time_config+0x96>
			time.Hours = (uint8_t) hour;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	763b      	strb	r3, [r7, #24]
			time.Minutes = (uint8_t) min;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	767b      	strb	r3, [r7, #25]
			time.Seconds = (uint8_t) sec;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	76bb      	strb	r3, [r7, #26]

			rtc_configure_time(&time);
 8001566:	f107 0318 	add.w	r3, r7, #24
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fb96 	bl	8000c9c <rtc_configure_time>
			// Print success message
			msg = "Time set successfully\n";
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <rtc_time_config+0xcc>)
 8001572:	617b      	str	r3, [r7, #20]
		}
	} else {
		// invalid entry
		xQueueSend(q_print, &msg_inv, portMAX_DELAY);
	}
}
 8001574:	e010      	b.n	8001598 <rtc_time_config+0xb8>
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <rtc_time_config+0xc4>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001580:	490b      	ldr	r1, [pc, #44]	@ (80015b0 <rtc_time_config+0xd0>)
 8001582:	f004 faf5 	bl	8005b70 <xQueueGenericSend>
}
 8001586:	e007      	b.n	8001598 <rtc_time_config+0xb8>
		xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <rtc_time_config+0xc4>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001592:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <rtc_time_config+0xd0>)
 8001594:	f004 faec 	bl	8005b70 <xQueueGenericSend>
}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	@ 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	08009e98 	.word	0x08009e98
 80015a4:	200000c0 	.word	0x200000c0
 80015a8:	08009ec8 	.word	0x08009ec8
 80015ac:	08009ed4 	.word	0x08009ed4
 80015b0:	20000020 	.word	0x20000020

080015b4 <rtc_date_config>:

void rtc_date_config(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef date;
	const char *msg = "Enter month:day:year (e.g., 1:1:2023)\n";
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <rtc_date_config+0xe4>)
 80015bc:	617b      	str	r3, [r7, #20]
	int month, day, year;
	uint32_t cmd_addr;
	command_t *cmd;

	xQueueSend(q_print, &msg, portMAX_DELAY);
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <rtc_date_config+0xe8>)
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	f107 0114 	add.w	r1, r7, #20
 80015c6:	2300      	movs	r3, #0
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015cc:	f004 fad0 	bl	8005b70 <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2000      	movs	r0, #0
 80015de:	f005 ff47 	bl	8007470 <xTaskGenericNotifyWait>
	cmd = (command_t*) cmd_addr;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	61fb      	str	r3, [r7, #28]

	if (sscanf((char*) cmd->payload, "%d:%d:%d", &month, &day, &year) == 3) {
 80015e6:	69f8      	ldr	r0, [r7, #28]
 80015e8:	f107 010c 	add.w	r1, r7, #12
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	460b      	mov	r3, r1
 80015f8:	4929      	ldr	r1, [pc, #164]	@ (80016a0 <rtc_date_config+0xec>)
 80015fa:	f007 fa41 	bl	8008a80 <siscanf>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b03      	cmp	r3, #3
 8001602:	d139      	bne.n	8001678 <rtc_date_config+0xc4>
		if (year >= 0 && year <= 100 && month >= 1 && month <= 12 && day >= 1
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db2a      	blt.n	8001660 <rtc_date_config+0xac>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b64      	cmp	r3, #100	@ 0x64
 800160e:	dc27      	bgt.n	8001660 <rtc_date_config+0xac>
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd24      	ble.n	8001660 <rtc_date_config+0xac>
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b0c      	cmp	r3, #12
 800161a:	dc21      	bgt.n	8001660 <rtc_date_config+0xac>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dd1e      	ble.n	8001660 <rtc_date_config+0xac>
				&& day <= 31) {
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b1f      	cmp	r3, #31
 8001626:	dc1b      	bgt.n	8001660 <rtc_date_config+0xac>
			date.Date = (uint8_t) day;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	76bb      	strb	r3, [r7, #26]
			date.Month = (uint8_t) month;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	767b      	strb	r3, [r7, #25]
			date.Year = (uint8_t) (year - 2000); // RTC typically uses years since 2000
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3330      	adds	r3, #48	@ 0x30
 800163a:	b2db      	uxtb	r3, r3
 800163c:	76fb      	strb	r3, [r7, #27]

			rtc_configure_date(&date);
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb1a 	bl	8000c7c <rtc_configure_date>
			msg = "Date set successfully\n";
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <rtc_date_config+0xf0>)
 800164a:	617b      	str	r3, [r7, #20]
			xQueueSend(q_print, &msg, portMAX_DELAY);
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <rtc_date_config+0xe8>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f107 0114 	add.w	r1, r7, #20
 8001654:	2300      	movs	r3, #0
 8001656:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800165a:	f004 fa89 	bl	8005b70 <xQueueGenericSend>
		}
	} else {
		msg = "Invalid input format. Please use MONTH:DAY:YEAR format.\n";
		xQueueSend(q_print, &msg, portMAX_DELAY);
	}
}
 800165e:	e016      	b.n	800168e <rtc_date_config+0xda>
			msg = "Invalid date range. Please enter valid values.\n";
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <rtc_date_config+0xf4>)
 8001662:	617b      	str	r3, [r7, #20]
			xQueueSend(q_print, &msg, portMAX_DELAY);
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <rtc_date_config+0xe8>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	f107 0114 	add.w	r1, r7, #20
 800166c:	2300      	movs	r3, #0
 800166e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001672:	f004 fa7d 	bl	8005b70 <xQueueGenericSend>
}
 8001676:	e00a      	b.n	800168e <rtc_date_config+0xda>
		msg = "Invalid input format. Please use MONTH:DAY:YEAR format.\n";
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <rtc_date_config+0xf8>)
 800167a:	617b      	str	r3, [r7, #20]
		xQueueSend(q_print, &msg, portMAX_DELAY);
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <rtc_date_config+0xe8>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f107 0114 	add.w	r1, r7, #20
 8001684:	2300      	movs	r3, #0
 8001686:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800168a:	f004 fa71 	bl	8005b70 <xQueueGenericSend>
}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	08009eec 	.word	0x08009eec
 800169c:	200000c0 	.word	0x200000c0
 80016a0:	08009ec8 	.word	0x08009ec8
 80016a4:	08009f14 	.word	0x08009f14
 80016a8:	08009f2c 	.word	0x08009f2c
 80016ac:	08009f5c 	.word	0x08009f5c

080016b0 <rtc_task>:

portTASK_FUNCTION( rtc_task, pvParameters ) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	@ 0x30
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char *msg_rtc1 = "========================\n"
 80016b8:	4b48      	ldr	r3, [pc, #288]	@ (80017dc <rtc_task+0x12c>)
 80016ba:	61bb      	str	r3, [r7, #24]
			"|         RTC          |\n"
			"========================\n";
	const char *msg_rtc2 = "Configure Time            ----> 0\n"
 80016bc:	4b48      	ldr	r3, [pc, #288]	@ (80017e0 <rtc_task+0x130>)
 80016be:	617b      	str	r3, [r7, #20]
			"Enable reporting          ----> 2\n"
			"Exit                      ----> 3\n"
			"Enter your choice here : ";

	while (1) {
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f005 fecf 	bl	8007470 <xTaskGenericNotifyWait>

		// Show the RTC menu
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 80016d2:	4b44      	ldr	r3, [pc, #272]	@ (80017e4 <rtc_task+0x134>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	f107 0118 	add.w	r1, r7, #24
 80016da:	2300      	movs	r3, #0
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016e0:	f004 fa46 	bl	8005b70 <xQueueGenericSend>
		show_time_date();
 80016e4:	f7ff faf2 	bl	8000ccc <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 80016e8:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <rtc_task+0x134>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 0114 	add.w	r1, r7, #20
 80016f0:	2300      	movs	r3, #0
 80016f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016f6:	f004 fa3b 	bl	8005b70 <xQueueGenericSend>

		/*Wait for command notification (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f005 feb1 	bl	8007470 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24

		if (cmd->len == 1) {
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d14a      	bne.n	80017b0 <rtc_task+0x100>
			option = cmd->payload[0] - '0';
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b30      	subs	r3, #48	@ 0x30
 8001720:	623b      	str	r3, [r7, #32]
			switch (option) {
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d02b      	beq.n	8001780 <rtc_task+0xd0>
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	2b02      	cmp	r3, #2
 800172c:	dc37      	bgt.n	800179e <rtc_task+0xee>
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <rtc_task+0x8c>
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d011      	beq.n	800175e <rtc_task+0xae>
 800173a:	e030      	b.n	800179e <rtc_task+0xee>
			case 0:
				xQueueSend(q_print, &(char* ) { "Configure time\n" },
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <rtc_task+0x134>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <rtc_task+0x138>)
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	f107 0110 	add.w	r1, r7, #16
 8001748:	2300      	movs	r3, #0
 800174a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800174e:	f004 fa0f 	bl	8005b70 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcTimeConfig;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <rtc_task+0x13c>)
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
				rtc_time_config();
 8001758:	f7ff fec2 	bl	80014e0 <rtc_time_config>
				break;
 800175c:	e031      	b.n	80017c2 <rtc_task+0x112>
			case 1:
				xQueueSend(q_print, &(char* ) { "Configure Date\n" },
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <rtc_task+0x134>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <rtc_task+0x140>)
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	f107 010c 	add.w	r1, r7, #12
 800176a:	2300      	movs	r3, #0
 800176c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001770:	f004 f9fe 	bl	8005b70 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcDateConfig;
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <rtc_task+0x13c>)
 8001776:	2204      	movs	r2, #4
 8001778:	701a      	strb	r2, [r3, #0]
				rtc_date_config();
 800177a:	f7ff ff1b 	bl	80015b4 <rtc_date_config>
				break;
 800177e:	e020      	b.n	80017c2 <rtc_task+0x112>
			case 2: /*implement exit */
				xQueueSend(q_print, &(char* ) { "Enable export time\n" },
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <rtc_task+0x134>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <rtc_task+0x144>)
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	f107 0108 	add.w	r1, r7, #8
 800178c:	2300      	movs	r3, #0
 800178e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001792:	f004 f9ed 	bl	8005b70 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcReport;
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <rtc_task+0x13c>)
 8001798:	2205      	movs	r2, #5
 800179a:	701a      	strb	r2, [r3, #0]

				break;
 800179c:	e011      	b.n	80017c2 <rtc_task+0x112>
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <rtc_task+0x134>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a8:	4913      	ldr	r1, [pc, #76]	@ (80017f8 <rtc_task+0x148>)
 80017aa:	f004 f9e1 	bl	8005b70 <xQueueGenericSend>
 80017ae:	e787      	b.n	80016c0 <rtc_task+0x10>
				continue;
			}
		} else {
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <rtc_task+0x134>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ba:	490f      	ldr	r1, [pc, #60]	@ (80017f8 <rtc_task+0x148>)
 80017bc:	f004 f9d8 	bl	8005b70 <xQueueGenericSend>
			continue;
 80017c0:	e00b      	b.n	80017da <rtc_task+0x12a>
		}

		/* update state variable */
		curr_state = sMainMenu;
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <rtc_task+0x13c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <rtc_task+0x14c>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2300      	movs	r3, #0
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	f005 fecb 	bl	8007570 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017da:	e771      	b.n	80016c0 <rtc_task+0x10>
 80017dc:	08009f98 	.word	0x08009f98
 80017e0:	08009fe4 	.word	0x08009fe4
 80017e4:	200000c0 	.word	0x200000c0
 80017e8:	0800a088 	.word	0x0800a088
 80017ec:	20000282 	.word	0x20000282
 80017f0:	0800a098 	.word	0x0800a098
 80017f4:	0800a0a8 	.word	0x0800a0a8
 80017f8:	20000020 	.word	0x20000020
 80017fc:	200000a4 	.word	0x200000a4

08001800 <led_task>:
	}
}

portTASK_FUNCTION( led_task, pvParameters ) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char *msg_led = "========================\n"
 8001808:	4b3e      	ldr	r3, [pc, #248]	@ (8001904 <led_task+0x104>)
 800180a:	60fb      	str	r3, [r7, #12]
			"========================\n"
			"(none,e1,e2,e3,e4)\n"
			"Enter your choice here : ";
	while (1) {
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800180c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2000      	movs	r0, #0
 800181a:	f005 fe29 	bl	8007470 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 800181e:	4b3a      	ldr	r3, [pc, #232]	@ (8001908 <led_task+0x108>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f107 010c 	add.w	r1, r7, #12
 8001826:	2300      	movs	r3, #0
 8001828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800182c:	f004 f9a0 	bl	8005b70 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2000      	movs	r0, #0
 8001840:	f005 fe16 	bl	8007470 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	617b      	str	r3, [r7, #20]

		if (cmd->len <= 4) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d843      	bhi.n	80018d8 <led_task+0xd8>
			if (!strcmp((char*) cmd->payload, "none"))
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	492e      	ldr	r1, [pc, #184]	@ (800190c <led_task+0x10c>)
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fccb 	bl	80001f0 <strcmp>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <led_task+0x66>
				led_effect_stop();
 8001860:	f7ff fdfa 	bl	8001458 <led_effect_stop>
 8001864:	e040      	b.n	80018e8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e1"))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4929      	ldr	r1, [pc, #164]	@ (8001910 <led_task+0x110>)
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fcc0 	bl	80001f0 <strcmp>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d103      	bne.n	800187e <led_task+0x7e>
				led_effect(1);
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff fe00 	bl	800147c <led_effect>
 800187c:	e034      	b.n	80018e8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e2"))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	4924      	ldr	r1, [pc, #144]	@ (8001914 <led_task+0x114>)
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fcb4 	bl	80001f0 <strcmp>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <led_task+0x96>
				led_effect(2);
 800188e:	2002      	movs	r0, #2
 8001890:	f7ff fdf4 	bl	800147c <led_effect>
 8001894:	e028      	b.n	80018e8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e3"))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	491f      	ldr	r1, [pc, #124]	@ (8001918 <led_task+0x118>)
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fca8 	bl	80001f0 <strcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <led_task+0xae>
				led_effect(3);
 80018a6:	2003      	movs	r0, #3
 80018a8:	f7ff fde8 	bl	800147c <led_effect>
 80018ac:	e01c      	b.n	80018e8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e4"))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	491a      	ldr	r1, [pc, #104]	@ (800191c <led_task+0x11c>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fc9c 	bl	80001f0 <strcmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <led_task+0xc6>
				led_effect(4);
 80018be:	2004      	movs	r0, #4
 80018c0:	f7ff fddc 	bl	800147c <led_effect>
 80018c4:	e010      	b.n	80018e8 <led_task+0xe8>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY); /*print invalid message */
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <led_task+0x108>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018d0:	4913      	ldr	r1, [pc, #76]	@ (8001920 <led_task+0x120>)
 80018d2:	f004 f94d 	bl	8005b70 <xQueueGenericSend>
 80018d6:	e007      	b.n	80018e8 <led_task+0xe8>
		} else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <led_task+0x108>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018e2:	490f      	ldr	r1, [pc, #60]	@ (8001920 <led_task+0x120>)
 80018e4:	f004 f944 	bl	8005b70 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <led_task+0x124>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <led_task+0x128>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	f005 fe38 	bl	8007570 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001900:	e784      	b.n	800180c <led_task+0xc>
 8001902:	bf00      	nop
 8001904:	0800a0bc 	.word	0x0800a0bc
 8001908:	200000c0 	.word	0x200000c0
 800190c:	0800a134 	.word	0x0800a134
 8001910:	0800a13c 	.word	0x0800a13c
 8001914:	0800a140 	.word	0x0800a140
 8001918:	0800a144 	.word	0x0800a144
 800191c:	0800a148 	.word	0x0800a148
 8001920:	20000020 	.word	0x20000020
 8001924:	20000282 	.word	0x20000282
 8001928:	200000a4 	.word	0x200000a4

0800192c <dma_task>:
	}
}

portTASK_FUNCTION( dma_task, pvParameters ) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char *msg_dma = "========================\n"
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <dma_task+0xc4>)
 8001936:	613b      	str	r3, [r7, #16]
			"========================\n"
			"Enter a string here : ";

	while (1) {
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2000      	movs	r0, #0
 8001946:	f005 fd93 	bl	8007470 <xTaskGenericNotifyWait>

		xQueueSend(q_print, &msg_dma, portMAX_DELAY);
 800194a:	4b2a      	ldr	r3, [pc, #168]	@ (80019f4 <dma_task+0xc8>)
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f107 0110 	add.w	r1, r7, #16
 8001952:	2300      	movs	r3, #0
 8001954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001958:	f004 f90a 	bl	8005b70 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2000      	movs	r0, #0
 800196c:	f005 fd80 	bl	8007470 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	61bb      	str	r3, [r7, #24]

		HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t) (cmd->payload),
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	4619      	mov	r1, r3
 8001978:	4a1f      	ldr	r2, [pc, #124]	@ (80019f8 <dma_task+0xcc>)
 800197a:	230a      	movs	r3, #10
 800197c:	481f      	ldr	r0, [pc, #124]	@ (80019fc <dma_task+0xd0>)
 800197e:	f000 fa65 	bl	8001e4c <HAL_DMA_Start>
				(uint32_t) (Buffer_Dest), 10);
		while (HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0,
 8001982:	e000      	b.n	8001986 <dma_task+0x5a>
				HAL_DMA_FULL_TRANSFER, 100) != HAL_OK) {
			__NOP();
 8001984:	bf00      	nop
		while (HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0,
 8001986:	2264      	movs	r2, #100	@ 0x64
 8001988:	2100      	movs	r1, #0
 800198a:	481c      	ldr	r0, [pc, #112]	@ (80019fc <dma_task+0xd0>)
 800198c:	f000 fb2b 	bl	8001fe6 <HAL_DMA_PollForTransfer>
 8001990:	4603      	mov	r3, r0
				HAL_DMA_FULL_TRANSFER, 100) != HAL_OK) {
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f6      	bne.n	8001984 <dma_task+0x58>
		}

		char *msg_error = "DMA error\n";
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <dma_task+0xd4>)
 8001998:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 10; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e016      	b.n	80019ce <dma_task+0xa2>
			if (cmd->payload[i] != Buffer_Dest[i]) {
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4913      	ldr	r1, [pc, #76]	@ (80019f8 <dma_task+0xcc>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d009      	beq.n	80019c8 <dma_task+0x9c>
				xQueueSend(q_print, &msg_error, portMAX_DELAY);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <dma_task+0xc8>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	f107 010c 	add.w	r1, r7, #12
 80019bc:	2300      	movs	r3, #0
 80019be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c2:	f004 f8d5 	bl	8005b70 <xQueueGenericSend>
				break;
 80019c6:	e005      	b.n	80019d4 <dma_task+0xa8>
		for (int i = 0; i < 10; i++) {
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	dde5      	ble.n	80019a0 <dma_task+0x74>
			}
		}

		/* update state variable */
		curr_state = sMainMenu;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <dma_task+0xd8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <dma_task+0xdc>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	f005 fdc2 	bl	8007570 <xTaskGenericNotify>
	while (1) {
 80019ec:	e7a4      	b.n	8001938 <dma_task+0xc>
 80019ee:	bf00      	nop
 80019f0:	0800a14c 	.word	0x0800a14c
 80019f4:	200000c0 	.word	0x200000c0
 80019f8:	20000278 	.word	0x20000278
 80019fc:	20000178 	.word	0x20000178
 8001a00:	0800a1b0 	.word	0x0800a1b0
 8001a04:	20000282 	.word	0x20000282
 8001a08:	200000a4 	.word	0x200000a4

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a10:	f7ff fba6 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f007 f85b 	bl	8008af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7fe fdaf 	bl	80005a0 <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001a50:	0800a360 	.word	0x0800a360
  ldr r2, =_sbss
 8001a54:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001a58:	20013174 	.word	0x20013174

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <HAL_Init+0x40>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_Init+0x40>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <HAL_Init+0x40>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f8fc 	bl	8001c86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f7ff fa84 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff f986 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000028 	.word	0x20000028
 8001ac8:	20000284 	.word	0x20000284

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000284 	.word	0x20000284

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000028 	.word	0x20000028

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff4c 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cae:	f7ff ff61 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	6978      	ldr	r0, [r7, #20]
 8001cba:	f7ff ffb1 	bl	8001c20 <NVIC_EncodePriority>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff80 	bl	8001bcc <__NVIC_SetPriority>
}
 8001ccc:	bf00      	nop
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff54 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fee6 	bl	8001acc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e099      	b.n	8001e40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	e00f      	b.n	8001d4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2e:	f7ff fecd 	bl	8001acc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d908      	bls.n	8001d4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e078      	b.n	8001e40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e8      	bne.n	8001d2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_DMA_Init+0x158>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	4313      	orrs	r3, r2
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d117      	bne.n	8001e12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fa39 	bl	800226c <DMA_CheckFifoParam>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e016      	b.n	8001e40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f9f0 	bl	8002200 <DMA_CalcBaseAndBitshift>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	223f      	movs	r2, #63	@ 0x3f
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	f010803f 	.word	0xf010803f

08001e4c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Start+0x20>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e026      	b.n	8001eba <HAL_DMA_Start+0x6e>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d115      	bne.n	8001eac <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f985 	bl	80021a4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e005      	b.n	8001eb8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff fdfc 	bl	8001acc <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d008      	beq.n	8001ef4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2280      	movs	r2, #128	@ 0x80
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e052      	b.n	8001f9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0216 	bic.w	r2, r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <HAL_DMA_Abort+0x62>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	e013      	b.n	8001f6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f46:	f7ff fdc1 	bl	8001acc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d90c      	bls.n	8001f6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e015      	b.n	8001f9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e4      	bne.n	8001f46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	223f      	movs	r2, #63	@ 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2280      	movs	r2, #128	@ 0x80
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e00c      	b.n	8001fda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b08a      	sub	sp, #40	@ 0x28
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8001ff8:	f7ff fd68 	bl	8001acc <HAL_GetTick>
 8001ffc:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d008      	beq.n	800201c <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0bf      	b.n	800219c <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0b2      	b.n	800219c <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2220      	movs	r2, #32
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
 8002048:	e005      	b.n	8002056 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	2210      	movs	r2, #16
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205a:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002062:	e05a      	b.n	800211a <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800206a:	d017      	beq.n	800209c <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <HAL_DMA_PollForTransfer+0x9c>
 8002072:	f7ff fd2b 	bl	8001acc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	d20c      	bcs.n	800209c <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e07f      	b.n	800219c <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2208      	movs	r2, #8
 80020a8:	409a      	lsls	r2, r3
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	2208      	movs	r2, #8
 80020c4:	409a      	lsls	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	2201      	movs	r2, #1
 80020d0:	409a      	lsls	r2, r3
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	2201      	movs	r2, #1
 80020ec:	409a      	lsls	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f6:	2204      	movs	r2, #4
 80020f8:	409a      	lsls	r2, r3
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	2204      	movs	r2, #4
 8002114:	409a      	lsls	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_DMA_PollForTransfer+0x14a>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d099      	beq.n	8002064 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002134:	2b00      	cmp	r3, #0
 8002136:	d018      	beq.n	800216a <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff febc 	bl	8001ec2 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	2230      	movs	r2, #48	@ 0x30
 8002150:	409a      	lsls	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e018      	b.n	800219c <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10e      	bne.n	800218e <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	2230      	movs	r2, #48	@ 0x30
 8002176:	409a      	lsls	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800218c:	e005      	b.n	800219a <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002192:	2210      	movs	r2, #16
 8002194:	409a      	lsls	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800219a:	7ffb      	ldrb	r3, [r7, #31]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3728      	adds	r7, #40	@ 0x28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b40      	cmp	r3, #64	@ 0x40
 80021d0:	d108      	bne.n	80021e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e2:	e007      	b.n	80021f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3b10      	subs	r3, #16
 8002210:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <DMA_CalcBaseAndBitshift+0x64>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221a:	4a13      	ldr	r2, [pc, #76]	@ (8002268 <DMA_CalcBaseAndBitshift+0x68>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d909      	bls.n	8002242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002240:	e007      	b.n	8002252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	aaaaaaab 	.word	0xaaaaaaab
 8002268:	0800a1f8 	.word	0x0800a1f8

0800226c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11f      	bne.n	80022c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d856      	bhi.n	800233a <DMA_CheckFifoParam+0xce>
 800228c:	a201      	add	r2, pc, #4	@ (adr r2, 8002294 <DMA_CheckFifoParam+0x28>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022b7 	.word	0x080022b7
 800229c:	080022a5 	.word	0x080022a5
 80022a0:	0800233b 	.word	0x0800233b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d046      	beq.n	800233e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e043      	b.n	800233e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022be:	d140      	bne.n	8002342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c4:	e03d      	b.n	8002342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ce:	d121      	bne.n	8002314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d837      	bhi.n	8002346 <DMA_CheckFifoParam+0xda>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <DMA_CheckFifoParam+0x70>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022f3 	.word	0x080022f3
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002305 	.word	0x08002305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e030      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d025      	beq.n	800234a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002302:	e022      	b.n	800234a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800230c:	d11f      	bne.n	800234e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002312:	e01c      	b.n	800234e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d903      	bls.n	8002322 <DMA_CheckFifoParam+0xb6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002320:	e018      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      break;
 8002326:	e015      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00e      	beq.n	8002352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e00b      	b.n	8002352 <DMA_CheckFifoParam+0xe6>
      break;
 800233a:	bf00      	nop
 800233c:	e00a      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e008      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e006      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e004      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e002      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;   
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
    }
  } 
  
  return status; 
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	@ (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	@ (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	@ (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e267      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d075      	beq.n	8002776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800268a:	4b88      	ldr	r3, [pc, #544]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d00c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b85      	ldr	r3, [pc, #532]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d112      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a2:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	4b7e      	ldr	r3, [pc, #504]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d05b      	beq.n	8002774 <HAL_RCC_OscConfig+0x108>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d157      	bne.n	8002774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e242      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x74>
 80026d2:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a75      	ldr	r2, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xb0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x98>
 80026ea:	4b70      	ldr	r3, [pc, #448]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6f      	ldr	r2, [pc, #444]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6d      	ldr	r3, [pc, #436]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6c      	ldr	r2, [pc, #432]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xb0>
 8002704:	4b69      	ldr	r3, [pc, #420]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a68      	ldr	r2, [pc, #416]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b66      	ldr	r3, [pc, #408]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a65      	ldr	r2, [pc, #404]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800271a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f9d2 	bl	8001acc <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff f9ce 	bl	8001acc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	@ 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e207      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b5b      	ldr	r3, [pc, #364]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xc0>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff f9be 	bl	8001acc <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff f9ba 	bl	8001acc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	@ 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1f3      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b51      	ldr	r3, [pc, #324]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0xe8>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b44      	ldr	r3, [pc, #272]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x152>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1c7      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4937      	ldr	r1, [pc, #220]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x244>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff f973 	bl	8001acc <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff f96f 	bl	8001acc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1a8      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4925      	ldr	r1, [pc, #148]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <HAL_RCC_OscConfig+0x244>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff f952 	bl	8001acc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff f94e 	bl	8001acc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e187      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d036      	beq.n	80028c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_RCC_OscConfig+0x248>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7ff f932 	bl	8001acc <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7ff f92e 	bl	8001acc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e167      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_OscConfig+0x240>)
 8002880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x200>
 800288a:	e01b      	b.n	80028c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_RCC_OscConfig+0x248>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff f91b 	bl	8001acc <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	e00e      	b.n	80028b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289a:	f7ff f917 	bl	8001acc <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d907      	bls.n	80028b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e150      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470000 	.word	0x42470000
 80028b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	4b88      	ldr	r3, [pc, #544]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ea      	bne.n	800289a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8097 	beq.w	8002a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b81      	ldr	r3, [pc, #516]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b7d      	ldr	r3, [pc, #500]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	4a7c      	ldr	r2, [pc, #496]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	4b7a      	ldr	r3, [pc, #488]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b77      	ldr	r3, [pc, #476]	@ (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b74      	ldr	r3, [pc, #464]	@ (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a73      	ldr	r2, [pc, #460]	@ (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7ff f8d7 	bl	8001acc <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7ff f8d3 	bl	8001acc <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e10c      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x2ea>
 8002948:	4b64      	ldr	r3, [pc, #400]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a63      	ldr	r2, [pc, #396]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x324>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x30c>
 800295e:	4b5f      	ldr	r3, [pc, #380]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a5e      	ldr	r2, [pc, #376]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	4b5c      	ldr	r3, [pc, #368]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a5b      	ldr	r2, [pc, #364]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x324>
 8002978:	4b58      	ldr	r3, [pc, #352]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a57      	ldr	r2, [pc, #348]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	4b55      	ldr	r3, [pc, #340]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a54      	ldr	r2, [pc, #336]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7ff f898 	bl	8001acc <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7ff f894 	bl	8001acc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0cb      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	4b49      	ldr	r3, [pc, #292]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x334>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c4:	f7ff f882 	bl	8001acc <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7ff f87e 	bl	8001acc <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0b5      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	4b3e      	ldr	r3, [pc, #248]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b39      	ldr	r3, [pc, #228]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	4a38      	ldr	r2, [pc, #224]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a1 	beq.w	8002b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a0a:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d05c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d141      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ae4 <HAL_RCC_OscConfig+0x478>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff f852 	bl	8001acc <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff f84e 	bl	8001acc <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e087      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b27      	ldr	r3, [pc, #156]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	491b      	ldr	r1, [pc, #108]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x478>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff f827 	bl	8001acc <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7ff f823 	bl	8001acc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e05c      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x416>
 8002aa0:	e054      	b.n	8002b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <HAL_RCC_OscConfig+0x478>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f810 	bl	8001acc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7ff f80c 	bl	8001acc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e045      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_RCC_OscConfig+0x470>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x444>
 8002ace:	e03d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e038      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <HAL_RCC_OscConfig+0x4ec>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d028      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d121      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d11a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d111      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0cc      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b68      	ldr	r3, [pc, #416]	@ (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d90c      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b65      	ldr	r3, [pc, #404]	@ (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0b8      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb0:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc8:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	494d      	ldr	r1, [pc, #308]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d044      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d119      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e07f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e067      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b37      	ldr	r3, [pc, #220]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4934      	ldr	r1, [pc, #208]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe ff3e 	bl	8001acc <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7fe ff3a 	bl	8001acc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d20c      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b22      	ldr	r3, [pc, #136]	@ (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e032      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb0:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4916      	ldr	r1, [pc, #88]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	490e      	ldr	r1, [pc, #56]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce2:	f000 f821 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	490a      	ldr	r1, [pc, #40]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	5ccb      	ldrb	r3, [r1, r3]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f94a 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	0800a1e0 	.word	0x0800a1e0
 8002d20:	2000001c 	.word	0x2000001c
 8002d24:	20000024 	.word	0x20000024

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b090      	sub	sp, #64	@ 0x40
 8002d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d40:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x40>
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	f200 80a1 	bhi.w	8002e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x34>
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5a:	e09b      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x184>)
 8002d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d60:	e09b      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4b53      	ldr	r3, [pc, #332]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d66:	e098      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d90:	2100      	movs	r1, #0
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d94:	fb03 f201 	mul.w	r2, r3, r1
 8002d98:	2300      	movs	r3, #0
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a43      	ldr	r2, [pc, #268]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da2:	fba0 1202 	umull	r1, r2, r0, r2
 8002da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da8:	460a      	mov	r2, r1
 8002daa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dae:	4413      	add	r3, r2
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db4:	2200      	movs	r2, #0
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dc2:	f7fd fa75 	bl	80002b0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dce:	e053      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	617a      	str	r2, [r7, #20]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de2:	f04f 0b00 	mov.w	fp, #0
 8002de6:	4652      	mov	r2, sl
 8002de8:	465b      	mov	r3, fp
 8002dea:	f04f 0000 	mov.w	r0, #0
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df8:	0150      	lsls	r0, r2, #5
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002e02:	eb63 090b 	sbc.w	r9, r3, fp
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	00eb      	lsls	r3, r5, #3
 8002e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e30:	00e2      	lsls	r2, r4, #3
 8002e32:	4614      	mov	r4, r2
 8002e34:	461d      	mov	r5, r3
 8002e36:	eb14 030a 	adds.w	r3, r4, sl
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	eb45 030b 	adc.w	r3, r5, fp
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	028b      	lsls	r3, r1, #10
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e58:	4621      	mov	r1, r4
 8002e5a:	028a      	lsls	r2, r1, #10
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	2200      	movs	r2, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	60fa      	str	r2, [r7, #12]
 8002e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6c:	f7fd fa20 	bl	80002b0 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x184>)
 8002e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3740      	adds	r7, #64	@ 0x40
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	017d7840 	.word	0x017d7840

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	@ (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	2000001c 	.word	0x2000001c

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	@ (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	0800a1f0 	.word	0x0800a1f0

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffdc 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0b5b      	lsrs	r3, r3, #13
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	@ (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	0800a1f0 	.word	0x0800a1f0

08002f1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	220f      	movs	r2, #15
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f38:	4b0f      	ldr	r3, [pc, #60]	@ (8002f78 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f44:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <HAL_RCC_GetClockConfig+0x5c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_RCC_GetClockConfig+0x5c>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	08db      	lsrs	r3, r3, #3
 8002f56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <HAL_RCC_GetClockConfig+0x60>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0207 	and.w	r2, r3, #7
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d038      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa8:	4b68      	ldr	r3, [pc, #416]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fd8d 	bl	8001acc <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fb6:	f7fe fd89 	bl	8001acc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0bd      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc8:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	495a      	ldr	r1, [pc, #360]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fee:	4b57      	ldr	r3, [pc, #348]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fd6a 	bl	8001acc <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ffc:	f7fe fd66 	bl	8001acc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e09a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300e:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8083 	beq.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	4b48      	ldr	r3, [pc, #288]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	4a47      	ldr	r2, [pc, #284]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	@ 0x40
 8003038:	4b45      	ldr	r3, [pc, #276]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003044:	4b43      	ldr	r3, [pc, #268]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a42      	ldr	r2, [pc, #264]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800304a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003050:	f7fe fd3c 	bl	8001acc <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003058:	f7fe fd38 	bl	8001acc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e06c      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800306a:	4b3a      	ldr	r3, [pc, #232]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003076:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d02f      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d028      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003094:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800309c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800309e:	4b2e      	ldr	r3, [pc, #184]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030aa:	4a29      	ldr	r2, [pc, #164]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030b0:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d114      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fd06 	bl	8001acc <HAL_GetTick>
 80030c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	e00a      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fe fd02 	bl	8001acc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e034      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ee      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030f2:	d10d      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80030f4:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003108:	4911      	ldr	r1, [pc, #68]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003128:	4909      	ldr	r1, [pc, #36]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7d1a      	ldrb	r2, [r3, #20]
 800313e:	4b07      	ldr	r3, [pc, #28]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003140:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	42470068 	.word	0x42470068
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	42470e40 	.word	0x42470e40
 800315c:	424711e0 	.word	0x424711e0

08003160 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e073      	b.n	800325e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7f5b      	ldrb	r3, [r3, #29]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fe34 	bl	8000df4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d055      	beq.n	800324c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	22ca      	movs	r2, #202	@ 0xca
 80031a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2253      	movs	r2, #83	@ 0x53
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fa49 	bl	8003648 <RTC_EnterInitMode>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d12c      	bne.n	800321a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80031ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	041a      	lsls	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fa50 	bl	80036b6 <RTC_ExitInitMode>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d110      	bne.n	8003242 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	22ff      	movs	r2, #255	@ 0xff
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24
 800324a:	e001      	b.n	8003250 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	7f1b      	ldrb	r3, [r3, #28]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_RTC_SetTime+0x1c>
 800327e:	2302      	movs	r3, #2
 8003280:	e087      	b.n	8003392 <HAL_RTC_SetTime+0x12c>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2202      	movs	r2, #2
 800328c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d126      	bne.n	80032e2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fa27 	bl	8003700 <RTC_ByteToBcd2>
 80032b2:	4603      	mov	r3, r0
 80032b4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa20 	bl	8003700 <RTC_ByteToBcd2>
 80032c0:	4603      	mov	r3, r0
 80032c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032c4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	789b      	ldrb	r3, [r3, #2]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fa18 	bl	8003700 <RTC_ByteToBcd2>
 80032d0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	78db      	ldrb	r3, [r3, #3]
 80032da:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e018      	b.n	8003314 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003302:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003308:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	22ca      	movs	r2, #202	@ 0xca
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2253      	movs	r2, #83	@ 0x53
 8003322:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f98f 	bl	8003648 <RTC_EnterInitMode>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d120      	bne.n	8003376 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800333e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003342:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003352:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	431a      	orrs	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f9a2 	bl	80036b6 <RTC_ExitInitMode>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ff      	movs	r2, #255	@ 0xff
 8003388:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]

  return status;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
}
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd90      	pop	{r4, r7, pc}

0800339a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80033cc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80033d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0d9b      	lsrs	r3, r3, #22
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11a      	bne.n	800344c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f98e 	bl	800373c <RTC_Bcd2ToByte>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f985 	bl	800373c <RTC_Bcd2ToByte>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	789b      	ldrb	r3, [r3, #2]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f97c 	bl	800373c <RTC_Bcd2ToByte>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003456:	b590      	push	{r4, r7, lr}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	7f1b      	ldrb	r3, [r3, #28]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_RTC_SetDate+0x1c>
 800346e:	2302      	movs	r3, #2
 8003470:	e071      	b.n	8003556 <HAL_RTC_SetDate+0x100>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2202      	movs	r2, #2
 800347c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10e      	bne.n	80034a2 <HAL_RTC_SetDate+0x4c>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	f023 0310 	bic.w	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	330a      	adds	r3, #10
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11c      	bne.n	80034e2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	78db      	ldrb	r3, [r3, #3]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f927 	bl	8003700 <RTC_ByteToBcd2>
 80034b2:	4603      	mov	r3, r0
 80034b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f920 	bl	8003700 <RTC_ByteToBcd2>
 80034c0:	4603      	mov	r3, r0
 80034c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	789b      	ldrb	r3, [r3, #2]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f918 	bl	8003700 <RTC_ByteToBcd2>
 80034d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e00e      	b.n	8003500 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	78db      	ldrb	r3, [r3, #3]
 80034e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034ee:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	22ca      	movs	r2, #202	@ 0xca
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2253      	movs	r2, #83	@ 0x53
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f899 	bl	8003648 <RTC_EnterInitMode>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800352a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800352e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f8c0 	bl	80036b6 <RTC_ExitInitMode>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	22ff      	movs	r2, #255	@ 0xff
 800354c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]

  return status;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
}
 8003556:	4618      	mov	r0, r3
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}

0800355e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003578:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800357c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	0b5b      	lsrs	r3, r3, #13
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11a      	bne.n	80035f2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f8bb 	bl	800373c <RTC_Bcd2ToByte>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	785b      	ldrb	r3, [r3, #1]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f8b2 	bl	800373c <RTC_Bcd2ToByte>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f8a9 	bl	800373c <RTC_Bcd2ToByte>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0d      	ldr	r2, [pc, #52]	@ (8003644 <HAL_RTC_WaitForSynchro+0x48>)
 800360e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003610:	f7fe fa5c 	bl	8001acc <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003616:	e009      	b.n	800362c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003618:	f7fe fa58 	bl	8001acc <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003626:	d901      	bls.n	800362c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e007      	b.n	800363c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	00013f5f 	.word	0x00013f5f

08003648 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d122      	bne.n	80036ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003674:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003676:	f7fe fa29 	bl	8001acc <HAL_GetTick>
 800367a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800367c:	e00c      	b.n	8003698 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800367e:	f7fe fa25 	bl	8001acc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800368c:	d904      	bls.n	8003698 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2204      	movs	r2, #4
 8003692:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <RTC_EnterInitMode+0x64>
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d1e8      	bne.n	800367e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff8b 	bl	80035fc <HAL_RTC_WaitForSynchro>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800370e:	e005      	b.n	800371c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	3b0a      	subs	r3, #10
 800371a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	2b09      	cmp	r3, #9
 8003720:	d8f6      	bhi.n	8003710 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	b2da      	uxtb	r2, r3
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	4313      	orrs	r3, r2
 800372e:	b2db      	uxtb	r3, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4413      	add	r3, r2
 800376a:	b2db      	uxtb	r3, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fb54 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 fc3c 	bl	8004034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e044      	b.n	80038ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1e      	ldr	r2, [pc, #120]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385a:	d013      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x6c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d010      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	e007      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40014000 	.word	0x40014000

080038dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e041      	b.n	8003972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f839 	bl	800397a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f000 fb8a 	bl	8004034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_TIM_PWM_Start+0x24>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e022      	b.n	80039fa <HAL_TIM_PWM_Start+0x6a>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d109      	bne.n	80039ce <HAL_TIM_PWM_Start+0x3e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e015      	b.n	80039fa <HAL_TIM_PWM_Start+0x6a>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d109      	bne.n	80039e8 <HAL_TIM_PWM_Start+0x58>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	bf14      	ite	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	2300      	moveq	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e008      	b.n	80039fa <HAL_TIM_PWM_Start+0x6a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e068      	b.n	8003ad4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start+0x82>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a10:	e013      	b.n	8003a3a <HAL_TIM_PWM_Start+0xaa>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x92>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a20:	e00b      	b.n	8003a3a <HAL_TIM_PWM_Start+0xaa>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0xa2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a30:	e003      	b.n	8003a3a <HAL_TIM_PWM_Start+0xaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	6839      	ldr	r1, [r7, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fda8 	bl	8004598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <HAL_TIM_PWM_Start+0x14c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d107      	bne.n	8003a62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <HAL_TIM_PWM_Start+0x14c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x10e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a74:	d013      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x10e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ae0 <HAL_TIM_PWM_Start+0x150>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x10e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a17      	ldr	r2, [pc, #92]	@ (8003ae4 <HAL_TIM_PWM_Start+0x154>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x10e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ae8 <HAL_TIM_PWM_Start+0x158>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x10e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a14      	ldr	r2, [pc, #80]	@ (8003aec <HAL_TIM_PWM_Start+0x15c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d111      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d010      	beq.n	8003ad2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	e007      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40014000 	.word	0x40014000

08003af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d020      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01b      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0202 	mvn.w	r2, #2
 8003b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fa5b 	bl	8003ff6 <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa4d 	bl	8003fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fa5e 	bl	800400a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d020      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01b      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0204 	mvn.w	r2, #4
 8003b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa35 	bl	8003ff6 <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fa27 	bl	8003fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fa38 	bl	800400a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d020      	beq.n	8003bec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01b      	beq.n	8003bec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0208 	mvn.w	r2, #8
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa0f 	bl	8003ff6 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa01 	bl	8003fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fa12 	bl	800400a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d020      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01b      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0210 	mvn.w	r2, #16
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9e9 	bl	8003ff6 <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9db 	bl	8003fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f9ec 	bl	800400a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0201 	mvn.w	r2, #1
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fc fff8 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fd2a 	bl	80046d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f9bd 	bl	800401e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0220 	mvn.w	r2, #32
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fcfc 	bl	80046c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0ae      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	f200 809f 	bhi.w	8003e3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d39 	.word	0x08003d39
 8003d08:	08003e3d 	.word	0x08003e3d
 8003d0c:	08003e3d 	.word	0x08003e3d
 8003d10:	08003e3d 	.word	0x08003e3d
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003e3d 	.word	0x08003e3d
 8003d1c:	08003e3d 	.word	0x08003e3d
 8003d20:	08003e3d 	.word	0x08003e3d
 8003d24:	08003dbb 	.word	0x08003dbb
 8003d28:	08003e3d 	.word	0x08003e3d
 8003d2c:	08003e3d 	.word	0x08003e3d
 8003d30:	08003e3d 	.word	0x08003e3d
 8003d34:	08003dfb 	.word	0x08003dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fa04 	bl	800414c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0208 	orr.w	r2, r2, #8
 8003d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6999      	ldr	r1, [r3, #24]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	619a      	str	r2, [r3, #24]
      break;
 8003d76:	e064      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fa4a 	bl	8004218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6999      	ldr	r1, [r3, #24]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	021a      	lsls	r2, r3, #8
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	619a      	str	r2, [r3, #24]
      break;
 8003db8:	e043      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fa95 	bl	80042f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0208 	orr.w	r2, r2, #8
 8003dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0204 	bic.w	r2, r2, #4
 8003de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69d9      	ldr	r1, [r3, #28]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	61da      	str	r2, [r3, #28]
      break;
 8003df8:	e023      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fadf 	bl	80043c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69d9      	ldr	r1, [r3, #28]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	61da      	str	r2, [r3, #28]
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x1c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0b4      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x186>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea8:	d03e      	beq.n	8003f28 <HAL_TIM_ConfigClockSource+0xd4>
 8003eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eae:	f200 8087 	bhi.w	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	f000 8086 	beq.w	8003fc6 <HAL_TIM_ConfigClockSource+0x172>
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebe:	d87f      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b70      	cmp	r3, #112	@ 0x70
 8003ec2:	d01a      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xa6>
 8003ec4:	2b70      	cmp	r3, #112	@ 0x70
 8003ec6:	d87b      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b60      	cmp	r3, #96	@ 0x60
 8003eca:	d050      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x11a>
 8003ecc:	2b60      	cmp	r3, #96	@ 0x60
 8003ece:	d877      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b50      	cmp	r3, #80	@ 0x50
 8003ed2:	d03c      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xfa>
 8003ed4:	2b50      	cmp	r3, #80	@ 0x50
 8003ed6:	d873      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b40      	cmp	r3, #64	@ 0x40
 8003eda:	d058      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x13a>
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d86f      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b30      	cmp	r3, #48	@ 0x30
 8003ee2:	d064      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b30      	cmp	r3, #48	@ 0x30
 8003ee6:	d86b      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d060      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d867      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d05a      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003ef8:	e062      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	f000 fb25 	bl	8004558 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	609a      	str	r2, [r3, #8]
      break;
 8003f26:	e04f      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f38:	f000 fb0e 	bl	8004558 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f4a:	609a      	str	r2, [r3, #8]
      break;
 8003f4c:	e03c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 fa82 	bl	8004464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2150      	movs	r1, #80	@ 0x50
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fadb 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e02c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 faa1 	bl	80044c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2160      	movs	r1, #96	@ 0x60
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 facb 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e01c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 fa62 	bl	8004464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2140      	movs	r1, #64	@ 0x40
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fabb 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003fac:	e00c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 fab2 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003fbe:	e003      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc4:	e000      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3a      	ldr	r2, [pc, #232]	@ (8004130 <TIM_Base_SetConfig+0xfc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00f      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d00b      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a37      	ldr	r2, [pc, #220]	@ (8004134 <TIM_Base_SetConfig+0x100>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a36      	ldr	r2, [pc, #216]	@ (8004138 <TIM_Base_SetConfig+0x104>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a35      	ldr	r2, [pc, #212]	@ (800413c <TIM_Base_SetConfig+0x108>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <TIM_Base_SetConfig+0xfc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01b      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408c:	d017      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a28      	ldr	r2, [pc, #160]	@ (8004134 <TIM_Base_SetConfig+0x100>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a27      	ldr	r2, [pc, #156]	@ (8004138 <TIM_Base_SetConfig+0x104>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a26      	ldr	r2, [pc, #152]	@ (800413c <TIM_Base_SetConfig+0x108>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a25      	ldr	r2, [pc, #148]	@ (8004140 <TIM_Base_SetConfig+0x10c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <TIM_Base_SetConfig+0x110>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a23      	ldr	r2, [pc, #140]	@ (8004148 <TIM_Base_SetConfig+0x114>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004130 <TIM_Base_SetConfig+0xfc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  }
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800

0800414c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 0201 	bic.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0302 	bic.w	r3, r3, #2
 8004194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <TIM_OC1_SetConfig+0xc8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10c      	bne.n	80041c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0308 	bic.w	r3, r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0304 	bic.w	r3, r3, #4
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a13      	ldr	r2, [pc, #76]	@ (8004214 <TIM_OC1_SetConfig+0xc8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d111      	bne.n	80041ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40010000 	.word	0x40010000

08004218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f023 0210 	bic.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0320 	bic.w	r3, r3, #32
 8004262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1e      	ldr	r2, [pc, #120]	@ (80042ec <TIM_OC2_SetConfig+0xd4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a15      	ldr	r2, [pc, #84]	@ (80042ec <TIM_OC2_SetConfig+0xd4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d113      	bne.n	80042c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000

080042f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <TIM_OC3_SetConfig+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10d      	bne.n	800436a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <TIM_OC3_SetConfig+0xd0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	40010000 	.word	0x40010000

080043c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800440e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	031b      	lsls	r3, r3, #12
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a10      	ldr	r2, [pc, #64]	@ (8004460 <TIM_OC4_SetConfig+0x9c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000

08004464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0201 	bic.w	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800448e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 030a 	bic.w	r3, r3, #10
 80044a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b087      	sub	sp, #28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f023 0210 	bic.w	r2, r3, #16
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	031b      	lsls	r3, r3, #12
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	f043 0307 	orr.w	r3, r3, #7
 8004544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	021a      	lsls	r2, r3, #8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	431a      	orrs	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4313      	orrs	r3, r2
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2201      	movs	r2, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e050      	b.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1c      	ldr	r2, [pc, #112]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004648:	d013      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a18      	ldr	r2, [pc, #96]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a16      	ldr	r2, [pc, #88]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a15      	ldr	r2, [pc, #84]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a13      	ldr	r2, [pc, #76]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10c      	bne.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40014000 	.word	0x40014000

080046c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e042      	b.n	8004780 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fbf4 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	@ 0x24
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fdf3 	bl	8005318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d175      	bne.n	8004894 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Transmit+0x2c>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e06e      	b.n	8004896 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2221      	movs	r2, #33	@ 0x21
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fd f981 	bl	8001acc <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e0:	d108      	bne.n	80047f4 <HAL_UART_Transmit+0x6c>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e003      	b.n	80047fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047fc:	e02e      	b.n	800485c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	2180      	movs	r1, #128	@ 0x80
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fb55 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e03a      	b.n	8004896 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004834:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3302      	adds	r3, #2
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e007      	b.n	800484e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3301      	adds	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1cb      	bne.n	80047fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	2140      	movs	r1, #64	@ 0x40
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fb21 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	4613      	mov	r3, r2
 80048aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d121      	bne.n	80048fc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_UART_Transmit_IT+0x26>
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e01a      	b.n	80048fe <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	88fa      	ldrh	r2, [r7, #6]
 80048d2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2221      	movs	r2, #33	@ 0x21
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	4613      	mov	r3, r2
 8004916:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b20      	cmp	r3, #32
 8004922:	d112      	bne.n	800494a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_UART_Receive_IT+0x26>
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e00b      	b.n	800494c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	461a      	mov	r2, r3
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fb12 	bl	8004f6a <UART_Start_Receive_IT>
 8004946:	4603      	mov	r3, r0
 8004948:	e000      	b.n	800494c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b0ba      	sub	sp, #232	@ 0xe8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_UART_IRQHandler+0x66>
 80049a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fbf2 	bl	800519c <UART_Receive_IT>
      return;
 80049b8:	e25b      	b.n	8004e72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80de 	beq.w	8004b80 <HAL_UART_IRQHandler+0x22c>
 80049c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80d1 	beq.w	8004b80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_UART_IRQHandler+0xae>
 80049ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	f043 0201 	orr.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_UART_IRQHandler+0xd2>
 8004a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f043 0202 	orr.w	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_UART_IRQHandler+0xf6>
 8004a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d011      	beq.n	8004a7a <HAL_UART_IRQHandler+0x126>
 8004a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d105      	bne.n	8004a6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 81f2 	beq.w	8004e68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x14e>
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fb7d 	bl	800519c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b40      	cmp	r3, #64	@ 0x40
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <HAL_UART_IRQHandler+0x17a>
 8004ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04f      	beq.n	8004b6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa85 	bl	8004fde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d141      	bne.n	8004b66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3314      	adds	r3, #20
 8004b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1d9      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d34 <HAL_UART_IRQHandler+0x3e0>)
 8004b3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fa2d 	bl	8001fa2 <HAL_DMA_Abort_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	e00e      	b.n	8004b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f994 	bl	8004e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00a      	b.n	8004b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f990 	bl	8004e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e006      	b.n	8004b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f98c 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b7a:	e175      	b.n	8004e68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	bf00      	nop
    return;
 8004b7e:	e173      	b.n	8004e68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f040 814f 	bne.w	8004e28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8148 	beq.w	8004e28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8141 	beq.w	8004e28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc6:	2b40      	cmp	r3, #64	@ 0x40
 8004bc8:	f040 80b6 	bne.w	8004d38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8145 	beq.w	8004e6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bea:	429a      	cmp	r2, r3
 8004bec:	f080 813e 	bcs.w	8004e6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c02:	f000 8088 	beq.w	8004d16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1d9      	bne.n	8004c06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e1      	bne.n	8004c52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3314      	adds	r3, #20
 8004c94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3314      	adds	r3, #20
 8004cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e3      	bne.n	8004c8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004cf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e3      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd f8d6 	bl	8001ec2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8b7 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d32:	e09b      	b.n	8004e6c <HAL_UART_IRQHandler+0x518>
 8004d34:	080050a5 	.word	0x080050a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 808e 	beq.w	8004e70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8089 	beq.w	8004e70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	623b      	str	r3, [r7, #32]
   return(result);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e3      	bne.n	8004d96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e00:	61fa      	str	r2, [r7, #28]
 8004e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e3      	bne.n	8004ddc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f83d 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e26:	e023      	b.n	8004e70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <HAL_UART_IRQHandler+0x4f4>
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f943 	bl	80050cc <UART_Transmit_IT>
    return;
 8004e46:	e014      	b.n	8004e72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00e      	beq.n	8004e72 <HAL_UART_IRQHandler+0x51e>
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f983 	bl	800516c <UART_EndTransmit_IT>
    return;
 8004e66:	e004      	b.n	8004e72 <HAL_UART_IRQHandler+0x51e>
    return;
 8004e68:	bf00      	nop
 8004e6a:	e002      	b.n	8004e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e6c:	bf00      	nop
 8004e6e:	e000      	b.n	8004e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e70:	bf00      	nop
  }
}
 8004e72:	37e8      	adds	r7, #232	@ 0xe8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec8:	e03b      	b.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ed0:	d037      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fc fdfb 	bl	8001acc <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e03a      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d023      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b80      	cmp	r3, #128	@ 0x80
 8004efe:	d020      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b40      	cmp	r3, #64	@ 0x40
 8004f04:	d01d      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d116      	bne.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f857 	bl	8004fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2208      	movs	r2, #8
 8004f34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e00f      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d0b4      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2222      	movs	r2, #34	@ 0x22
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0220 	orr.w	r2, r2, #32
 8004fce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b095      	sub	sp, #84	@ 0x54
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005006:	643a      	str	r2, [r7, #64]	@ 0x40
 8005008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800500c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e5      	bne.n	8004fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	61fb      	str	r3, [r7, #28]
   return(result);
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800503a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	2b01      	cmp	r3, #1
 8005054:	d119      	bne.n	800508a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60bb      	str	r3, [r7, #8]
   return(result);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	647b      	str	r3, [r7, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005076:	61ba      	str	r2, [r7, #24]
 8005078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	613b      	str	r3, [r7, #16]
   return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005098:	bf00      	nop
 800509a:	3754      	adds	r7, #84	@ 0x54
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fee4 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b21      	cmp	r3, #33	@ 0x21
 80050de:	d13e      	bne.n	800515e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e8:	d114      	bne.n	8005114 <UART_Transmit_IT+0x48>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d110      	bne.n	8005114 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005106:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]
 8005112:	e008      	b.n	8005126 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6211      	str	r1, [r2, #32]
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4619      	mov	r1, r3
 8005134:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e000      	b.n	8005160 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800515e:	2302      	movs	r3, #2
  }
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005182:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fe73 	bl	8004e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	@ 0x30
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b22      	cmp	r3, #34	@ 0x22
 80051ae:	f040 80ae 	bne.w	800530e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ba:	d117      	bne.n	80051ec <UART_Receive_IT+0x50>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d113      	bne.n	80051ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80051ea:	e026      	b.n	800523a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fe:	d007      	beq.n	8005210 <UART_Receive_IT+0x74>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <UART_Receive_IT+0x82>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e008      	b.n	8005230 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800522a:	b2da      	uxtb	r2, r3
 800522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29b      	uxth	r3, r3
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4619      	mov	r1, r3
 8005248:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800524a:	2b00      	cmp	r3, #0
 800524c:	d15d      	bne.n	800530a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0220 	bic.w	r2, r2, #32
 800525c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800526c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	2b01      	cmp	r3, #1
 8005292:	d135      	bne.n	8005300 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	613b      	str	r3, [r7, #16]
   return(result);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f023 0310 	bic.w	r3, r3, #16
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ba:	623a      	str	r2, [r7, #32]
 80052bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d10a      	bne.n	80052f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fdd1 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
 80052fe:	e002      	b.n	8005306 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fb fc19 	bl	8000b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e002      	b.n	8005310 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3730      	adds	r7, #48	@ 0x30
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b0c0      	sub	sp, #256	@ 0x100
 800531e:	af00      	add	r7, sp, #0
 8005320:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	68d9      	ldr	r1, [r3, #12]
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	ea40 0301 	orr.w	r3, r0, r1
 8005340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005370:	f021 010c 	bic.w	r1, r1, #12
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800537e:	430b      	orrs	r3, r1
 8005380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	6999      	ldr	r1, [r3, #24]
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	ea40 0301 	orr.w	r3, r0, r1
 800539e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b8f      	ldr	r3, [pc, #572]	@ (80055e4 <UART_SetConfig+0x2cc>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d005      	beq.n	80053b8 <UART_SetConfig+0xa0>
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b8d      	ldr	r3, [pc, #564]	@ (80055e8 <UART_SetConfig+0x2d0>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d104      	bne.n	80053c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fd fd9c 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80053bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053c0:	e003      	b.n	80053ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053c2:	f7fd fd83 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 80053c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d4:	f040 810c 	bne.w	80055f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053dc:	2200      	movs	r2, #0
 80053de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053ea:	4622      	mov	r2, r4
 80053ec:	462b      	mov	r3, r5
 80053ee:	1891      	adds	r1, r2, r2
 80053f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053f2:	415b      	adcs	r3, r3
 80053f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053fa:	4621      	mov	r1, r4
 80053fc:	eb12 0801 	adds.w	r8, r2, r1
 8005400:	4629      	mov	r1, r5
 8005402:	eb43 0901 	adc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005428:	462b      	mov	r3, r5
 800542a:	eb49 0303 	adc.w	r3, r9, r3
 800542e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800543e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005446:	460b      	mov	r3, r1
 8005448:	18db      	adds	r3, r3, r3
 800544a:	653b      	str	r3, [r7, #80]	@ 0x50
 800544c:	4613      	mov	r3, r2
 800544e:	eb42 0303 	adc.w	r3, r2, r3
 8005452:	657b      	str	r3, [r7, #84]	@ 0x54
 8005454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800545c:	f7fa ff28 	bl	80002b0 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4b61      	ldr	r3, [pc, #388]	@ (80055ec <UART_SetConfig+0x2d4>)
 8005466:	fba3 2302 	umull	r2, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	011c      	lsls	r4, r3, #4
 800546e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005478:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800547c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	1891      	adds	r1, r2, r2
 8005486:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005488:	415b      	adcs	r3, r3
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005490:	4641      	mov	r1, r8
 8005492:	eb12 0a01 	adds.w	sl, r2, r1
 8005496:	4649      	mov	r1, r9
 8005498:	eb43 0b01 	adc.w	fp, r3, r1
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b0:	4692      	mov	sl, r2
 80054b2:	469b      	mov	fp, r3
 80054b4:	4643      	mov	r3, r8
 80054b6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054be:	464b      	mov	r3, r9
 80054c0:	eb4b 0303 	adc.w	r3, fp, r3
 80054c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054dc:	460b      	mov	r3, r1
 80054de:	18db      	adds	r3, r3, r3
 80054e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054e2:	4613      	mov	r3, r2
 80054e4:	eb42 0303 	adc.w	r3, r2, r3
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054f2:	f7fa fedd 	bl	80002b0 <__aeabi_uldivmod>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ec <UART_SetConfig+0x2d4>)
 80054fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	2264      	movs	r2, #100	@ 0x64
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	1acb      	subs	r3, r1, r3
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005512:	4b36      	ldr	r3, [pc, #216]	@ (80055ec <UART_SetConfig+0x2d4>)
 8005514:	fba3 2302 	umull	r2, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005520:	441c      	add	r4, r3
 8005522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800552c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	1891      	adds	r1, r2, r2
 800553a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800553c:	415b      	adcs	r3, r3
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005544:	4641      	mov	r1, r8
 8005546:	1851      	adds	r1, r2, r1
 8005548:	6339      	str	r1, [r7, #48]	@ 0x30
 800554a:	4649      	mov	r1, r9
 800554c:	414b      	adcs	r3, r1
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800555c:	4659      	mov	r1, fp
 800555e:	00cb      	lsls	r3, r1, #3
 8005560:	4651      	mov	r1, sl
 8005562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005566:	4651      	mov	r1, sl
 8005568:	00ca      	lsls	r2, r1, #3
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	4603      	mov	r3, r0
 8005570:	4642      	mov	r2, r8
 8005572:	189b      	adds	r3, r3, r2
 8005574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005578:	464b      	mov	r3, r9
 800557a:	460a      	mov	r2, r1
 800557c:	eb42 0303 	adc.w	r3, r2, r3
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005590:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005598:	460b      	mov	r3, r1
 800559a:	18db      	adds	r3, r3, r3
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559e:	4613      	mov	r3, r2
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055ae:	f7fa fe7f 	bl	80002b0 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <UART_SetConfig+0x2d4>)
 80055b8:	fba3 1302 	umull	r1, r3, r3, r2
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	2164      	movs	r1, #100	@ 0x64
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	3332      	adds	r3, #50	@ 0x32
 80055ca:	4a08      	ldr	r2, [pc, #32]	@ (80055ec <UART_SetConfig+0x2d4>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 0207 	and.w	r2, r3, #7
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4422      	add	r2, r4
 80055de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e0:	e106      	b.n	80057f0 <UART_SetConfig+0x4d8>
 80055e2:	bf00      	nop
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40011400 	.word	0x40011400
 80055ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005602:	4642      	mov	r2, r8
 8005604:	464b      	mov	r3, r9
 8005606:	1891      	adds	r1, r2, r2
 8005608:	6239      	str	r1, [r7, #32]
 800560a:	415b      	adcs	r3, r3
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
 800560e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005612:	4641      	mov	r1, r8
 8005614:	1854      	adds	r4, r2, r1
 8005616:	4649      	mov	r1, r9
 8005618:	eb43 0501 	adc.w	r5, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	00eb      	lsls	r3, r5, #3
 8005626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562a:	00e2      	lsls	r2, r4, #3
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	4643      	mov	r3, r8
 8005632:	18e3      	adds	r3, r4, r3
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005638:	464b      	mov	r3, r9
 800563a:	eb45 0303 	adc.w	r3, r5, r3
 800563e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800564e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800565e:	4629      	mov	r1, r5
 8005660:	008b      	lsls	r3, r1, #2
 8005662:	4621      	mov	r1, r4
 8005664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005668:	4621      	mov	r1, r4
 800566a:	008a      	lsls	r2, r1, #2
 800566c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005670:	f7fa fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4b60      	ldr	r3, [pc, #384]	@ (80057fc <UART_SetConfig+0x4e4>)
 800567a:	fba3 2302 	umull	r2, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	011c      	lsls	r4, r3, #4
 8005682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800568c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005690:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	1891      	adds	r1, r2, r2
 800569a:	61b9      	str	r1, [r7, #24]
 800569c:	415b      	adcs	r3, r3
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a4:	4641      	mov	r1, r8
 80056a6:	1851      	adds	r1, r2, r1
 80056a8:	6139      	str	r1, [r7, #16]
 80056aa:	4649      	mov	r1, r9
 80056ac:	414b      	adcs	r3, r1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056bc:	4659      	mov	r1, fp
 80056be:	00cb      	lsls	r3, r1, #3
 80056c0:	4651      	mov	r1, sl
 80056c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c6:	4651      	mov	r1, sl
 80056c8:	00ca      	lsls	r2, r1, #3
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	4642      	mov	r2, r8
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056d8:	464b      	mov	r3, r9
 80056da:	460a      	mov	r2, r1
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056fc:	4649      	mov	r1, r9
 80056fe:	008b      	lsls	r3, r1, #2
 8005700:	4641      	mov	r1, r8
 8005702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005706:	4641      	mov	r1, r8
 8005708:	008a      	lsls	r2, r1, #2
 800570a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800570e:	f7fa fdcf 	bl	80002b0 <__aeabi_uldivmod>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4611      	mov	r1, r2
 8005718:	4b38      	ldr	r3, [pc, #224]	@ (80057fc <UART_SetConfig+0x4e4>)
 800571a:	fba3 2301 	umull	r2, r3, r3, r1
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	2264      	movs	r2, #100	@ 0x64
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	1acb      	subs	r3, r1, r3
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	3332      	adds	r3, #50	@ 0x32
 800572c:	4a33      	ldr	r2, [pc, #204]	@ (80057fc <UART_SetConfig+0x4e4>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005738:	441c      	add	r4, r3
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	2200      	movs	r2, #0
 8005740:	673b      	str	r3, [r7, #112]	@ 0x70
 8005742:	677a      	str	r2, [r7, #116]	@ 0x74
 8005744:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	1891      	adds	r1, r2, r2
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	415b      	adcs	r3, r3
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005758:	4641      	mov	r1, r8
 800575a:	1851      	adds	r1, r2, r1
 800575c:	6039      	str	r1, [r7, #0]
 800575e:	4649      	mov	r1, r9
 8005760:	414b      	adcs	r3, r1
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005770:	4659      	mov	r1, fp
 8005772:	00cb      	lsls	r3, r1, #3
 8005774:	4651      	mov	r1, sl
 8005776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577a:	4651      	mov	r1, sl
 800577c:	00ca      	lsls	r2, r1, #3
 800577e:	4610      	mov	r0, r2
 8005780:	4619      	mov	r1, r3
 8005782:	4603      	mov	r3, r0
 8005784:	4642      	mov	r2, r8
 8005786:	189b      	adds	r3, r3, r2
 8005788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800578a:	464b      	mov	r3, r9
 800578c:	460a      	mov	r2, r1
 800578e:	eb42 0303 	adc.w	r3, r2, r3
 8005792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	663b      	str	r3, [r7, #96]	@ 0x60
 800579e:	667a      	str	r2, [r7, #100]	@ 0x64
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057ac:	4649      	mov	r1, r9
 80057ae:	008b      	lsls	r3, r1, #2
 80057b0:	4641      	mov	r1, r8
 80057b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b6:	4641      	mov	r1, r8
 80057b8:	008a      	lsls	r2, r1, #2
 80057ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057be:	f7fa fd77 	bl	80002b0 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <UART_SetConfig+0x4e4>)
 80057c8:	fba3 1302 	umull	r1, r3, r3, r2
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	2164      	movs	r1, #100	@ 0x64
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	3332      	adds	r3, #50	@ 0x32
 80057da:	4a08      	ldr	r2, [pc, #32]	@ (80057fc <UART_SetConfig+0x4e4>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4422      	add	r2, r4
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057f6:	46bd      	mov	sp, r7
 80057f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fc:	51eb851f 	.word	0x51eb851f

08005800 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0208 	add.w	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005818:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f103 0208 	add.w	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f103 0208 	add.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058b8:	d103      	bne.n	80058c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e00c      	b.n	80058dc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3308      	adds	r3, #8
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e002      	b.n	80058d0 <vListInsert+0x2e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d2f6      	bcs.n	80058ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6892      	ldr	r2, [r2, #8]
 800592a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d103      	bne.n	8005948 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005972:	2301      	movs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <xQueueGenericReset+0x30>
        __asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
    }
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d05d      	beq.n	8005a5a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d059      	beq.n	8005a5a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	2100      	movs	r1, #0
 80059b0:	fba3 2302 	umull	r2, r3, r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d000      	beq.n	80059ba <xQueueGenericReset+0x52>
 80059b8:	2101      	movs	r1, #1
 80059ba:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d14c      	bne.n	8005a5a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80059c0:	f002 fd44 	bl	800844c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059cc:	6939      	ldr	r1, [r7, #16]
 80059ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	441a      	add	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2200      	movs	r2, #0
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	3b01      	subs	r3, #1
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	441a      	add	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	22ff      	movs	r2, #255	@ 0xff
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	22ff      	movs	r2, #255	@ 0xff
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d114      	bne.n	8005a40 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01a      	beq.n	8005a54 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	3310      	adds	r3, #16
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fa76 	bl	8006f14 <xTaskRemoveFromEventList>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005a2e:	4b16      	ldr	r3, [pc, #88]	@ (8005a88 <xQueueGenericReset+0x120>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e009      	b.n	8005a54 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3310      	adds	r3, #16
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fedb 	bl	8005800 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3324      	adds	r3, #36	@ 0x24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fed6 	bl	8005800 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005a54:	f002 fd2c 	bl	80084b0 <vPortExitCritical>
 8005a58:	e001      	b.n	8005a5e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xQueueGenericReset+0x114>
        __asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60bb      	str	r3, [r7, #8]
    }
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005a7c:	697b      	ldr	r3, [r7, #20]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d02e      	beq.n	8005b02 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d000      	beq.n	8005ab4 <xQueueGenericCreate+0x28>
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d123      	bne.n	8005b02 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005ac2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005ac6:	d81c      	bhi.n	8005b02 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	3350      	adds	r3, #80	@ 0x50
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 fde2 	bl	80086a0 <pvPortMalloc>
 8005adc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01d      	beq.n	8005b20 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3350      	adds	r3, #80	@ 0x50
 8005aec:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aee:	79fa      	ldrb	r2, [r7, #7]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f815 	bl	8005b2a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005b00:	e00e      	b.n	8005b20 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <xQueueGenericCreate+0x94>
        __asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	613b      	str	r3, [r7, #16]
    }
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	e7fd      	b.n	8005b1c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005b20:	69fb      	ldr	r3, [r7, #28]
    }
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	e002      	b.n	8005b4c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b58:	2101      	movs	r1, #1
 8005b5a:	69b8      	ldr	r0, [r7, #24]
 8005b5c:	f7ff ff04 	bl	8005968 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	@ 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xQueueGenericSend+0x34>
        __asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <xQueueGenericSend+0x42>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericSend+0x46>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericSend+0x48>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <xQueueGenericSend+0x64>
        __asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d103      	bne.n	8005be2 <xQueueGenericSend+0x72>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <xQueueGenericSend+0x76>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <xQueueGenericSend+0x78>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <xQueueGenericSend+0x94>
        __asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
    }
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c04:	f001 fb9a 	bl	800733c <xTaskGetSchedulerState>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <xQueueGenericSend+0xa4>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <xQueueGenericSend+0xa8>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <xQueueGenericSend+0xaa>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <xQueueGenericSend+0xc6>
        __asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	61fb      	str	r3, [r7, #28]
    }
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005c36:	f002 fc09 	bl	800844c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <xQueueGenericSend+0xdc>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d129      	bne.n	8005ca0 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c52:	f000 fae0 	bl	8006216 <prvCopyDataToQueue>
 8005c56:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	3324      	adds	r3, #36	@ 0x24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f955 	bl	8006f14 <xTaskRemoveFromEventList>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005c70:	4b3f      	ldr	r3, [pc, #252]	@ (8005d70 <xQueueGenericSend+0x200>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	e00a      	b.n	8005c98 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005c88:	4b39      	ldr	r3, [pc, #228]	@ (8005d70 <xQueueGenericSend+0x200>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005c98:	f002 fc0a 	bl	80084b0 <vPortExitCritical>
                return pdPASS;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e063      	b.n	8005d68 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005ca6:	f002 fc03 	bl	80084b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e05c      	b.n	8005d68 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 fa03 	bl	80070c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005cc2:	f002 fbf5 	bl	80084b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005cc6:	f000 fe1f 	bl	8006908 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005cca:	f002 fbbf 	bl	800844c <vPortEnterCritical>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd4:	b25b      	sxtb	r3, r3
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cda:	d103      	bne.n	8005ce4 <xQueueGenericSend+0x174>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cea:	b25b      	sxtb	r3, r3
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf0:	d103      	bne.n	8005cfa <xQueueGenericSend+0x18a>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cfa:	f002 fbd9 	bl	80084b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 f9f2 	bl	80070f0 <xTaskCheckForTimeOut>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d124      	bne.n	8005d5c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d14:	f000 fb77 	bl	8006406 <prvIsQueueFull>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	3310      	adds	r3, #16
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4611      	mov	r1, r2
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f888 	bl	8006e3c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d2e:	f000 fb02 	bl	8006336 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005d32:	f000 fdf7 	bl	8006924 <xTaskResumeAll>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f47f af7c 	bne.w	8005c36 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d70 <xQueueGenericSend+0x200>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	e772      	b.n	8005c36 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d52:	f000 faf0 	bl	8006336 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005d56:	f000 fde5 	bl	8006924 <xTaskResumeAll>
 8005d5a:	e76c      	b.n	8005c36 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005d5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d5e:	f000 faea 	bl	8006336 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005d62:	f000 fddf 	bl	8006924 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005d66:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3738      	adds	r7, #56	@ 0x38
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b092      	sub	sp, #72	@ 0x48
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8005d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSendFromISR+0x3e>
 8005daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <xQueueGenericSendFromISR+0x42>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericSendFromISR+0x44>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d103      	bne.n	8005de2 <xQueueGenericSendFromISR+0x6e>
 8005dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <xQueueGenericSendFromISR+0x72>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueGenericSendFromISR+0x74>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10b      	bne.n	8005e04 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e04:	f002 fc0a 	bl	800861c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005e08:	f3ef 8211 	mrs	r2, BASEPRI
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	623a      	str	r2, [r7, #32]
 8005e1e:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005e20:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <xQueueGenericSendFromISR+0xc2>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d147      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e3c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005e4c:	f000 f9e3 	bl	8006216 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005e50:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e58:	d112      	bne.n	8005e80 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d02e      	beq.n	8005ec0 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e64:	3324      	adds	r3, #36	@ 0x24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f854 	bl	8006f14 <xTaskRemoveFromEventList>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d026      	beq.n	8005ec0 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d023      	beq.n	8005ec0 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e01f      	b.n	8005ec0 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005e80:	f000 fe5c 	bl	8006b3c <uxTaskGetNumberOfTasks>
 8005e84:	6338      	str	r0, [r7, #48]	@ 0x30
 8005e86:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d917      	bls.n	8005ec0 <xQueueGenericSendFromISR+0x14c>
 8005e90:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005e94:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e96:	d10b      	bne.n	8005eb0 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61bb      	str	r3, [r7, #24]
    }
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xQueueGenericSendFromISR+0x138>
 8005eb0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	b25a      	sxtb	r2, r3
 8005eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8005ec4:	e001      	b.n	8005eca <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ecc:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005ed4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3748      	adds	r7, #72	@ 0x48
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	@ 0x30
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10b      	bne.n	8005f12 <xQueueReceive+0x32>
        __asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	623b      	str	r3, [r7, #32]
    }
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	e7fd      	b.n	8005f0e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <xQueueReceive+0x40>
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <xQueueReceive+0x44>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <xQueueReceive+0x46>
 8005f24:	2300      	movs	r3, #0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <xQueueReceive+0x62>
        __asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61fb      	str	r3, [r7, #28]
    }
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f42:	f001 f9fb 	bl	800733c <xTaskGetSchedulerState>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <xQueueReceive+0x72>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <xQueueReceive+0x76>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <xQueueReceive+0x78>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10b      	bne.n	8005f74 <xQueueReceive+0x94>
        __asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61bb      	str	r3, [r7, #24]
    }
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	e7fd      	b.n	8005f70 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f74:	f002 fa6a 	bl	800844c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01f      	beq.n	8005fc4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f88:	f000 f9af 	bl	80062ea <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	1e5a      	subs	r2, r3, #1
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00f      	beq.n	8005fbc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9e:	3310      	adds	r3, #16
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 ffb7 	bl	8006f14 <xTaskRemoveFromEventList>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005fac:	4b3c      	ldr	r3, [pc, #240]	@ (80060a0 <xQueueReceive+0x1c0>)
 8005fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005fbc:	f002 fa78 	bl	80084b0 <vPortExitCritical>
                return pdPASS;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e069      	b.n	8006098 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005fca:	f002 fa71 	bl	80084b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e062      	b.n	8006098 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005fd8:	f107 0310 	add.w	r3, r7, #16
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 f871 	bl	80070c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005fe6:	f002 fa63 	bl	80084b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005fea:	f000 fc8d 	bl	8006908 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005fee:	f002 fa2d 	bl	800844c <vPortEnterCritical>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ff8:	b25b      	sxtb	r3, r3
 8005ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ffe:	d103      	bne.n	8006008 <xQueueReceive+0x128>
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800600e:	b25b      	sxtb	r3, r3
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006014:	d103      	bne.n	800601e <xQueueReceive+0x13e>
 8006016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800601e:	f002 fa47 	bl	80084b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006022:	1d3a      	adds	r2, r7, #4
 8006024:	f107 0310 	add.w	r3, r7, #16
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f001 f860 	bl	80070f0 <xTaskCheckForTimeOut>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d123      	bne.n	800607e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006038:	f000 f9cf 	bl	80063da <prvIsQueueEmpty>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d017      	beq.n	8006072 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	3324      	adds	r3, #36	@ 0x24
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fef6 	bl	8006e3c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006052:	f000 f970 	bl	8006336 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006056:	f000 fc65 	bl	8006924 <xTaskResumeAll>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d189      	bne.n	8005f74 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8006060:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <xQueueReceive+0x1c0>)
 8006062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	e780      	b.n	8005f74 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006074:	f000 f95f 	bl	8006336 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006078:	f000 fc54 	bl	8006924 <xTaskResumeAll>
 800607c:	e77a      	b.n	8005f74 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800607e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006080:	f000 f959 	bl	8006336 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006084:	f000 fc4e 	bl	8006924 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800608a:	f000 f9a6 	bl	80063da <prvIsQueueEmpty>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f43f af6f 	beq.w	8005f74 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006096:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006098:	4618      	mov	r0, r3
 800609a:	3730      	adds	r7, #48	@ 0x30
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b090      	sub	sp, #64	@ 0x40
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	e7fd      	b.n	80060ce <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <xQueueReceiveFromISR+0x3c>
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <xQueueReceiveFromISR+0x40>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <xQueueReceiveFromISR+0x42>
 80060e4:	2300      	movs	r3, #0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	623b      	str	r3, [r7, #32]
    }
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006102:	f002 fa8b 	bl	800861c <vPortValidateInterruptPriority>
        __asm volatile
 8006106:	f3ef 8211 	mrs	r2, BASEPRI
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	61fa      	str	r2, [r7, #28]
 800611c:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800611e:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	2b00      	cmp	r3, #0
 800612c:	d047      	beq.n	80061be <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800613c:	f000 f8d5 	bl	80062ea <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	1e5a      	subs	r2, r3, #1
 8006144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006148:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006150:	d112      	bne.n	8006178 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d02e      	beq.n	80061b8 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615c:	3310      	adds	r3, #16
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fed8 	bl	8006f14 <xTaskRemoveFromEventList>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d026      	beq.n	80061b8 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d023      	beq.n	80061b8 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e01f      	b.n	80061b8 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8006178:	f000 fce0 	bl	8006b3c <uxTaskGetNumberOfTasks>
 800617c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800617e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006184:	429a      	cmp	r2, r3
 8006186:	d917      	bls.n	80061b8 <xQueueReceiveFromISR+0x114>
 8006188:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800618c:	2b7f      	cmp	r3, #127	@ 0x7f
 800618e:	d10b      	bne.n	80061a8 <xQueueReceiveFromISR+0x104>
        __asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	617b      	str	r3, [r7, #20]
    }
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xQueueReceiveFromISR+0x100>
 80061a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	b25a      	sxtb	r2, r3
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80061b8:	2301      	movs	r3, #1
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061bc:	e001      	b.n	80061c2 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	613b      	str	r3, [r7, #16]
        __asm volatile
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f383 8811 	msr	BASEPRI, r3
    }
 80061cc:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80061ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3740      	adds	r7, #64	@ 0x40
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <uxQueueMessagesWaiting+0x26>
        __asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60bb      	str	r3, [r7, #8]
    }
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80061fe:	f002 f925 	bl	800844c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8006208:	f002 f952 	bl	80084b0 <vPortExitCritical>

    return uxReturn;
 800620c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d14d      	bne.n	80062d8 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4618      	mov	r0, r3
 8006242:	f001 f899 	bl	8007378 <xTaskPriorityDisinherit>
 8006246:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
 800624e:	e043      	b.n	80062d8 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d119      	bne.n	800628a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6858      	ldr	r0, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	461a      	mov	r2, r3
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	f002 fc6d 	bl	8008b40 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626e:	441a      	add	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	429a      	cmp	r2, r3
 800627e:	d32b      	bcc.n	80062d8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	e026      	b.n	80062d8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68d8      	ldr	r0, [r3, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	461a      	mov	r2, r3
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	f002 fc53 	bl	8008b40 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	425b      	negs	r3, r3
 80062a4:	441a      	add	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d207      	bcs.n	80062c6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	425b      	negs	r3, r3
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d105      	bne.n	80062d8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80062e0:	697b      	ldr	r3, [r7, #20]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d018      	beq.n	800632e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	d303      	bcc.n	800631e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68d9      	ldr	r1, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	461a      	mov	r2, r3
 8006328:	6838      	ldr	r0, [r7, #0]
 800632a:	f002 fc09 	bl	8008b40 <memcpy>
    }
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800633e:	f002 f885 	bl	800844c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006348:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800634a:	e011      	b.n	8006370 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d012      	beq.n	800637a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3324      	adds	r3, #36	@ 0x24
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fddb 	bl	8006f14 <xTaskRemoveFromEventList>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006364:	f000 ff2c 	bl	80071c0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	3b01      	subs	r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dce9      	bgt.n	800634c <prvUnlockQueue+0x16>
 8006378:	e000      	b.n	800637c <prvUnlockQueue+0x46>
                    break;
 800637a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	22ff      	movs	r2, #255	@ 0xff
 8006380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006384:	f002 f894 	bl	80084b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006388:	f002 f860 	bl	800844c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006392:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006394:	e011      	b.n	80063ba <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d012      	beq.n	80063c4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3310      	adds	r3, #16
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fdb6 	bl	8006f14 <xTaskRemoveFromEventList>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80063ae:	f000 ff07 	bl	80071c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	dce9      	bgt.n	8006396 <prvUnlockQueue+0x60>
 80063c2:	e000      	b.n	80063c6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80063c4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	22ff      	movs	r2, #255	@ 0xff
 80063ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80063ce:	f002 f86f 	bl	80084b0 <vPortExitCritical>
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80063e2:	f002 f833 	bl	800844c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80063ee:	2301      	movs	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e001      	b.n	80063f8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80063f8:	f002 f85a 	bl	80084b0 <vPortExitCritical>

    return xReturn;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800640e:	f002 f81d 	bl	800844c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	429a      	cmp	r2, r3
 800641c:	d102      	bne.n	8006424 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e001      	b.n	8006428 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006428:	f002 f842 	bl	80084b0 <vPortExitCritical>

    return xReturn;
 800642c:	68fb      	ldr	r3, [r7, #12]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006436:	b480      	push	{r7}
 8006438:	b087      	sub	sp, #28
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10b      	bne.n	8006460 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
    }
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	e7fd      	b.n	800645c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	429a      	cmp	r2, r3
 800646a:	d102      	bne.n	8006472 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e001      	b.n	8006476 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006476:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006478:	4618      	mov	r0, r3
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
    }
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d024      	beq.n	8006500 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e01e      	b.n	80064fa <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80064bc:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <vQueueAddToRegistry+0x9c>)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d105      	bne.n	80064d8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4a13      	ldr	r2, [pc, #76]	@ (8006520 <vQueueAddToRegistry+0x9c>)
 80064d2:	4413      	add	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
                    break;
 80064d6:	e013      	b.n	8006500 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <vQueueAddToRegistry+0x70>
 80064de:	4a10      	ldr	r2, [pc, #64]	@ (8006520 <vQueueAddToRegistry+0x9c>)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <vQueueAddToRegistry+0x9c>)
 80064f0:	4413      	add	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	3301      	adds	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	d9dd      	bls.n	80064bc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000288 	.word	0x20000288

08006524 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006534:	f001 ff8a 	bl	800844c <vPortEnterCritical>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800653e:	b25b      	sxtb	r3, r3
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006544:	d103      	bne.n	800654e <vQueueWaitForMessageRestricted+0x2a>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006554:	b25b      	sxtb	r3, r3
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800655a:	d103      	bne.n	8006564 <vQueueWaitForMessageRestricted+0x40>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006564:	f001 ffa4 	bl	80084b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	3324      	adds	r3, #36	@ 0x24
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fc85 	bl	8006e88 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800657e:	6978      	ldr	r0, [r7, #20]
 8006580:	f7ff fed9 	bl	8006336 <prvUnlockQueue>
    }
 8006584:	bf00      	nop
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	@ 0x30
 8006590:	af04      	add	r7, sp, #16
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 f87d 	bl	80086a0 <pvPortMalloc>
 80065a6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d013      	beq.n	80065d6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ae:	2058      	movs	r0, #88	@ 0x58
 80065b0:	f002 f876 	bl	80086a0 <pvPortMalloc>
 80065b4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80065bc:	2258      	movs	r2, #88	@ 0x58
 80065be:	2100      	movs	r1, #0
 80065c0:	69f8      	ldr	r0, [r7, #28]
 80065c2:	f002 fa89 	bl	8008ad8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80065cc:	e005      	b.n	80065da <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80065ce:	6978      	ldr	r0, [r7, #20]
 80065d0:	f002 f922 	bl	8008818 <vPortFree>
 80065d4:	e001      	b.n	80065da <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	2300      	movs	r3, #0
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	9302      	str	r3, [sp, #8]
 80065ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f80e 	bl	8006618 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80065fc:	69f8      	ldr	r0, [r7, #28]
 80065fe:	f000 f89b 	bl	8006738 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006602:	2301      	movs	r3, #1
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	e002      	b.n	800660e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800660c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800660e:	69bb      	ldr	r3, [r7, #24]
    }
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	461a      	mov	r2, r3
 8006630:	21a5      	movs	r1, #165	@ 0xa5
 8006632:	f002 fa51 	bl	8008ad8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006640:	3b01      	subs	r3, #1
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	617b      	str	r3, [r7, #20]
    }
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01e      	beq.n	80066b6 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	e012      	b.n	80066a4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	7819      	ldrb	r1, [r3, #0]
 8006686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	3334      	adds	r3, #52	@ 0x34
 800668e:	460a      	mov	r2, r1
 8006690:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d006      	beq.n	80066ac <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3301      	adds	r3, #1
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	2b09      	cmp	r3, #9
 80066a8:	d9e9      	bls.n	800667e <prvInitialiseNewTask+0x66>
 80066aa:	e000      	b.n	80066ae <prvInitialiseNewTask+0x96>
            {
                break;
 80066ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d90b      	bls.n	80066d4 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	613b      	str	r3, [r7, #16]
    }
 80066ce:	bf00      	nop
 80066d0:	bf00      	nop
 80066d2:	e7fd      	b.n	80066d0 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d901      	bls.n	80066de <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066da:	2304      	movs	r3, #4
 80066dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80066e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	3304      	adds	r3, #4
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff f8a6 	bl	8005840 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	3318      	adds	r3, #24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff f8a1 	bl	8005840 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006702:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	f1c3 0205 	rsb	r2, r3, #5
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006712:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	69b8      	ldr	r0, [r7, #24]
 800671a:	f001 fd63 	bl	80081e4 <pxPortInitialiseStack>
 800671e:	4602      	mov	r2, r0
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800672a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006730:	bf00      	nop
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006740:	f001 fe84 	bl	800844c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006744:	4b40      	ldr	r3, [pc, #256]	@ (8006848 <prvAddNewTaskToReadyList+0x110>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	4a3f      	ldr	r2, [pc, #252]	@ (8006848 <prvAddNewTaskToReadyList+0x110>)
 800674c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800674e:	4b3f      	ldr	r3, [pc, #252]	@ (800684c <prvAddNewTaskToReadyList+0x114>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006756:	4a3d      	ldr	r2, [pc, #244]	@ (800684c <prvAddNewTaskToReadyList+0x114>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800675c:	4b3a      	ldr	r3, [pc, #232]	@ (8006848 <prvAddNewTaskToReadyList+0x110>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d110      	bne.n	8006786 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006764:	f000 fd50 	bl	8007208 <prvInitialiseTaskLists>
 8006768:	e00d      	b.n	8006786 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800676a:	4b39      	ldr	r3, [pc, #228]	@ (8006850 <prvAddNewTaskToReadyList+0x118>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006772:	4b36      	ldr	r3, [pc, #216]	@ (800684c <prvAddNewTaskToReadyList+0x114>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	429a      	cmp	r2, r3
 800677e:	d802      	bhi.n	8006786 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006780:	4a32      	ldr	r2, [pc, #200]	@ (800684c <prvAddNewTaskToReadyList+0x114>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006786:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <prvAddNewTaskToReadyList+0x11c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a31      	ldr	r2, [pc, #196]	@ (8006854 <prvAddNewTaskToReadyList+0x11c>)
 800678e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006790:	4b30      	ldr	r3, [pc, #192]	@ (8006854 <prvAddNewTaskToReadyList+0x11c>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	2201      	movs	r2, #1
 800679e:	409a      	lsls	r2, r3
 80067a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006858 <prvAddNewTaskToReadyList+0x120>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006858 <prvAddNewTaskToReadyList+0x120>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ae:	492b      	ldr	r1, [pc, #172]	@ (800685c <prvAddNewTaskToReadyList+0x124>)
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	3304      	adds	r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	609a      	str	r2, [r3, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	3204      	adds	r2, #4
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4a1b      	ldr	r2, [pc, #108]	@ (800685c <prvAddNewTaskToReadyList+0x124>)
 80067ee:	441a      	add	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	615a      	str	r2, [r3, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f8:	4918      	ldr	r1, [pc, #96]	@ (800685c <prvAddNewTaskToReadyList+0x124>)
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	4814      	ldr	r0, [pc, #80]	@ (800685c <prvAddNewTaskToReadyList+0x124>)
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4403      	add	r3, r0
 8006814:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006816:	f001 fe4b 	bl	80084b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <prvAddNewTaskToReadyList+0x118>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00e      	beq.n	8006840 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006822:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <prvAddNewTaskToReadyList+0x114>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682c:	429a      	cmp	r2, r3
 800682e:	d207      	bcs.n	8006840 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006830:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <prvAddNewTaskToReadyList+0x128>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	200003a0 	.word	0x200003a0
 800684c:	200002c8 	.word	0x200002c8
 8006850:	200003ac 	.word	0x200003ac
 8006854:	200003bc 	.word	0x200003bc
 8006858:	200003a8 	.word	0x200003a8
 800685c:	200002cc 	.word	0x200002cc
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800686a:	4b20      	ldr	r3, [pc, #128]	@ (80068ec <vTaskStartScheduler+0x88>)
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	2300      	movs	r3, #0
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	2282      	movs	r2, #130	@ 0x82
 8006876:	491e      	ldr	r1, [pc, #120]	@ (80068f0 <vTaskStartScheduler+0x8c>)
 8006878:	481e      	ldr	r0, [pc, #120]	@ (80068f4 <vTaskStartScheduler+0x90>)
 800687a:	f7ff fe87 	bl	800658c <xTaskCreate>
 800687e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d102      	bne.n	800688c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006886:	f001 f979 	bl	8007b7c <xTimerCreateTimerTask>
 800688a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d116      	bne.n	80068c0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	60bb      	str	r3, [r7, #8]
    }
 80068a4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80068a6:	4b14      	ldr	r3, [pc, #80]	@ (80068f8 <vTaskStartScheduler+0x94>)
 80068a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80068ae:	4b13      	ldr	r3, [pc, #76]	@ (80068fc <vTaskStartScheduler+0x98>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068b4:	4b12      	ldr	r3, [pc, #72]	@ (8006900 <vTaskStartScheduler+0x9c>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80068ba:	f001 fd23 	bl	8008304 <xPortStartScheduler>
 80068be:	e00f      	b.n	80068e0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068c6:	d10b      	bne.n	80068e0 <vTaskStartScheduler+0x7c>
        __asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	607b      	str	r3, [r7, #4]
    }
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	e7fd      	b.n	80068dc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80068e0:	4b08      	ldr	r3, [pc, #32]	@ (8006904 <vTaskStartScheduler+0xa0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200003c4 	.word	0x200003c4
 80068f0:	0800a1bc 	.word	0x0800a1bc
 80068f4:	080071d9 	.word	0x080071d9
 80068f8:	200003c0 	.word	0x200003c0
 80068fc:	200003ac 	.word	0x200003ac
 8006900:	200003a4 	.word	0x200003a4
 8006904:	2000002c 	.word	0x2000002c

08006908 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <vTaskSuspendAll+0x18>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a03      	ldr	r2, [pc, #12]	@ (8006920 <vTaskSuspendAll+0x18>)
 8006914:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	200003c8 	.word	0x200003c8

08006924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006932:	4b71      	ldr	r3, [pc, #452]	@ (8006af8 <xTaskResumeAll+0x1d4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <xTaskResumeAll+0x2e>
        __asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	607b      	str	r3, [r7, #4]
    }
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006952:	f001 fd7b 	bl	800844c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006956:	4b68      	ldr	r3, [pc, #416]	@ (8006af8 <xTaskResumeAll+0x1d4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	4a66      	ldr	r2, [pc, #408]	@ (8006af8 <xTaskResumeAll+0x1d4>)
 800695e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006960:	4b65      	ldr	r3, [pc, #404]	@ (8006af8 <xTaskResumeAll+0x1d4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 80c0 	bne.w	8006aea <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800696a:	4b64      	ldr	r3, [pc, #400]	@ (8006afc <xTaskResumeAll+0x1d8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80bb 	beq.w	8006aea <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006974:	e08a      	b.n	8006a8c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006976:	4b62      	ldr	r3, [pc, #392]	@ (8006b00 <xTaskResumeAll+0x1dc>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	6a12      	ldr	r2, [r2, #32]
 800698c:	609a      	str	r2, [r3, #8]
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	69d2      	ldr	r2, [r2, #28]
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3318      	adds	r3, #24
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d103      	bne.n	80069ac <xTaskResumeAll+0x88>
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2200      	movs	r2, #0
 80069b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	1e5a      	subs	r2, r3, #1
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	68d2      	ldr	r2, [r2, #12]
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	6892      	ldr	r2, [r2, #8]
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3304      	adds	r3, #4
 80069de:	429a      	cmp	r2, r3
 80069e0:	d103      	bne.n	80069ea <xTaskResumeAll+0xc6>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	2201      	movs	r2, #1
 8006a00:	409a      	lsls	r2, r3
 8006a02:	4b40      	ldr	r3, [pc, #256]	@ (8006b04 <xTaskResumeAll+0x1e0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	4a3e      	ldr	r2, [pc, #248]	@ (8006b04 <xTaskResumeAll+0x1e0>)
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a10:	493d      	ldr	r1, [pc, #244]	@ (8006b08 <xTaskResumeAll+0x1e4>)
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	3204      	adds	r2, #4
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	1d1a      	adds	r2, r3, #4
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	609a      	str	r2, [r3, #8]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8006b08 <xTaskResumeAll+0x1e4>)
 8006a50:	441a      	add	r2, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	615a      	str	r2, [r3, #20]
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5a:	492b      	ldr	r1, [pc, #172]	@ (8006b08 <xTaskResumeAll+0x1e4>)
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	4827      	ldr	r0, [pc, #156]	@ (8006b08 <xTaskResumeAll+0x1e4>)
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4403      	add	r3, r0
 8006a76:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7c:	4b23      	ldr	r3, [pc, #140]	@ (8006b0c <xTaskResumeAll+0x1e8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d302      	bcc.n	8006a8c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8006a86:	4b22      	ldr	r3, [pc, #136]	@ (8006b10 <xTaskResumeAll+0x1ec>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b00 <xTaskResumeAll+0x1dc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f47f af70 	bne.w	8006976 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006a9c:	f000 fc32 	bl	8007304 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b14 <xTaskResumeAll+0x1f0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006aac:	f000 f852 	bl	8006b54 <xTaskIncrementTick>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8006ab6:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <xTaskResumeAll+0x1ec>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f1      	bne.n	8006aac <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8006ac8:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <xTaskResumeAll+0x1f0>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006ace:	4b10      	ldr	r3, [pc, #64]	@ (8006b10 <xTaskResumeAll+0x1ec>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006ada:	4b0f      	ldr	r3, [pc, #60]	@ (8006b18 <xTaskResumeAll+0x1f4>)
 8006adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006aea:	f001 fce1 	bl	80084b0 <vPortExitCritical>

    return xAlreadyYielded;
 8006aee:	69bb      	ldr	r3, [r7, #24]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	200003c8 	.word	0x200003c8
 8006afc:	200003a0 	.word	0x200003a0
 8006b00:	20000360 	.word	0x20000360
 8006b04:	200003a8 	.word	0x200003a8
 8006b08:	200002cc 	.word	0x200002cc
 8006b0c:	200002c8 	.word	0x200002c8
 8006b10:	200003b4 	.word	0x200003b4
 8006b14:	200003b0 	.word	0x200003b0
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <xTaskGetTickCount+0x1c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006b28:	687b      	ldr	r3, [r7, #4]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	200003a4 	.word	0x200003a4

08006b3c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006b40:	4b03      	ldr	r3, [pc, #12]	@ (8006b50 <uxTaskGetNumberOfTasks+0x14>)
 8006b42:	681b      	ldr	r3, [r3, #0]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	200003a0 	.word	0x200003a0

08006b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d58 <xTaskIncrementTick+0x204>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 80ed 	bne.w	8006d42 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b68:	4b7c      	ldr	r3, [pc, #496]	@ (8006d5c <xTaskIncrementTick+0x208>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006b70:	4a7a      	ldr	r2, [pc, #488]	@ (8006d5c <xTaskIncrementTick+0x208>)
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d121      	bne.n	8006bc0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006b7c:	4b78      	ldr	r3, [pc, #480]	@ (8006d60 <xTaskIncrementTick+0x20c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <xTaskIncrementTick+0x4a>
        __asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	607b      	str	r3, [r7, #4]
    }
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xTaskIncrementTick+0x46>
 8006b9e:	4b70      	ldr	r3, [pc, #448]	@ (8006d60 <xTaskIncrementTick+0x20c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d64 <xTaskIncrementTick+0x210>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8006d60 <xTaskIncrementTick+0x20c>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	4a6d      	ldr	r2, [pc, #436]	@ (8006d64 <xTaskIncrementTick+0x210>)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d68 <xTaskIncrementTick+0x214>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8006d68 <xTaskIncrementTick+0x214>)
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	f000 fba2 	bl	8007304 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8006d6c <xTaskIncrementTick+0x218>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a3a      	ldr	r2, [r7, #32]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	f0c0 80a6 	bcc.w	8006d18 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bcc:	4b64      	ldr	r3, [pc, #400]	@ (8006d60 <xTaskIncrementTick+0x20c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd6:	4b65      	ldr	r3, [pc, #404]	@ (8006d6c <xTaskIncrementTick+0x218>)
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bdc:	601a      	str	r2, [r3, #0]
                    break;
 8006bde:	e09b      	b.n	8006d18 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be0:	4b5f      	ldr	r3, [pc, #380]	@ (8006d60 <xTaskIncrementTick+0x20c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d203      	bcs.n	8006c00 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8006d6c <xTaskIncrementTick+0x218>)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006bfe:	e08b      	b.n	8006d18 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	68d2      	ldr	r2, [r2, #12]
 8006c0e:	609a      	str	r2, [r3, #8]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	3304      	adds	r3, #4
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d103      	bne.n	8006c2e <xTaskIncrementTick+0xda>
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2200      	movs	r2, #0
 8006c32:	615a      	str	r2, [r3, #20]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	1e5a      	subs	r2, r3, #1
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01e      	beq.n	8006c84 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	6a12      	ldr	r2, [r2, #32]
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	69d2      	ldr	r2, [r2, #28]
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	3318      	adds	r3, #24
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d103      	bne.n	8006c74 <xTaskIncrementTick+0x120>
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	6a1a      	ldr	r2, [r3, #32]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2200      	movs	r2, #0
 8006c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c88:	2201      	movs	r2, #1
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	4b38      	ldr	r3, [pc, #224]	@ (8006d70 <xTaskIncrementTick+0x21c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	4a37      	ldr	r2, [pc, #220]	@ (8006d70 <xTaskIncrementTick+0x21c>)
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4936      	ldr	r1, [pc, #216]	@ (8006d74 <xTaskIncrementTick+0x220>)
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60bb      	str	r3, [r7, #8]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	609a      	str	r2, [r3, #8]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	3204      	adds	r2, #4
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	1d1a      	adds	r2, r3, #4
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4a26      	ldr	r2, [pc, #152]	@ (8006d74 <xTaskIncrementTick+0x220>)
 8006cda:	441a      	add	r2, r3
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	615a      	str	r2, [r3, #20]
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce4:	4923      	ldr	r1, [pc, #140]	@ (8006d74 <xTaskIncrementTick+0x220>)
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	1c59      	adds	r1, r3, #1
 8006cf4:	481f      	ldr	r0, [pc, #124]	@ (8006d74 <xTaskIncrementTick+0x220>)
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4403      	add	r3, r0
 8006d00:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d06:	4b1c      	ldr	r3, [pc, #112]	@ (8006d78 <xTaskIncrementTick+0x224>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	f67f af5d 	bls.w	8006bcc <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8006d12:	2301      	movs	r3, #1
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d16:	e759      	b.n	8006bcc <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d18:	4b17      	ldr	r3, [pc, #92]	@ (8006d78 <xTaskIncrementTick+0x224>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	4915      	ldr	r1, [pc, #84]	@ (8006d74 <xTaskIncrementTick+0x220>)
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d901      	bls.n	8006d34 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006d34:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <xTaskIncrementTick+0x228>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d40:	e004      	b.n	8006d4c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006d42:	4b0f      	ldr	r3, [pc, #60]	@ (8006d80 <xTaskIncrementTick+0x22c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3301      	adds	r3, #1
 8006d48:	4a0d      	ldr	r2, [pc, #52]	@ (8006d80 <xTaskIncrementTick+0x22c>)
 8006d4a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	@ 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200003c8 	.word	0x200003c8
 8006d5c:	200003a4 	.word	0x200003a4
 8006d60:	20000358 	.word	0x20000358
 8006d64:	2000035c 	.word	0x2000035c
 8006d68:	200003b8 	.word	0x200003b8
 8006d6c:	200003c0 	.word	0x200003c0
 8006d70:	200003a8 	.word	0x200003a8
 8006d74:	200002cc 	.word	0x200002cc
 8006d78:	200002c8 	.word	0x200002c8
 8006d7c:	200003b4 	.word	0x200003b4
 8006d80:	200003b0 	.word	0x200003b0

08006d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d8a:	4b27      	ldr	r3, [pc, #156]	@ (8006e28 <vTaskSwitchContext+0xa4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006d92:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <vTaskSwitchContext+0xa8>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006d98:	e040      	b.n	8006e1c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006d9a:	4b24      	ldr	r3, [pc, #144]	@ (8006e2c <vTaskSwitchContext+0xa8>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da0:	4b23      	ldr	r3, [pc, #140]	@ (8006e30 <vTaskSwitchContext+0xac>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	fab3 f383 	clz	r3, r3
 8006dac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	f1c3 031f 	rsb	r3, r3, #31
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	491f      	ldr	r1, [pc, #124]	@ (8006e34 <vTaskSwitchContext+0xb0>)
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <vTaskSwitchContext+0x5e>
        __asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	607b      	str	r3, [r7, #4]
    }
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <vTaskSwitchContext+0x5a>
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4a11      	ldr	r2, [pc, #68]	@ (8006e34 <vTaskSwitchContext+0xb0>)
 8006dee:	4413      	add	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	3308      	adds	r3, #8
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d104      	bne.n	8006e12 <vTaskSwitchContext+0x8e>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4a07      	ldr	r2, [pc, #28]	@ (8006e38 <vTaskSwitchContext+0xb4>)
 8006e1a:	6013      	str	r3, [r2, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	200003c8 	.word	0x200003c8
 8006e2c:	200003b4 	.word	0x200003b4
 8006e30:	200003a8 	.word	0x200003a8
 8006e34:	200002cc 	.word	0x200002cc
 8006e38:	200002c8 	.word	0x200002c8

08006e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10b      	bne.n	8006e64 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60fb      	str	r3, [r7, #12]
    }
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	e7fd      	b.n	8006e60 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e64:	4b07      	ldr	r3, [pc, #28]	@ (8006e84 <vTaskPlaceOnEventList+0x48>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3318      	adds	r3, #24
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fe fd18 	bl	80058a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e72:	2101      	movs	r1, #1
 8006e74:	6838      	ldr	r0, [r7, #0]
 8006e76:	f000 fe01 	bl	8007a7c <prvAddCurrentTaskToDelayedList>
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	200002c8 	.word	0x200002c8

08006e88 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	613b      	str	r3, [r7, #16]
    }
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	e7fd      	b.n	8006eae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	4b15      	ldr	r3, [pc, #84]	@ (8006f10 <vTaskPlaceOnEventListRestricted+0x88>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	61da      	str	r2, [r3, #28]
 8006ec0:	4b13      	ldr	r3, [pc, #76]	@ (8006f10 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	6892      	ldr	r2, [r2, #8]
 8006ec8:	621a      	str	r2, [r3, #32]
 8006eca:	4b11      	ldr	r3, [pc, #68]	@ (8006f10 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	3218      	adds	r2, #24
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8006f10 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f103 0218 	add.w	r2, r3, #24
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	609a      	str	r2, [r3, #8]
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006efe:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fdba 	bl	8007a7c <prvAddCurrentTaskToDelayedList>
    }
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200002c8 	.word	0x200002c8

08006f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b08b      	sub	sp, #44	@ 0x2c
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	60fb      	str	r3, [r7, #12]
    }
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	6a3a      	ldr	r2, [r7, #32]
 8006f4e:	6a12      	ldr	r2, [r2, #32]
 8006f50:	609a      	str	r2, [r3, #8]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	69d2      	ldr	r2, [r2, #28]
 8006f5a:	605a      	str	r2, [r3, #4]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	3318      	adds	r3, #24
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d103      	bne.n	8006f70 <xTaskRemoveFromEventList+0x5c>
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	605a      	str	r2, [r3, #4]
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2200      	movs	r2, #0
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	1e5a      	subs	r2, r3, #1
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f80:	4b4a      	ldr	r3, [pc, #296]	@ (80070ac <xTaskRemoveFromEventList+0x198>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d15e      	bne.n	8007046 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	6a3a      	ldr	r2, [r7, #32]
 8006f94:	68d2      	ldr	r2, [r2, #12]
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	6892      	ldr	r2, [r2, #8]
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d103      	bne.n	8006fb6 <xTaskRemoveFromEventList+0xa2>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	615a      	str	r2, [r3, #20]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	1e5a      	subs	r2, r3, #1
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	2201      	movs	r2, #1
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	4b38      	ldr	r3, [pc, #224]	@ (80070b0 <xTaskRemoveFromEventList+0x19c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	4a36      	ldr	r2, [pc, #216]	@ (80070b0 <xTaskRemoveFromEventList+0x19c>)
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	4935      	ldr	r1, [pc, #212]	@ (80070b4 <xTaskRemoveFromEventList+0x1a0>)
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3304      	adds	r3, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	60da      	str	r2, [r3, #12]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	6a3a      	ldr	r2, [r7, #32]
 8007002:	3204      	adds	r2, #4
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	1d1a      	adds	r2, r3, #4
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	609a      	str	r2, [r3, #8]
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4a26      	ldr	r2, [pc, #152]	@ (80070b4 <xTaskRemoveFromEventList+0x1a0>)
 800701c:	441a      	add	r2, r3
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	615a      	str	r2, [r3, #20]
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007026:	4923      	ldr	r1, [pc, #140]	@ (80070b4 <xTaskRemoveFromEventList+0x1a0>)
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	1c59      	adds	r1, r3, #1
 8007036:	481f      	ldr	r0, [pc, #124]	@ (80070b4 <xTaskRemoveFromEventList+0x1a0>)
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4403      	add	r3, r0
 8007042:	6019      	str	r1, [r3, #0]
 8007044:	e01b      	b.n	800707e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007046:	4b1c      	ldr	r3, [pc, #112]	@ (80070b8 <xTaskRemoveFromEventList+0x1a4>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	61bb      	str	r3, [r7, #24]
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	61da      	str	r2, [r3, #28]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	621a      	str	r2, [r3, #32]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	3218      	adds	r2, #24
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	f103 0218 	add.w	r2, r3, #24
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	609a      	str	r2, [r3, #8]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	4a11      	ldr	r2, [pc, #68]	@ (80070b8 <xTaskRemoveFromEventList+0x1a4>)
 8007072:	629a      	str	r2, [r3, #40]	@ 0x28
 8007074:	4b10      	ldr	r3, [pc, #64]	@ (80070b8 <xTaskRemoveFromEventList+0x1a4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a0f      	ldr	r2, [pc, #60]	@ (80070b8 <xTaskRemoveFromEventList+0x1a4>)
 800707c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007082:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <xTaskRemoveFromEventList+0x1a8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	429a      	cmp	r2, r3
 800708a:	d905      	bls.n	8007098 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007090:	4b0b      	ldr	r3, [pc, #44]	@ (80070c0 <xTaskRemoveFromEventList+0x1ac>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e001      	b.n	800709c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800709e:	4618      	mov	r0, r3
 80070a0:	372c      	adds	r7, #44	@ 0x2c
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	200003c8 	.word	0x200003c8
 80070b0:	200003a8 	.word	0x200003a8
 80070b4:	200002cc 	.word	0x200002cc
 80070b8:	20000360 	.word	0x20000360
 80070bc:	200002c8 	.word	0x200002c8
 80070c0:	200003b4 	.word	0x200003b4

080070c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <vTaskInternalSetTimeOutState+0x24>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80070d4:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <vTaskInternalSetTimeOutState+0x28>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	200003b8 	.word	0x200003b8
 80070ec:	200003a4 	.word	0x200003a4

080070f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
    }
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	60fb      	str	r3, [r7, #12]
    }
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8007136:	f001 f989 	bl	800844c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800713a:	4b1f      	ldr	r3, [pc, #124]	@ (80071b8 <xTaskCheckForTimeOut+0xc8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007152:	d102      	bne.n	800715a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	e026      	b.n	80071a8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b17      	ldr	r3, [pc, #92]	@ (80071bc <xTaskCheckForTimeOut+0xcc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d00a      	beq.n	800717c <xTaskCheckForTimeOut+0x8c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	429a      	cmp	r2, r3
 800716e:	d305      	bcc.n	800717c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e015      	b.n	80071a8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	429a      	cmp	r2, r3
 8007184:	d20b      	bcs.n	800719e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1ad2      	subs	r2, r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff ff96 	bl	80070c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
 800719c:	e004      	b.n	80071a8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80071a8:	f001 f982 	bl	80084b0 <vPortExitCritical>

    return xReturn;
 80071ac:	69fb      	ldr	r3, [r7, #28]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200003a4 	.word	0x200003a4
 80071bc:	200003b8 	.word	0x200003b8

080071c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80071c4:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <vTaskMissedYield+0x14>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
}
 80071ca:	bf00      	nop
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	200003b4 	.word	0x200003b4

080071d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80071e0:	f000 f852 	bl	8007288 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071e4:	4b06      	ldr	r3, [pc, #24]	@ (8007200 <prvIdleTask+0x28>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d9f9      	bls.n	80071e0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80071ec:	4b05      	ldr	r3, [pc, #20]	@ (8007204 <prvIdleTask+0x2c>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80071fc:	e7f0      	b.n	80071e0 <prvIdleTask+0x8>
 80071fe:	bf00      	nop
 8007200:	200002cc 	.word	0x200002cc
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	e00c      	b.n	800722e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4a12      	ldr	r2, [pc, #72]	@ (8007268 <prvInitialiseTaskLists+0x60>)
 8007220:	4413      	add	r3, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe faec 	bl	8005800 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3301      	adds	r3, #1
 800722c:	607b      	str	r3, [r7, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b04      	cmp	r3, #4
 8007232:	d9ef      	bls.n	8007214 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007234:	480d      	ldr	r0, [pc, #52]	@ (800726c <prvInitialiseTaskLists+0x64>)
 8007236:	f7fe fae3 	bl	8005800 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800723a:	480d      	ldr	r0, [pc, #52]	@ (8007270 <prvInitialiseTaskLists+0x68>)
 800723c:	f7fe fae0 	bl	8005800 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007240:	480c      	ldr	r0, [pc, #48]	@ (8007274 <prvInitialiseTaskLists+0x6c>)
 8007242:	f7fe fadd 	bl	8005800 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8007246:	480c      	ldr	r0, [pc, #48]	@ (8007278 <prvInitialiseTaskLists+0x70>)
 8007248:	f7fe fada 	bl	8005800 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800724c:	480b      	ldr	r0, [pc, #44]	@ (800727c <prvInitialiseTaskLists+0x74>)
 800724e:	f7fe fad7 	bl	8005800 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007252:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <prvInitialiseTaskLists+0x78>)
 8007254:	4a05      	ldr	r2, [pc, #20]	@ (800726c <prvInitialiseTaskLists+0x64>)
 8007256:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007258:	4b0a      	ldr	r3, [pc, #40]	@ (8007284 <prvInitialiseTaskLists+0x7c>)
 800725a:	4a05      	ldr	r2, [pc, #20]	@ (8007270 <prvInitialiseTaskLists+0x68>)
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200002cc 	.word	0x200002cc
 800726c:	20000330 	.word	0x20000330
 8007270:	20000344 	.word	0x20000344
 8007274:	20000360 	.word	0x20000360
 8007278:	20000374 	.word	0x20000374
 800727c:	2000038c 	.word	0x2000038c
 8007280:	20000358 	.word	0x20000358
 8007284:	2000035c 	.word	0x2000035c

08007288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800728e:	e019      	b.n	80072c4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007290:	f001 f8dc 	bl	800844c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007294:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <prvCheckTasksWaitingTermination+0x50>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3304      	adds	r3, #4
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fb37 	bl	8005914 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80072a6:	4b0d      	ldr	r3, [pc, #52]	@ (80072dc <prvCheckTasksWaitingTermination+0x54>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	4a0b      	ldr	r2, [pc, #44]	@ (80072dc <prvCheckTasksWaitingTermination+0x54>)
 80072ae:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80072b0:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <prvCheckTasksWaitingTermination+0x58>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	4a0a      	ldr	r2, [pc, #40]	@ (80072e0 <prvCheckTasksWaitingTermination+0x58>)
 80072b8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80072ba:	f001 f8f9 	bl	80084b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f810 	bl	80072e4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072c4:	4b06      	ldr	r3, [pc, #24]	@ (80072e0 <prvCheckTasksWaitingTermination+0x58>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e1      	bne.n	8007290 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000374 	.word	0x20000374
 80072dc:	200003a0 	.word	0x200003a0
 80072e0:	20000388 	.word	0x20000388

080072e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fa91 	bl	8008818 <vPortFree>
            vPortFree( pxTCB );
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fa8e 	bl	8008818 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007308:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <prvResetNextTaskUnblockTime+0x30>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <prvResetNextTaskUnblockTime+0x34>)
 8007314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007318:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800731a:	e005      	b.n	8007328 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <prvResetNextTaskUnblockTime+0x30>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a04      	ldr	r2, [pc, #16]	@ (8007338 <prvResetNextTaskUnblockTime+0x34>)
 8007326:	6013      	str	r3, [r2, #0]
}
 8007328:	bf00      	nop
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000358 	.word	0x20000358
 8007338:	200003c0 	.word	0x200003c0

0800733c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007342:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <xTaskGetSchedulerState+0x34>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800734a:	2301      	movs	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e008      	b.n	8007362 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007350:	4b08      	ldr	r3, [pc, #32]	@ (8007374 <xTaskGetSchedulerState+0x38>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007358:	2302      	movs	r3, #2
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	e001      	b.n	8007362 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007362:	687b      	ldr	r3, [r7, #4]
    }
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	200003ac 	.word	0x200003ac
 8007374:	200003c8 	.word	0x200003c8

08007378 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d065      	beq.n	800745a <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800738e:	4b35      	ldr	r3, [pc, #212]	@ (8007464 <xTaskPriorityDisinherit+0xec>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	d00b      	beq.n	80073b0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
    }
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	e7fd      	b.n	80073ac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	60bb      	str	r3, [r7, #8]
    }
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d039      	beq.n	800745a <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d135      	bne.n	800745a <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3304      	adds	r3, #4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fa8e 	bl	8005914 <uxListRemove>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	2201      	movs	r2, #1
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	43da      	mvns	r2, r3
 800740a:	4b17      	ldr	r3, [pc, #92]	@ (8007468 <xTaskPriorityDisinherit+0xf0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4013      	ands	r3, r2
 8007410:	4a15      	ldr	r2, [pc, #84]	@ (8007468 <xTaskPriorityDisinherit+0xf0>)
 8007412:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f1c3 0205 	rsb	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	2201      	movs	r2, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <xTaskPriorityDisinherit+0xf0>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4313      	orrs	r3, r2
 8007436:	4a0c      	ldr	r2, [pc, #48]	@ (8007468 <xTaskPriorityDisinherit+0xf0>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a09      	ldr	r2, [pc, #36]	@ (800746c <xTaskPriorityDisinherit+0xf4>)
 8007448:	441a      	add	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe fa02 	bl	800585a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007456:	2301      	movs	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800745a:	697b      	ldr	r3, [r7, #20]
    }
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200002c8 	.word	0x200002c8
 8007468:	200003a8 	.word	0x200003a8
 800746c:	200002cc 	.word	0x200002cc

08007470 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	613b      	str	r3, [r7, #16]
    }
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	e7fd      	b.n	8007498 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800749c:	f000 ffd6 	bl	800844c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80074a0:	4b31      	ldr	r3, [pc, #196]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	3354      	adds	r3, #84	@ 0x54
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d022      	beq.n	80074f8 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80074b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	3214      	adds	r2, #20
 80074ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	43d2      	mvns	r2, r2
 80074c2:	4011      	ands	r1, r2
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	3214      	adds	r2, #20
 80074c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80074cc:	4b26      	ldr	r3, [pc, #152]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	3354      	adds	r3, #84	@ 0x54
 80074d6:	2201      	movs	r2, #1
 80074d8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074e0:	2101      	movs	r1, #1
 80074e2:	6a38      	ldr	r0, [r7, #32]
 80074e4:	f000 faca 	bl	8007a7c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80074e8:	4b20      	ldr	r3, [pc, #128]	@ (800756c <xTaskGenericNotifyWait+0xfc>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80074f8:	f000 ffda 	bl	80084b0 <vPortExitCritical>

        taskENTER_CRITICAL();
 80074fc:	f000 ffa6 	bl	800844c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007506:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	3214      	adds	r2, #20
 800750e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007516:	4b14      	ldr	r3, [pc, #80]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	3354      	adds	r3, #84	@ 0x54
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d002      	beq.n	800752e <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	e00e      	b.n	800754c <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800752e:	4b0e      	ldr	r3, [pc, #56]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	3214      	adds	r2, #20
 8007536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	43d2      	mvns	r2, r2
 800753e:	4011      	ands	r1, r2
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	3214      	adds	r2, #20
 8007544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800754c:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <xTaskGenericNotifyWait+0xf8>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	3354      	adds	r3, #84	@ 0x54
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800755a:	f000 ffa9 	bl	80084b0 <vPortExitCritical>

        return xReturn;
 800755e:	697b      	ldr	r3, [r7, #20]
    }
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200002c8 	.word	0x200002c8
 800756c:	e000ed04 	.word	0xe000ed04

08007570 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007570:	b580      	push	{r7, lr}
 8007572:	b08e      	sub	sp, #56	@ 0x38
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800757e:	2301      	movs	r3, #1
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <xTaskGenericNotify+0x30>
        __asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	623b      	str	r3, [r7, #32]
    }
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <xTaskGenericNotify+0x4e>
        __asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	61fb      	str	r3, [r7, #28]
    }
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80075c2:	f000 ff43 	bl	800844c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80075c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	3214      	adds	r2, #20
 80075d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80075da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	3354      	adds	r3, #84	@ 0x54
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80075e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	3354      	adds	r3, #84	@ 0x54
 80075f0:	2202      	movs	r2, #2
 80075f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d83b      	bhi.n	8007672 <xTaskGenericNotify+0x102>
 80075fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <xTaskGenericNotify+0x90>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007693 	.word	0x08007693
 8007604:	08007615 	.word	0x08007615
 8007608:	08007631 	.word	0x08007631
 800760c:	08007649 	.word	0x08007649
 8007610:	08007657 	.word	0x08007657
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	3214      	adds	r2, #20
 800761a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	ea42 0103 	orr.w	r1, r2, r3
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	3214      	adds	r2, #20
 800762a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800762e:	e033      	b.n	8007698 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	3214      	adds	r2, #20
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	1c59      	adds	r1, r3, #1
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	3214      	adds	r2, #20
 8007642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007646:	e027      	b.n	8007698 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	3214      	adds	r2, #20
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007654:	e020      	b.n	8007698 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007656:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800765a:	2b02      	cmp	r3, #2
 800765c:	d006      	beq.n	800766c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	3214      	adds	r2, #20
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800766a:	e015      	b.n	8007698 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800766c:	2300      	movs	r3, #0
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8007670:	e012      	b.n	8007698 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007672:	4b4d      	ldr	r3, [pc, #308]	@ (80077a8 <xTaskGenericNotify+0x238>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <xTaskGenericNotify+0x126>
        __asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61bb      	str	r3, [r7, #24]
    }
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xTaskGenericNotify+0x11e>
                    break;
 8007692:	bf00      	nop
 8007694:	e000      	b.n	8007698 <xTaskGenericNotify+0x128>

                    break;
 8007696:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800769c:	2b01      	cmp	r3, #1
 800769e:	d17c      	bne.n	800779a <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ac:	68d2      	ldr	r2, [r2, #12]
 80076ae:	609a      	str	r2, [r3, #8]
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b6:	6892      	ldr	r2, [r2, #8]
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	3304      	adds	r3, #4
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d103      	bne.n	80076ce <xTaskGenericNotify+0x15e>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	2200      	movs	r2, #0
 80076d2:	615a      	str	r2, [r3, #20]
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	1e5a      	subs	r2, r3, #1
 80076da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076dc:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	2201      	movs	r2, #1
 80076e4:	409a      	lsls	r2, r3
 80076e6:	4b31      	ldr	r3, [pc, #196]	@ (80077ac <xTaskGenericNotify+0x23c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	4a2f      	ldr	r2, [pc, #188]	@ (80077ac <xTaskGenericNotify+0x23c>)
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f4:	492e      	ldr	r1, [pc, #184]	@ (80077b0 <xTaskGenericNotify+0x240>)
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	3304      	adds	r3, #4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	60da      	str	r2, [r3, #12]
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800771a:	3204      	adds	r2, #4
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4a1f      	ldr	r2, [pc, #124]	@ (80077b0 <xTaskGenericNotify+0x240>)
 8007734:	441a      	add	r2, r3
 8007736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007738:	615a      	str	r2, [r3, #20]
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773e:	491c      	ldr	r1, [pc, #112]	@ (80077b0 <xTaskGenericNotify+0x240>)
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	1c59      	adds	r1, r3, #1
 800774e:	4818      	ldr	r0, [pc, #96]	@ (80077b0 <xTaskGenericNotify+0x240>)
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4403      	add	r3, r0
 800775a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <xTaskGenericNotify+0x20c>
        __asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	617b      	str	r3, [r7, #20]
    }
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007780:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <xTaskGenericNotify+0x244>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	429a      	cmp	r2, r3
 8007788:	d907      	bls.n	800779a <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800778a:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <xTaskGenericNotify+0x248>)
 800778c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800779a:	f000 fe89 	bl	80084b0 <vPortExitCritical>

        return xReturn;
 800779e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80077a0:	4618      	mov	r0, r3
 80077a2:	3738      	adds	r7, #56	@ 0x38
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200003a4 	.word	0x200003a4
 80077ac:	200003a8 	.word	0x200003a8
 80077b0:	200002cc 	.word	0x200002cc
 80077b4:	200002c8 	.word	0x200002c8
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b092      	sub	sp, #72	@ 0x48
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80077ca:	2301      	movs	r3, #1
 80077cc:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10b      	bne.n	80077ec <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80077e6:	bf00      	nop
 80077e8:	bf00      	nop
 80077ea:	e7fd      	b.n	80077e8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800780a:	f000 ff07 	bl	800861c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 8007812:	f3ef 8211 	mrs	r2, BASEPRI
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	623a      	str	r2, [r7, #32]
 8007828:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800782a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800782c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800782e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007830:	2b00      	cmp	r3, #0
 8007832:	d006      	beq.n	8007842 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	3214      	adds	r2, #20
 800783a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800783e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007840:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4413      	add	r3, r2
 8007848:	3354      	adds	r3, #84	@ 0x54
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007850:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4413      	add	r3, r2
 8007856:	3354      	adds	r3, #84	@ 0x54
 8007858:	2202      	movs	r2, #2
 800785a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	2b04      	cmp	r3, #4
 8007860:	d83b      	bhi.n	80078da <xTaskGenericNotifyFromISR+0x11e>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <xTaskGenericNotifyFromISR+0xac>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	080078fb 	.word	0x080078fb
 800786c:	0800787d 	.word	0x0800787d
 8007870:	08007899 	.word	0x08007899
 8007874:	080078b1 	.word	0x080078b1
 8007878:	080078bf 	.word	0x080078bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800787c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	3214      	adds	r2, #20
 8007882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	ea42 0103 	orr.w	r1, r2, r3
 800788c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	3214      	adds	r2, #20
 8007892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007896:	e033      	b.n	8007900 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	3214      	adds	r2, #20
 800789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	3214      	adds	r2, #20
 80078aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80078ae:	e027      	b.n	8007900 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80078b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	3214      	adds	r2, #20
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80078bc:	e020      	b.n	8007900 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80078be:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d006      	beq.n	80078d4 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80078c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	3214      	adds	r2, #20
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80078d2:	e015      	b.n	8007900 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 80078d8:	e012      	b.n	8007900 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80078da:	4b61      	ldr	r3, [pc, #388]	@ (8007a60 <xTaskGenericNotifyFromISR+0x2a4>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00d      	beq.n	80078fe <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	61bb      	str	r3, [r7, #24]
    }
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80078fe:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007900:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 809f 	bne.w	8007a48 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800790a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	617b      	str	r3, [r7, #20]
    }
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b4e      	ldr	r3, [pc, #312]	@ (8007a64 <xTaskGenericNotifyFromISR+0x2a8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d15e      	bne.n	80079f0 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	633b      	str	r3, [r7, #48]	@ 0x30
 8007938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800793e:	68d2      	ldr	r2, [r2, #12]
 8007940:	609a      	str	r2, [r3, #8]
 8007942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007948:	6892      	ldr	r2, [r2, #8]
 800794a:	605a      	str	r2, [r3, #4]
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007952:	3304      	adds	r3, #4
 8007954:	429a      	cmp	r2, r3
 8007956:	d103      	bne.n	8007960 <xTaskGenericNotifyFromISR+0x1a4>
 8007958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007962:	2200      	movs	r2, #0
 8007964:	615a      	str	r2, [r3, #20]
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	2201      	movs	r2, #1
 8007976:	409a      	lsls	r2, r3
 8007978:	4b3b      	ldr	r3, [pc, #236]	@ (8007a68 <xTaskGenericNotifyFromISR+0x2ac>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4313      	orrs	r3, r2
 800797e:	4a3a      	ldr	r2, [pc, #232]	@ (8007a68 <xTaskGenericNotifyFromISR+0x2ac>)
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007986:	4939      	ldr	r1, [pc, #228]	@ (8007a6c <xTaskGenericNotifyFromISR+0x2b0>)
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	3304      	adds	r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800799a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800799c:	609a      	str	r2, [r3, #8]
 800799e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079ac:	3204      	adds	r2, #4
 80079ae:	605a      	str	r2, [r3, #4]
 80079b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4a29      	ldr	r2, [pc, #164]	@ (8007a6c <xTaskGenericNotifyFromISR+0x2b0>)
 80079c6:	441a      	add	r2, r3
 80079c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ca:	615a      	str	r2, [r3, #20]
 80079cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d0:	4926      	ldr	r1, [pc, #152]	@ (8007a6c <xTaskGenericNotifyFromISR+0x2b0>)
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	1c59      	adds	r1, r3, #1
 80079e0:	4822      	ldr	r0, [pc, #136]	@ (8007a6c <xTaskGenericNotifyFromISR+0x2b0>)
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4403      	add	r3, r0
 80079ec:	6019      	str	r1, [r3, #0]
 80079ee:	e01b      	b.n	8007a28 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80079f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007a70 <xTaskGenericNotifyFromISR+0x2b4>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079fa:	61da      	str	r2, [r3, #28]
 80079fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a02:	621a      	str	r2, [r3, #32]
 8007a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a0a:	3218      	adds	r2, #24
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a10:	f103 0218 	add.w	r2, r3, #24
 8007a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a16:	609a      	str	r2, [r3, #8]
 8007a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a1a:	4a15      	ldr	r2, [pc, #84]	@ (8007a70 <xTaskGenericNotifyFromISR+0x2b4>)
 8007a1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a1e:	4b14      	ldr	r3, [pc, #80]	@ (8007a70 <xTaskGenericNotifyFromISR+0x2b4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	4a12      	ldr	r2, [pc, #72]	@ (8007a70 <xTaskGenericNotifyFromISR+0x2b4>)
 8007a26:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2c:	4b11      	ldr	r3, [pc, #68]	@ (8007a74 <xTaskGenericNotifyFromISR+0x2b8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d908      	bls.n	8007a48 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007a42:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <xTaskGenericNotifyFromISR+0x2bc>)
 8007a44:	2201      	movs	r2, #1
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a4a:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f383 8811 	msr	BASEPRI, r3
    }
 8007a52:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3748      	adds	r7, #72	@ 0x48
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200003a4 	.word	0x200003a4
 8007a64:	200003c8 	.word	0x200003c8
 8007a68:	200003a8 	.word	0x200003a8
 8007a6c:	200002cc 	.word	0x200002cc
 8007a70:	20000360 	.word	0x20000360
 8007a74:	200002c8 	.word	0x200002c8
 8007a78:	200003b4 	.word	0x200003b4

08007a7c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007a86:	4b36      	ldr	r3, [pc, #216]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a8c:	4b35      	ldr	r3, [pc, #212]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fd ff3e 	bl	8005914 <uxListRemove>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10b      	bne.n	8007ab6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a9e:	4b31      	ldr	r3, [pc, #196]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	43da      	mvns	r2, r3
 8007aac:	4b2e      	ldr	r3, [pc, #184]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0xec>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0xec>)
 8007ab4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007abc:	d124      	bne.n	8007b08 <prvAddCurrentTaskToDelayedList+0x8c>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d021      	beq.n	8007b08 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac4:	4b29      	ldr	r3, [pc, #164]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	4b26      	ldr	r3, [pc, #152]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	4b24      	ldr	r3, [pc, #144]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	6892      	ldr	r2, [r2, #8]
 8007ada:	60da      	str	r2, [r3, #12]
 8007adc:	4b21      	ldr	r3, [pc, #132]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	3204      	adds	r2, #4
 8007ae6:	605a      	str	r2, [r3, #4]
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	1d1a      	adds	r2, r3, #4
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	609a      	str	r2, [r3, #8]
 8007af2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8007af8:	615a      	str	r2, [r3, #20]
 8007afa:	4b1c      	ldr	r3, [pc, #112]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3301      	adds	r3, #1
 8007b00:	4a1a      	ldr	r2, [pc, #104]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007b06:	e026      	b.n	8007b56 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b10:	4b14      	ldr	r3, [pc, #80]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d209      	bcs.n	8007b34 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b20:	4b13      	ldr	r3, [pc, #76]	@ (8007b70 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7fd feb8 	bl	80058a2 <vListInsert>
}
 8007b32:	e010      	b.n	8007b56 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b34:	4b0f      	ldr	r3, [pc, #60]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7fd feae 	bl	80058a2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007b46:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d202      	bcs.n	8007b56 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007b50:	4a09      	ldr	r2, [pc, #36]	@ (8007b78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6013      	str	r3, [r2, #0]
}
 8007b56:	bf00      	nop
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200003a4 	.word	0x200003a4
 8007b64:	200002c8 	.word	0x200002c8
 8007b68:	200003a8 	.word	0x200003a8
 8007b6c:	2000038c 	.word	0x2000038c
 8007b70:	2000035c 	.word	0x2000035c
 8007b74:	20000358 	.word	0x20000358
 8007b78:	200003c0 	.word	0x200003c0

08007b7c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007b86:	f000 faf7 	bl	8008178 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007b8a:	4b12      	ldr	r3, [pc, #72]	@ (8007bd4 <xTimerCreateTimerTask+0x58>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007b92:	4b11      	ldr	r3, [pc, #68]	@ (8007bd8 <xTimerCreateTimerTask+0x5c>)
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	2302      	movs	r3, #2
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007ba0:	490e      	ldr	r1, [pc, #56]	@ (8007bdc <xTimerCreateTimerTask+0x60>)
 8007ba2:	480f      	ldr	r0, [pc, #60]	@ (8007be0 <xTimerCreateTimerTask+0x64>)
 8007ba4:	f7fe fcf2 	bl	800658c <xTaskCreate>
 8007ba8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	603b      	str	r3, [r7, #0]
    }
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007bc8:	687b      	ldr	r3, [r7, #4]
    }
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200003fc 	.word	0x200003fc
 8007bd8:	20000400 	.word	0x20000400
 8007bdc:	0800a1c4 	.word	0x0800a1c4
 8007be0:	08007dd9 	.word	0x08007dd9

08007be4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007bf2:	202c      	movs	r0, #44	@ 0x2c
 8007bf4:	f000 fd54 	bl	80086a0 <pvPortMalloc>
 8007bf8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f805 	bl	8007c26 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007c1c:	697b      	ldr	r3, [r7, #20]
        }
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	617b      	str	r3, [r7, #20]
    }
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8007c52:	f000 fa91 	bl	8008178 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	3304      	adds	r3, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd fde4 	bl	8005840 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d008      	beq.n	8007c90 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c84:	f043 0304 	orr.w	r3, r3, #4
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	@ 0x28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xTimerGenericCommand+0x30>
        __asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	623b      	str	r3, [r7, #32]
    }
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007cc8:	4b19      	ldr	r3, [pc, #100]	@ (8007d30 <xTimerGenericCommand+0x98>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d02a      	beq.n	8007d26 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	dc18      	bgt.n	8007d14 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ce2:	f7ff fb2b 	bl	800733c <xTaskGetSchedulerState>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d109      	bne.n	8007d00 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cec:	4b10      	ldr	r3, [pc, #64]	@ (8007d30 <xTimerGenericCommand+0x98>)
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	f107 0114 	add.w	r1, r7, #20
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf8:	f7fd ff3a 	bl	8005b70 <xQueueGenericSend>
 8007cfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007cfe:	e012      	b.n	8007d26 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d00:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <xTimerGenericCommand+0x98>)
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	f107 0114 	add.w	r1, r7, #20
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7fd ff30 	bl	8005b70 <xQueueGenericSend>
 8007d10:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d12:	e008      	b.n	8007d26 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d14:	4b06      	ldr	r3, [pc, #24]	@ (8007d30 <xTimerGenericCommand+0x98>)
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	f107 0114 	add.w	r1, r7, #20
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	f7fe f828 	bl	8005d74 <xQueueGenericSendFromISR>
 8007d24:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3728      	adds	r7, #40	@ 0x28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200003fc 	.word	0x200003fc

08007d34 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007d40:	e008      	b.n	8007d54 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	4413      	add	r3, r2
 8007d4a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	18d1      	adds	r1, r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f8df 	bl	8007f24 <prvInsertTimerInActiveList>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ea      	bne.n	8007d42 <prvReloadTimer+0xe>
        }
    }
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d82:	4b14      	ldr	r3, [pc, #80]	@ (8007dd4 <prvProcessExpiredTimer+0x5c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fd fdbf 	bl	8005914 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7ff ffc3 	bl	8007d34 <prvReloadTimer>
 8007dae:	e008      	b.n	8007dc2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	4798      	blx	r3
    }
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200003f4 	.word	0x200003f4

08007dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007de0:	f107 0308 	add.w	r3, r7, #8
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 f859 	bl	8007e9c <prvGetNextExpireTime>
 8007dea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f805 	bl	8007e00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007df6:	f000 f8d7 	bl	8007fa8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dfa:	bf00      	nop
 8007dfc:	e7f0      	b.n	8007de0 <prvTimerTask+0x8>
	...

08007e00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007e0a:	f7fe fd7d 	bl	8006908 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e0e:	f107 0308 	add.w	r3, r7, #8
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f866 	bl	8007ee4 <prvSampleTimeNow>
 8007e18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d130      	bne.n	8007e82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <prvProcessTimerOrBlockTask+0x3c>
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d806      	bhi.n	8007e3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007e2e:	f7fe fd79 	bl	8006924 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff ff9f 	bl	8007d78 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007e3a:	e024      	b.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e42:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <prvProcessTimerOrBlockTask+0x90>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <prvProcessTimerOrBlockTask+0x50>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <prvProcessTimerOrBlockTask+0x52>
 8007e50:	2300      	movs	r3, #0
 8007e52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e54:	4b0f      	ldr	r3, [pc, #60]	@ (8007e94 <prvProcessTimerOrBlockTask+0x94>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f7fe fb5f 	bl	8006524 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007e66:	f7fe fd5d 	bl	8006924 <xTaskResumeAll>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007e70:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <prvProcessTimerOrBlockTask+0x98>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
    }
 8007e80:	e001      	b.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007e82:	f7fe fd4f 	bl	8006924 <xTaskResumeAll>
    }
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	200003f8 	.word	0x200003f8
 8007e94:	200003fc 	.word	0x200003fc
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee0 <prvGetNextExpireTime+0x44>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <prvGetNextExpireTime+0x16>
 8007eae:	2201      	movs	r2, #1
 8007eb0:	e000      	b.n	8007eb4 <prvGetNextExpireTime+0x18>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec0:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <prvGetNextExpireTime+0x44>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e001      	b.n	8007ed0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
    }
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	200003f4 	.word	0x200003f4

08007ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007eec:	f7fe fe16 	bl	8006b1c <xTaskGetTickCount>
 8007ef0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <prvSampleTimeNow+0x3c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d205      	bcs.n	8007f08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007efc:	f000 f916 	bl	800812c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007f0e:	4a04      	ldr	r2, [pc, #16]	@ (8007f20 <prvSampleTimeNow+0x3c>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007f14:	68fb      	ldr	r3, [r7, #12]
    }
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000404 	.word	0x20000404

08007f24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d812      	bhi.n	8007f70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e01b      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f5e:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <prvInsertTimerInActiveList+0x7c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fd fc9a 	bl	80058a2 <vListInsert>
 8007f6e:	e012      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d206      	bcs.n	8007f86 <prvInsertTimerInActiveList+0x62>
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d302      	bcc.n	8007f86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e007      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f86:	4b07      	ldr	r3, [pc, #28]	@ (8007fa4 <prvInsertTimerInActiveList+0x80>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fd fc86 	bl	80058a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007f96:	697b      	ldr	r3, [r7, #20]
    }
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	200003f8 	.word	0x200003f8
 8007fa4:	200003f4 	.word	0x200003f4

08007fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fae:	e0a9      	b.n	8008104 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f2c0 80a6 	blt.w	8008104 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd fca3 	bl	8005914 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fce:	1d3b      	adds	r3, r7, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ff87 	bl	8007ee4 <prvSampleTimeNow>
 8007fd6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	f200 808e 	bhi.w	80080fe <prvProcessReceivedCommands+0x156>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <prvProcessReceivedCommands+0x40>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	0800800d 	.word	0x0800800d
 8007fec:	0800800d 	.word	0x0800800d
 8007ff0:	08008075 	.word	0x08008075
 8007ff4:	08008089 	.word	0x08008089
 8007ff8:	080080d5 	.word	0x080080d5
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	0800800d 	.word	0x0800800d
 8008004:	08008075 	.word	0x08008075
 8008008:	08008089 	.word	0x08008089
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	18d1      	adds	r1, r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	69f8      	ldr	r0, [r7, #28]
 800802c:	f7ff ff7a 	bl	8007f24 <prvInsertTimerInActiveList>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d065      	beq.n	8008102 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	4413      	add	r3, r2
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	4619      	mov	r1, r3
 8008050:	69f8      	ldr	r0, [r7, #28]
 8008052:	f7ff fe6f 	bl	8007d34 <prvReloadTimer>
 8008056:	e008      	b.n	800806a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	69f8      	ldr	r0, [r7, #28]
 8008070:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008072:	e046      	b.n	8008102 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800807a:	f023 0301 	bic.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008086:	e03d      	b.n	8008104 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10b      	bne.n	80080c0 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	617b      	str	r3, [r7, #20]
    }
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	18d1      	adds	r1, r2, r3
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	69f8      	ldr	r0, [r7, #28]
 80080ce:	f7ff ff29 	bl	8007f24 <prvInsertTimerInActiveList>
                        break;
 80080d2:	e017      	b.n	8008104 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80080e2:	69f8      	ldr	r0, [r7, #28]
 80080e4:	f000 fb98 	bl	8008818 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80080e8:	e00c      	b.n	8008104 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80080fc:	e002      	b.n	8008104 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80080fe:	bf00      	nop
 8008100:	e000      	b.n	8008104 <prvProcessReceivedCommands+0x15c>
                        break;
 8008102:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008104:	4b08      	ldr	r3, [pc, #32]	@ (8008128 <prvProcessReceivedCommands+0x180>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f107 0108 	add.w	r1, r7, #8
 800810c:	2200      	movs	r2, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f7fd fee6 	bl	8005ee0 <xQueueReceive>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	f47f af4a 	bne.w	8007fb0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200003fc 	.word	0x200003fc

0800812c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008132:	e009      	b.n	8008148 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008134:	4b0e      	ldr	r3, [pc, #56]	@ (8008170 <prvSwitchTimerLists+0x44>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800813e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008142:	6838      	ldr	r0, [r7, #0]
 8008144:	f7ff fe18 	bl	8007d78 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008148:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <prvSwitchTimerLists+0x44>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f0      	bne.n	8008134 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008152:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <prvSwitchTimerLists+0x44>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008158:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <prvSwitchTimerLists+0x48>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a04      	ldr	r2, [pc, #16]	@ (8008170 <prvSwitchTimerLists+0x44>)
 800815e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008160:	4a04      	ldr	r2, [pc, #16]	@ (8008174 <prvSwitchTimerLists+0x48>)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6013      	str	r3, [r2, #0]
    }
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200003f4 	.word	0x200003f4
 8008174:	200003f8 	.word	0x200003f8

08008178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800817c:	f000 f966 	bl	800844c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008180:	4b12      	ldr	r3, [pc, #72]	@ (80081cc <prvCheckForValidListAndQueue+0x54>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11d      	bne.n	80081c4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008188:	4811      	ldr	r0, [pc, #68]	@ (80081d0 <prvCheckForValidListAndQueue+0x58>)
 800818a:	f7fd fb39 	bl	8005800 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800818e:	4811      	ldr	r0, [pc, #68]	@ (80081d4 <prvCheckForValidListAndQueue+0x5c>)
 8008190:	f7fd fb36 	bl	8005800 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008194:	4b10      	ldr	r3, [pc, #64]	@ (80081d8 <prvCheckForValidListAndQueue+0x60>)
 8008196:	4a0e      	ldr	r2, [pc, #56]	@ (80081d0 <prvCheckForValidListAndQueue+0x58>)
 8008198:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800819a:	4b10      	ldr	r3, [pc, #64]	@ (80081dc <prvCheckForValidListAndQueue+0x64>)
 800819c:	4a0d      	ldr	r2, [pc, #52]	@ (80081d4 <prvCheckForValidListAndQueue+0x5c>)
 800819e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80081a0:	2200      	movs	r2, #0
 80081a2:	210c      	movs	r1, #12
 80081a4:	200a      	movs	r0, #10
 80081a6:	f7fd fc71 	bl	8005a8c <xQueueGenericCreate>
 80081aa:	4603      	mov	r3, r0
 80081ac:	4a07      	ldr	r2, [pc, #28]	@ (80081cc <prvCheckForValidListAndQueue+0x54>)
 80081ae:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80081b0:	4b06      	ldr	r3, [pc, #24]	@ (80081cc <prvCheckForValidListAndQueue+0x54>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <prvCheckForValidListAndQueue+0x54>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4908      	ldr	r1, [pc, #32]	@ (80081e0 <prvCheckForValidListAndQueue+0x68>)
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f960 	bl	8006484 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80081c4:	f000 f974 	bl	80084b0 <vPortExitCritical>
    }
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200003fc 	.word	0x200003fc
 80081d0:	200003cc 	.word	0x200003cc
 80081d4:	200003e0 	.word	0x200003e0
 80081d8:	200003f4 	.word	0x200003f4
 80081dc:	200003f8 	.word	0x200003f8
 80081e0:	0800a1cc 	.word	0x0800a1cc

080081e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b04      	subs	r3, #4
 80081f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80081fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3b04      	subs	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f023 0201 	bic.w	r2, r3, #1
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b04      	subs	r3, #4
 8008212:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008214:	4a0c      	ldr	r2, [pc, #48]	@ (8008248 <pxPortInitialiseStack+0x64>)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b14      	subs	r3, #20
 800821e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3b04      	subs	r3, #4
 800822a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f06f 0202 	mvn.w	r2, #2
 8008232:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3b20      	subs	r3, #32
 8008238:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	0800824d 	.word	0x0800824d

0800824c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008256:	4b13      	ldr	r3, [pc, #76]	@ (80082a4 <prvTaskExitError+0x58>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800825e:	d00b      	beq.n	8008278 <prvTaskExitError+0x2c>
        __asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	60fb      	str	r3, [r7, #12]
    }
 8008272:	bf00      	nop
 8008274:	bf00      	nop
 8008276:	e7fd      	b.n	8008274 <prvTaskExitError+0x28>
        __asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	60bb      	str	r3, [r7, #8]
    }
 800828a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800828c:	bf00      	nop
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0fc      	beq.n	800828e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000030 	.word	0x20000030
	...

080082b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80082b0:	4b07      	ldr	r3, [pc, #28]	@ (80082d0 <pxCurrentTCBConst2>)
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	6808      	ldr	r0, [r1, #0]
 80082b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ba:	f380 8809 	msr	PSP, r0
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8811 	msr	BASEPRI, r0
 80082ca:	4770      	bx	lr
 80082cc:	f3af 8000 	nop.w

080082d0 <pxCurrentTCBConst2>:
 80082d0:	200002c8 	.word	0x200002c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop

080082d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80082d8:	4808      	ldr	r0, [pc, #32]	@ (80082fc <prvPortStartFirstTask+0x24>)
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	6800      	ldr	r0, [r0, #0]
 80082de:	f380 8808 	msr	MSP, r0
 80082e2:	f04f 0000 	mov.w	r0, #0
 80082e6:	f380 8814 	msr	CONTROL, r0
 80082ea:	b662      	cpsie	i
 80082ec:	b661      	cpsie	f
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	df00      	svc	0
 80082f8:	bf00      	nop
 80082fa:	0000      	.short	0x0000
 80082fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop

08008304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800830a:	4b47      	ldr	r3, [pc, #284]	@ (8008428 <xPortStartScheduler+0x124>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a47      	ldr	r2, [pc, #284]	@ (800842c <xPortStartScheduler+0x128>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d10b      	bne.n	800832c <xPortStartScheduler+0x28>
        __asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	613b      	str	r3, [r7, #16]
    }
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800832c:	4b3e      	ldr	r3, [pc, #248]	@ (8008428 <xPortStartScheduler+0x124>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3f      	ldr	r2, [pc, #252]	@ (8008430 <xPortStartScheduler+0x12c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d10b      	bne.n	800834e <xPortStartScheduler+0x4a>
        __asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
    }
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	e7fd      	b.n	800834a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800834e:	4b39      	ldr	r3, [pc, #228]	@ (8008434 <xPortStartScheduler+0x130>)
 8008350:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	22ff      	movs	r2, #255	@ 0xff
 800835e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008370:	b2da      	uxtb	r2, r3
 8008372:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <xPortStartScheduler+0x134>)
 8008374:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008376:	4b31      	ldr	r3, [pc, #196]	@ (800843c <xPortStartScheduler+0x138>)
 8008378:	2207      	movs	r2, #7
 800837a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800837c:	e009      	b.n	8008392 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800837e:	4b2f      	ldr	r3, [pc, #188]	@ (800843c <xPortStartScheduler+0x138>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3b01      	subs	r3, #1
 8008384:	4a2d      	ldr	r2, [pc, #180]	@ (800843c <xPortStartScheduler+0x138>)
 8008386:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800839a:	2b80      	cmp	r3, #128	@ 0x80
 800839c:	d0ef      	beq.n	800837e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800839e:	4b27      	ldr	r3, [pc, #156]	@ (800843c <xPortStartScheduler+0x138>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1c3 0307 	rsb	r3, r3, #7
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d00b      	beq.n	80083c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	60bb      	str	r3, [r7, #8]
    }
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	e7fd      	b.n	80083be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083c2:	4b1e      	ldr	r3, [pc, #120]	@ (800843c <xPortStartScheduler+0x138>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	4a1c      	ldr	r2, [pc, #112]	@ (800843c <xPortStartScheduler+0x138>)
 80083ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083cc:	4b1b      	ldr	r3, [pc, #108]	@ (800843c <xPortStartScheduler+0x138>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083d4:	4a19      	ldr	r2, [pc, #100]	@ (800843c <xPortStartScheduler+0x138>)
 80083d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80083e0:	4b17      	ldr	r3, [pc, #92]	@ (8008440 <xPortStartScheduler+0x13c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a16      	ldr	r2, [pc, #88]	@ (8008440 <xPortStartScheduler+0x13c>)
 80083e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80083ec:	4b14      	ldr	r3, [pc, #80]	@ (8008440 <xPortStartScheduler+0x13c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a13      	ldr	r2, [pc, #76]	@ (8008440 <xPortStartScheduler+0x13c>)
 80083f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80083f8:	f000 f8e0 	bl	80085bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80083fc:	4b11      	ldr	r3, [pc, #68]	@ (8008444 <xPortStartScheduler+0x140>)
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008402:	f000 f8ff 	bl	8008604 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008406:	4b10      	ldr	r3, [pc, #64]	@ (8008448 <xPortStartScheduler+0x144>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a0f      	ldr	r2, [pc, #60]	@ (8008448 <xPortStartScheduler+0x144>)
 800840c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008410:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008412:	f7ff ff61 	bl	80082d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008416:	f7fe fcb5 	bl	8006d84 <vTaskSwitchContext>
    prvTaskExitError();
 800841a:	f7ff ff17 	bl	800824c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	e000ed00 	.word	0xe000ed00
 800842c:	410fc271 	.word	0x410fc271
 8008430:	410fc270 	.word	0x410fc270
 8008434:	e000e400 	.word	0xe000e400
 8008438:	20000408 	.word	0x20000408
 800843c:	2000040c 	.word	0x2000040c
 8008440:	e000ed20 	.word	0xe000ed20
 8008444:	20000030 	.word	0x20000030
 8008448:	e000ef34 	.word	0xe000ef34

0800844c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
        __asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	607b      	str	r3, [r7, #4]
    }
 8008464:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008466:	4b10      	ldr	r3, [pc, #64]	@ (80084a8 <vPortEnterCritical+0x5c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	4a0e      	ldr	r2, [pc, #56]	@ (80084a8 <vPortEnterCritical+0x5c>)
 800846e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008470:	4b0d      	ldr	r3, [pc, #52]	@ (80084a8 <vPortEnterCritical+0x5c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d110      	bne.n	800849a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008478:	4b0c      	ldr	r3, [pc, #48]	@ (80084ac <vPortEnterCritical+0x60>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <vPortEnterCritical+0x4e>
        __asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	603b      	str	r3, [r7, #0]
    }
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	e7fd      	b.n	8008496 <vPortEnterCritical+0x4a>
    }
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000030 	.word	0x20000030
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80084b6:	4b12      	ldr	r3, [pc, #72]	@ (8008500 <vPortExitCritical+0x50>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <vPortExitCritical+0x26>
        __asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	607b      	str	r3, [r7, #4]
    }
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80084d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <vPortExitCritical+0x50>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3b01      	subs	r3, #1
 80084dc:	4a08      	ldr	r2, [pc, #32]	@ (8008500 <vPortExitCritical+0x50>)
 80084de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80084e0:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <vPortExitCritical+0x50>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <vPortExitCritical+0x44>
 80084e8:	2300      	movs	r3, #0
 80084ea:	603b      	str	r3, [r7, #0]
        __asm volatile
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	f383 8811 	msr	BASEPRI, r3
    }
 80084f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000030 	.word	0x20000030
	...

08008510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008510:	f3ef 8009 	mrs	r0, PSP
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	4b15      	ldr	r3, [pc, #84]	@ (8008570 <pxCurrentTCBConst>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	f01e 0f10 	tst.w	lr, #16
 8008520:	bf08      	it	eq
 8008522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	6010      	str	r0, [r2, #0]
 800852c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008534:	f380 8811 	msr	BASEPRI, r0
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f7fe fc20 	bl	8006d84 <vTaskSwitchContext>
 8008544:	f04f 0000 	mov.w	r0, #0
 8008548:	f380 8811 	msr	BASEPRI, r0
 800854c:	bc09      	pop	{r0, r3}
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	6808      	ldr	r0, [r1, #0]
 8008552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008556:	f01e 0f10 	tst.w	lr, #16
 800855a:	bf08      	it	eq
 800855c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008560:	f380 8809 	msr	PSP, r0
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst>:
 8008570:	200002c8 	.word	0x200002c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
        __asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
    }
 8008590:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008592:	f7fe fadf 	bl	8006b54 <xTaskIncrementTick>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800859c:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <SysTick_Handler+0x40>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	2300      	movs	r3, #0
 80085a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f383 8811 	msr	BASEPRI, r3
    }
 80085ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085c0:	4b0b      	ldr	r3, [pc, #44]	@ (80085f0 <vPortSetupTimerInterrupt+0x34>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085c6:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <vPortSetupTimerInterrupt+0x38>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <vPortSetupTimerInterrupt+0x3c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a0a      	ldr	r2, [pc, #40]	@ (80085fc <vPortSetupTimerInterrupt+0x40>)
 80085d2:	fba2 2303 	umull	r2, r3, r2, r3
 80085d6:	099b      	lsrs	r3, r3, #6
 80085d8:	4a09      	ldr	r2, [pc, #36]	@ (8008600 <vPortSetupTimerInterrupt+0x44>)
 80085da:	3b01      	subs	r3, #1
 80085dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085de:	4b04      	ldr	r3, [pc, #16]	@ (80085f0 <vPortSetupTimerInterrupt+0x34>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	e000e010 	.word	0xe000e010
 80085f4:	e000e018 	.word	0xe000e018
 80085f8:	2000001c 	.word	0x2000001c
 80085fc:	10624dd3 	.word	0x10624dd3
 8008600:	e000e014 	.word	0xe000e014

08008604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008614 <vPortEnableVFP+0x10>
 8008608:	6801      	ldr	r1, [r0, #0]
 800860a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800860e:	6001      	str	r1, [r0, #0]
 8008610:	4770      	bx	lr
 8008612:	0000      	.short	0x0000
 8008614:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop

0800861c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008622:	f3ef 8305 	mrs	r3, IPSR
 8008626:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d915      	bls.n	800865a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800862e:	4a18      	ldr	r2, [pc, #96]	@ (8008690 <vPortValidateInterruptPriority+0x74>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008638:	4b16      	ldr	r3, [pc, #88]	@ (8008694 <vPortValidateInterruptPriority+0x78>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	7afa      	ldrb	r2, [r7, #11]
 800863e:	429a      	cmp	r2, r3
 8008640:	d20b      	bcs.n	800865a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	607b      	str	r3, [r7, #4]
    }
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800865a:	4b0f      	ldr	r3, [pc, #60]	@ (8008698 <vPortValidateInterruptPriority+0x7c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008662:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <vPortValidateInterruptPriority+0x80>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d90b      	bls.n	8008682 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	603b      	str	r3, [r7, #0]
    }
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	e7fd      	b.n	800867e <vPortValidateInterruptPriority+0x62>
    }
 8008682:	bf00      	nop
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	e000e3f0 	.word	0xe000e3f0
 8008694:	20000408 	.word	0x20000408
 8008698:	e000ed0c 	.word	0xe000ed0c
 800869c:	2000040c 	.word	0x2000040c

080086a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	@ 0x28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80086ac:	f7fe f92c 	bl	8006908 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80086b0:	4b54      	ldr	r3, [pc, #336]	@ (8008804 <pvPortMalloc+0x164>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80086b8:	f000 f90c 	bl	80088d4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d012      	beq.n	80086e8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80086c2:	2208      	movs	r2, #8
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	3308      	adds	r3, #8
 80086ce:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	43db      	mvns	r3, r3
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d804      	bhi.n	80086e4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	4413      	add	r3, r2
 80086e0:	607b      	str	r3, [r7, #4]
 80086e2:	e001      	b.n	80086e8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	db71      	blt.n	80087d2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d06e      	beq.n	80087d2 <pvPortMalloc+0x132>
 80086f4:	4b44      	ldr	r3, [pc, #272]	@ (8008808 <pvPortMalloc+0x168>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d869      	bhi.n	80087d2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80086fe:	4b43      	ldr	r3, [pc, #268]	@ (800880c <pvPortMalloc+0x16c>)
 8008700:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008702:	4b42      	ldr	r3, [pc, #264]	@ (800880c <pvPortMalloc+0x16c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008708:	e004      	b.n	8008714 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d903      	bls.n	8008726 <pvPortMalloc+0x86>
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f1      	bne.n	800870a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008726:	4b37      	ldr	r3, [pc, #220]	@ (8008804 <pvPortMalloc+0x164>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800872c:	429a      	cmp	r2, r3
 800872e:	d050      	beq.n	80087d2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2208      	movs	r2, #8
 8008736:	4413      	add	r3, r2
 8008738:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	1ad2      	subs	r2, r2, r3
 800874a:	2308      	movs	r3, #8
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	429a      	cmp	r2, r3
 8008750:	d920      	bls.n	8008794 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <pvPortMalloc+0xdc>
        __asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	613b      	str	r3, [r7, #16]
    }
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	e7fd      	b.n	8008778 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	1ad2      	subs	r2, r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800878e:	6978      	ldr	r0, [r7, #20]
 8008790:	f000 f8fc 	bl	800898c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008794:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <pvPortMalloc+0x168>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	4a1a      	ldr	r2, [pc, #104]	@ (8008808 <pvPortMalloc+0x168>)
 80087a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087a2:	4b19      	ldr	r3, [pc, #100]	@ (8008808 <pvPortMalloc+0x168>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008810 <pvPortMalloc+0x170>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d203      	bcs.n	80087b6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087ae:	4b16      	ldr	r3, [pc, #88]	@ (8008808 <pvPortMalloc+0x168>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <pvPortMalloc+0x170>)
 80087b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80087b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80087c8:	4b12      	ldr	r3, [pc, #72]	@ (8008814 <pvPortMalloc+0x174>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	4a11      	ldr	r2, [pc, #68]	@ (8008814 <pvPortMalloc+0x174>)
 80087d0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80087d2:	f7fe f8a7 	bl	8006924 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <pvPortMalloc+0x158>
        __asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	60fb      	str	r3, [r7, #12]
    }
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <pvPortMalloc+0x154>
    return pvReturn;
 80087f8:	69fb      	ldr	r3, [r7, #28]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3728      	adds	r7, #40	@ 0x28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20013018 	.word	0x20013018
 8008808:	2001301c 	.word	0x2001301c
 800880c:	20013010 	.word	0x20013010
 8008810:	20013020 	.word	0x20013020
 8008814:	20013024 	.word	0x20013024

08008818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d04b      	beq.n	80088c2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800882a:	2308      	movs	r3, #8
 800882c:	425b      	negs	r3, r3
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4413      	add	r3, r2
 8008832:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	db0b      	blt.n	8008858 <vPortFree+0x40>
        __asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
    }
 8008852:	bf00      	nop
 8008854:	bf00      	nop
 8008856:	e7fd      	b.n	8008854 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <vPortFree+0x60>
        __asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60bb      	str	r3, [r7, #8]
    }
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	e7fd      	b.n	8008874 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	0fdb      	lsrs	r3, r3, #31
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01c      	beq.n	80088c2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d118      	bne.n	80088c2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800889c:	f7fe f834 	bl	8006908 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	4b09      	ldr	r3, [pc, #36]	@ (80088cc <vPortFree+0xb4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4413      	add	r3, r2
 80088aa:	4a08      	ldr	r2, [pc, #32]	@ (80088cc <vPortFree+0xb4>)
 80088ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088ae:	6938      	ldr	r0, [r7, #16]
 80088b0:	f000 f86c 	bl	800898c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <vPortFree+0xb8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3301      	adds	r3, #1
 80088ba:	4a05      	ldr	r2, [pc, #20]	@ (80088d0 <vPortFree+0xb8>)
 80088bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80088be:	f7fe f831 	bl	8006924 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80088c2:	bf00      	nop
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	2001301c 	.word	0x2001301c
 80088d0:	20013028 	.word	0x20013028

080088d4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088da:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80088de:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80088e0:	4b25      	ldr	r3, [pc, #148]	@ (8008978 <prvHeapInit+0xa4>)
 80088e2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	4a1d      	ldr	r2, [pc, #116]	@ (8008978 <prvHeapInit+0xa4>)
 8008904:	4413      	add	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800890c:	4a1b      	ldr	r2, [pc, #108]	@ (800897c <prvHeapInit+0xa8>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008912:	4b1a      	ldr	r3, [pc, #104]	@ (800897c <prvHeapInit+0xa8>)
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008920:	2208      	movs	r2, #8
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a13      	ldr	r2, [pc, #76]	@ (8008980 <prvHeapInit+0xac>)
 8008934:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008936:	4b12      	ldr	r3, [pc, #72]	@ (8008980 <prvHeapInit+0xac>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800893e:	4b10      	ldr	r3, [pc, #64]	@ (8008980 <prvHeapInit+0xac>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008954:	4b0a      	ldr	r3, [pc, #40]	@ (8008980 <prvHeapInit+0xac>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a08      	ldr	r2, [pc, #32]	@ (8008984 <prvHeapInit+0xb0>)
 8008962:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4a07      	ldr	r2, [pc, #28]	@ (8008988 <prvHeapInit+0xb4>)
 800896a:	6013      	str	r3, [r2, #0]
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	20000410 	.word	0x20000410
 800897c:	20013010 	.word	0x20013010
 8008980:	20013018 	.word	0x20013018
 8008984:	20013020 	.word	0x20013020
 8008988:	2001301c 	.word	0x2001301c

0800898c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008994:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <prvInsertBlockIntoFreeList+0xac>)
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	e002      	b.n	80089a0 <prvInsertBlockIntoFreeList+0x14>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d8f7      	bhi.n	800899a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d108      	bne.n	80089ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	441a      	add	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d118      	bne.n	8008a14 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b15      	ldr	r3, [pc, #84]	@ (8008a3c <prvInsertBlockIntoFreeList+0xb0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d00d      	beq.n	8008a0a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	441a      	add	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	e008      	b.n	8008a1c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <prvInsertBlockIntoFreeList+0xb0>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e003      	b.n	8008a1c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d002      	beq.n	8008a2a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008a2a:	bf00      	nop
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20013010 	.word	0x20013010
 8008a3c:	20013018 	.word	0x20013018

08008a40 <siprintf>:
 8008a40:	b40e      	push	{r1, r2, r3}
 8008a42:	b500      	push	{lr}
 8008a44:	b09c      	sub	sp, #112	@ 0x70
 8008a46:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a48:	9002      	str	r0, [sp, #8]
 8008a4a:	9006      	str	r0, [sp, #24]
 8008a4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a50:	4809      	ldr	r0, [pc, #36]	@ (8008a78 <siprintf+0x38>)
 8008a52:	9107      	str	r1, [sp, #28]
 8008a54:	9104      	str	r1, [sp, #16]
 8008a56:	4909      	ldr	r1, [pc, #36]	@ (8008a7c <siprintf+0x3c>)
 8008a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5c:	9105      	str	r1, [sp, #20]
 8008a5e:	6800      	ldr	r0, [r0, #0]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	a902      	add	r1, sp, #8
 8008a64:	f000 f920 	bl	8008ca8 <_svfiprintf_r>
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	b01c      	add	sp, #112	@ 0x70
 8008a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a74:	b003      	add	sp, #12
 8008a76:	4770      	bx	lr
 8008a78:	20000034 	.word	0x20000034
 8008a7c:	ffff0208 	.word	0xffff0208

08008a80 <siscanf>:
 8008a80:	b40e      	push	{r1, r2, r3}
 8008a82:	b530      	push	{r4, r5, lr}
 8008a84:	b09c      	sub	sp, #112	@ 0x70
 8008a86:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008a88:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008a8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008a90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008a94:	9002      	str	r0, [sp, #8]
 8008a96:	9006      	str	r0, [sp, #24]
 8008a98:	f7f7 fba2 	bl	80001e0 <strlen>
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008acc <siscanf+0x4c>)
 8008a9e:	9003      	str	r0, [sp, #12]
 8008aa0:	9007      	str	r0, [sp, #28]
 8008aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aa4:	480a      	ldr	r0, [pc, #40]	@ (8008ad0 <siscanf+0x50>)
 8008aa6:	9401      	str	r4, [sp, #4]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008aac:	9314      	str	r3, [sp, #80]	@ 0x50
 8008aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ab2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4623      	mov	r3, r4
 8008aba:	a902      	add	r1, sp, #8
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	f000 fa47 	bl	8008f50 <__ssvfiscanf_r>
 8008ac2:	b01c      	add	sp, #112	@ 0x70
 8008ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac8:	b003      	add	sp, #12
 8008aca:	4770      	bx	lr
 8008acc:	08008ad5 	.word	0x08008ad5
 8008ad0:	20000034 	.word	0x20000034

08008ad4 <__seofread>:
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	4770      	bx	lr

08008ad8 <memset>:
 8008ad8:	4402      	add	r2, r0
 8008ada:	4603      	mov	r3, r0
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d100      	bne.n	8008ae2 <memset+0xa>
 8008ae0:	4770      	bx	lr
 8008ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae6:	e7f9      	b.n	8008adc <memset+0x4>

08008ae8 <__errno>:
 8008ae8:	4b01      	ldr	r3, [pc, #4]	@ (8008af0 <__errno+0x8>)
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000034 	.word	0x20000034

08008af4 <__libc_init_array>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	4d0d      	ldr	r5, [pc, #52]	@ (8008b2c <__libc_init_array+0x38>)
 8008af8:	4c0d      	ldr	r4, [pc, #52]	@ (8008b30 <__libc_init_array+0x3c>)
 8008afa:	1b64      	subs	r4, r4, r5
 8008afc:	10a4      	asrs	r4, r4, #2
 8008afe:	2600      	movs	r6, #0
 8008b00:	42a6      	cmp	r6, r4
 8008b02:	d109      	bne.n	8008b18 <__libc_init_array+0x24>
 8008b04:	4d0b      	ldr	r5, [pc, #44]	@ (8008b34 <__libc_init_array+0x40>)
 8008b06:	4c0c      	ldr	r4, [pc, #48]	@ (8008b38 <__libc_init_array+0x44>)
 8008b08:	f001 f8e0 	bl	8009ccc <_init>
 8008b0c:	1b64      	subs	r4, r4, r5
 8008b0e:	10a4      	asrs	r4, r4, #2
 8008b10:	2600      	movs	r6, #0
 8008b12:	42a6      	cmp	r6, r4
 8008b14:	d105      	bne.n	8008b22 <__libc_init_array+0x2e>
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1c:	4798      	blx	r3
 8008b1e:	3601      	adds	r6, #1
 8008b20:	e7ee      	b.n	8008b00 <__libc_init_array+0xc>
 8008b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b26:	4798      	blx	r3
 8008b28:	3601      	adds	r6, #1
 8008b2a:	e7f2      	b.n	8008b12 <__libc_init_array+0x1e>
 8008b2c:	0800a358 	.word	0x0800a358
 8008b30:	0800a358 	.word	0x0800a358
 8008b34:	0800a358 	.word	0x0800a358
 8008b38:	0800a35c 	.word	0x0800a35c

08008b3c <__retarget_lock_acquire_recursive>:
 8008b3c:	4770      	bx	lr

08008b3e <__retarget_lock_release_recursive>:
 8008b3e:	4770      	bx	lr

08008b40 <memcpy>:
 8008b40:	440a      	add	r2, r1
 8008b42:	4291      	cmp	r1, r2
 8008b44:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b48:	d100      	bne.n	8008b4c <memcpy+0xc>
 8008b4a:	4770      	bx	lr
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b56:	4291      	cmp	r1, r2
 8008b58:	d1f9      	bne.n	8008b4e <memcpy+0xe>
 8008b5a:	bd10      	pop	{r4, pc}

08008b5c <_free_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4605      	mov	r5, r0
 8008b60:	2900      	cmp	r1, #0
 8008b62:	d041      	beq.n	8008be8 <_free_r+0x8c>
 8008b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b68:	1f0c      	subs	r4, r1, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfb8      	it	lt
 8008b6e:	18e4      	addlt	r4, r4, r3
 8008b70:	f000 ff1a 	bl	80099a8 <__malloc_lock>
 8008b74:	4a1d      	ldr	r2, [pc, #116]	@ (8008bec <_free_r+0x90>)
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	b933      	cbnz	r3, 8008b88 <_free_r+0x2c>
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	6014      	str	r4, [r2, #0]
 8008b7e:	4628      	mov	r0, r5
 8008b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b84:	f000 bf16 	b.w	80099b4 <__malloc_unlock>
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	d908      	bls.n	8008b9e <_free_r+0x42>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	bf01      	itttt	eq
 8008b94:	6819      	ldreq	r1, [r3, #0]
 8008b96:	685b      	ldreq	r3, [r3, #4]
 8008b98:	1809      	addeq	r1, r1, r0
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	e7ed      	b.n	8008b7a <_free_r+0x1e>
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	b10b      	cbz	r3, 8008ba8 <_free_r+0x4c>
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d9fa      	bls.n	8008b9e <_free_r+0x42>
 8008ba8:	6811      	ldr	r1, [r2, #0]
 8008baa:	1850      	adds	r0, r2, r1
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d10b      	bne.n	8008bc8 <_free_r+0x6c>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	4401      	add	r1, r0
 8008bb4:	1850      	adds	r0, r2, r1
 8008bb6:	4283      	cmp	r3, r0
 8008bb8:	6011      	str	r1, [r2, #0]
 8008bba:	d1e0      	bne.n	8008b7e <_free_r+0x22>
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	6053      	str	r3, [r2, #4]
 8008bc2:	4408      	add	r0, r1
 8008bc4:	6010      	str	r0, [r2, #0]
 8008bc6:	e7da      	b.n	8008b7e <_free_r+0x22>
 8008bc8:	d902      	bls.n	8008bd0 <_free_r+0x74>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	e7d6      	b.n	8008b7e <_free_r+0x22>
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	1821      	adds	r1, r4, r0
 8008bd4:	428b      	cmp	r3, r1
 8008bd6:	bf04      	itt	eq
 8008bd8:	6819      	ldreq	r1, [r3, #0]
 8008bda:	685b      	ldreq	r3, [r3, #4]
 8008bdc:	6063      	str	r3, [r4, #4]
 8008bde:	bf04      	itt	eq
 8008be0:	1809      	addeq	r1, r1, r0
 8008be2:	6021      	streq	r1, [r4, #0]
 8008be4:	6054      	str	r4, [r2, #4]
 8008be6:	e7ca      	b.n	8008b7e <_free_r+0x22>
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	bf00      	nop
 8008bec:	20013170 	.word	0x20013170

08008bf0 <__ssputs_r>:
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	688e      	ldr	r6, [r1, #8]
 8008bf6:	461f      	mov	r7, r3
 8008bf8:	42be      	cmp	r6, r7
 8008bfa:	680b      	ldr	r3, [r1, #0]
 8008bfc:	4682      	mov	sl, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	4690      	mov	r8, r2
 8008c02:	d82d      	bhi.n	8008c60 <__ssputs_r+0x70>
 8008c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c0c:	d026      	beq.n	8008c5c <__ssputs_r+0x6c>
 8008c0e:	6965      	ldr	r5, [r4, #20]
 8008c10:	6909      	ldr	r1, [r1, #16]
 8008c12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c16:	eba3 0901 	sub.w	r9, r3, r1
 8008c1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c1e:	1c7b      	adds	r3, r7, #1
 8008c20:	444b      	add	r3, r9
 8008c22:	106d      	asrs	r5, r5, #1
 8008c24:	429d      	cmp	r5, r3
 8008c26:	bf38      	it	cc
 8008c28:	461d      	movcc	r5, r3
 8008c2a:	0553      	lsls	r3, r2, #21
 8008c2c:	d527      	bpl.n	8008c7e <__ssputs_r+0x8e>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f000 fb24 	bl	800927c <_malloc_r>
 8008c34:	4606      	mov	r6, r0
 8008c36:	b360      	cbz	r0, 8008c92 <__ssputs_r+0xa2>
 8008c38:	6921      	ldr	r1, [r4, #16]
 8008c3a:	464a      	mov	r2, r9
 8008c3c:	f7ff ff80 	bl	8008b40 <memcpy>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	6126      	str	r6, [r4, #16]
 8008c4e:	6165      	str	r5, [r4, #20]
 8008c50:	444e      	add	r6, r9
 8008c52:	eba5 0509 	sub.w	r5, r5, r9
 8008c56:	6026      	str	r6, [r4, #0]
 8008c58:	60a5      	str	r5, [r4, #8]
 8008c5a:	463e      	mov	r6, r7
 8008c5c:	42be      	cmp	r6, r7
 8008c5e:	d900      	bls.n	8008c62 <__ssputs_r+0x72>
 8008c60:	463e      	mov	r6, r7
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	4632      	mov	r2, r6
 8008c66:	4641      	mov	r1, r8
 8008c68:	f000 fffe 	bl	8009c68 <memmove>
 8008c6c:	68a3      	ldr	r3, [r4, #8]
 8008c6e:	1b9b      	subs	r3, r3, r6
 8008c70:	60a3      	str	r3, [r4, #8]
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	4433      	add	r3, r6
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7e:	462a      	mov	r2, r5
 8008c80:	f000 fed8 	bl	8009a34 <_realloc_r>
 8008c84:	4606      	mov	r6, r0
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d1e0      	bne.n	8008c4c <__ssputs_r+0x5c>
 8008c8a:	6921      	ldr	r1, [r4, #16]
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	f7ff ff65 	bl	8008b5c <_free_r>
 8008c92:	230c      	movs	r3, #12
 8008c94:	f8ca 3000 	str.w	r3, [sl]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ca4:	e7e9      	b.n	8008c7a <__ssputs_r+0x8a>
	...

08008ca8 <_svfiprintf_r>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	4698      	mov	r8, r3
 8008cae:	898b      	ldrh	r3, [r1, #12]
 8008cb0:	061b      	lsls	r3, r3, #24
 8008cb2:	b09d      	sub	sp, #116	@ 0x74
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	d510      	bpl.n	8008cde <_svfiprintf_r+0x36>
 8008cbc:	690b      	ldr	r3, [r1, #16]
 8008cbe:	b973      	cbnz	r3, 8008cde <_svfiprintf_r+0x36>
 8008cc0:	2140      	movs	r1, #64	@ 0x40
 8008cc2:	f000 fadb 	bl	800927c <_malloc_r>
 8008cc6:	6028      	str	r0, [r5, #0]
 8008cc8:	6128      	str	r0, [r5, #16]
 8008cca:	b930      	cbnz	r0, 8008cda <_svfiprintf_r+0x32>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cd4:	b01d      	add	sp, #116	@ 0x74
 8008cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cda:	2340      	movs	r3, #64	@ 0x40
 8008cdc:	616b      	str	r3, [r5, #20]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ce2:	2320      	movs	r3, #32
 8008ce4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cec:	2330      	movs	r3, #48	@ 0x30
 8008cee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e8c <_svfiprintf_r+0x1e4>
 8008cf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cf6:	f04f 0901 	mov.w	r9, #1
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	469a      	mov	sl, r3
 8008cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d02:	b10a      	cbz	r2, 8008d08 <_svfiprintf_r+0x60>
 8008d04:	2a25      	cmp	r2, #37	@ 0x25
 8008d06:	d1f9      	bne.n	8008cfc <_svfiprintf_r+0x54>
 8008d08:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0c:	d00b      	beq.n	8008d26 <_svfiprintf_r+0x7e>
 8008d0e:	465b      	mov	r3, fp
 8008d10:	4622      	mov	r2, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7ff ff6b 	bl	8008bf0 <__ssputs_r>
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	f000 80a7 	beq.w	8008e6e <_svfiprintf_r+0x1c6>
 8008d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d22:	445a      	add	r2, fp
 8008d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d26:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 809f 	beq.w	8008e6e <_svfiprintf_r+0x1c6>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d3a:	f10a 0a01 	add.w	sl, sl, #1
 8008d3e:	9304      	str	r3, [sp, #16]
 8008d40:	9307      	str	r3, [sp, #28]
 8008d42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d46:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d48:	4654      	mov	r4, sl
 8008d4a:	2205      	movs	r2, #5
 8008d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d50:	484e      	ldr	r0, [pc, #312]	@ (8008e8c <_svfiprintf_r+0x1e4>)
 8008d52:	f7f7 fa5d 	bl	8000210 <memchr>
 8008d56:	9a04      	ldr	r2, [sp, #16]
 8008d58:	b9d8      	cbnz	r0, 8008d92 <_svfiprintf_r+0xea>
 8008d5a:	06d0      	lsls	r0, r2, #27
 8008d5c:	bf44      	itt	mi
 8008d5e:	2320      	movmi	r3, #32
 8008d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d64:	0711      	lsls	r1, r2, #28
 8008d66:	bf44      	itt	mi
 8008d68:	232b      	movmi	r3, #43	@ 0x2b
 8008d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d74:	d015      	beq.n	8008da2 <_svfiprintf_r+0xfa>
 8008d76:	9a07      	ldr	r2, [sp, #28]
 8008d78:	4654      	mov	r4, sl
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	f04f 0c0a 	mov.w	ip, #10
 8008d80:	4621      	mov	r1, r4
 8008d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d86:	3b30      	subs	r3, #48	@ 0x30
 8008d88:	2b09      	cmp	r3, #9
 8008d8a:	d94b      	bls.n	8008e24 <_svfiprintf_r+0x17c>
 8008d8c:	b1b0      	cbz	r0, 8008dbc <_svfiprintf_r+0x114>
 8008d8e:	9207      	str	r2, [sp, #28]
 8008d90:	e014      	b.n	8008dbc <_svfiprintf_r+0x114>
 8008d92:	eba0 0308 	sub.w	r3, r0, r8
 8008d96:	fa09 f303 	lsl.w	r3, r9, r3
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	46a2      	mov	sl, r4
 8008da0:	e7d2      	b.n	8008d48 <_svfiprintf_r+0xa0>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	1d19      	adds	r1, r3, #4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	9103      	str	r1, [sp, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bfbb      	ittet	lt
 8008dae:	425b      	neglt	r3, r3
 8008db0:	f042 0202 	orrlt.w	r2, r2, #2
 8008db4:	9307      	strge	r3, [sp, #28]
 8008db6:	9307      	strlt	r3, [sp, #28]
 8008db8:	bfb8      	it	lt
 8008dba:	9204      	strlt	r2, [sp, #16]
 8008dbc:	7823      	ldrb	r3, [r4, #0]
 8008dbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dc0:	d10a      	bne.n	8008dd8 <_svfiprintf_r+0x130>
 8008dc2:	7863      	ldrb	r3, [r4, #1]
 8008dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dc6:	d132      	bne.n	8008e2e <_svfiprintf_r+0x186>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	1d1a      	adds	r2, r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	9203      	str	r2, [sp, #12]
 8008dd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dd4:	3402      	adds	r4, #2
 8008dd6:	9305      	str	r3, [sp, #20]
 8008dd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e9c <_svfiprintf_r+0x1f4>
 8008ddc:	7821      	ldrb	r1, [r4, #0]
 8008dde:	2203      	movs	r2, #3
 8008de0:	4650      	mov	r0, sl
 8008de2:	f7f7 fa15 	bl	8000210 <memchr>
 8008de6:	b138      	cbz	r0, 8008df8 <_svfiprintf_r+0x150>
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	eba0 000a 	sub.w	r0, r0, sl
 8008dee:	2240      	movs	r2, #64	@ 0x40
 8008df0:	4082      	lsls	r2, r0
 8008df2:	4313      	orrs	r3, r2
 8008df4:	3401      	adds	r4, #1
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfc:	4824      	ldr	r0, [pc, #144]	@ (8008e90 <_svfiprintf_r+0x1e8>)
 8008dfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e02:	2206      	movs	r2, #6
 8008e04:	f7f7 fa04 	bl	8000210 <memchr>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d036      	beq.n	8008e7a <_svfiprintf_r+0x1d2>
 8008e0c:	4b21      	ldr	r3, [pc, #132]	@ (8008e94 <_svfiprintf_r+0x1ec>)
 8008e0e:	bb1b      	cbnz	r3, 8008e58 <_svfiprintf_r+0x1b0>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	3307      	adds	r3, #7
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	3308      	adds	r3, #8
 8008e1a:	9303      	str	r3, [sp, #12]
 8008e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1e:	4433      	add	r3, r6
 8008e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e22:	e76a      	b.n	8008cfa <_svfiprintf_r+0x52>
 8008e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e28:	460c      	mov	r4, r1
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	e7a8      	b.n	8008d80 <_svfiprintf_r+0xd8>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	3401      	adds	r4, #1
 8008e32:	9305      	str	r3, [sp, #20]
 8008e34:	4619      	mov	r1, r3
 8008e36:	f04f 0c0a 	mov.w	ip, #10
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e40:	3a30      	subs	r2, #48	@ 0x30
 8008e42:	2a09      	cmp	r2, #9
 8008e44:	d903      	bls.n	8008e4e <_svfiprintf_r+0x1a6>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0c6      	beq.n	8008dd8 <_svfiprintf_r+0x130>
 8008e4a:	9105      	str	r1, [sp, #20]
 8008e4c:	e7c4      	b.n	8008dd8 <_svfiprintf_r+0x130>
 8008e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e52:	4604      	mov	r4, r0
 8008e54:	2301      	movs	r3, #1
 8008e56:	e7f0      	b.n	8008e3a <_svfiprintf_r+0x192>
 8008e58:	ab03      	add	r3, sp, #12
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e98 <_svfiprintf_r+0x1f0>)
 8008e60:	a904      	add	r1, sp, #16
 8008e62:	4638      	mov	r0, r7
 8008e64:	f3af 8000 	nop.w
 8008e68:	1c42      	adds	r2, r0, #1
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	d1d6      	bne.n	8008e1c <_svfiprintf_r+0x174>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	065b      	lsls	r3, r3, #25
 8008e72:	f53f af2d 	bmi.w	8008cd0 <_svfiprintf_r+0x28>
 8008e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e78:	e72c      	b.n	8008cd4 <_svfiprintf_r+0x2c>
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <_svfiprintf_r+0x1f0>)
 8008e82:	a904      	add	r1, sp, #16
 8008e84:	4638      	mov	r0, r7
 8008e86:	f000 fae7 	bl	8009458 <_printf_i>
 8008e8a:	e7ed      	b.n	8008e68 <_svfiprintf_r+0x1c0>
 8008e8c:	0800a200 	.word	0x0800a200
 8008e90:	0800a20a 	.word	0x0800a20a
 8008e94:	00000000 	.word	0x00000000
 8008e98:	08008bf1 	.word	0x08008bf1
 8008e9c:	0800a206 	.word	0x0800a206

08008ea0 <_sungetc_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	1c4b      	adds	r3, r1, #1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	d103      	bne.n	8008eb0 <_sungetc_r+0x10>
 8008ea8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008eac:	4628      	mov	r0, r5
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	8993      	ldrh	r3, [r2, #12]
 8008eb2:	f023 0320 	bic.w	r3, r3, #32
 8008eb6:	8193      	strh	r3, [r2, #12]
 8008eb8:	6853      	ldr	r3, [r2, #4]
 8008eba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008ebc:	b2cd      	uxtb	r5, r1
 8008ebe:	b18a      	cbz	r2, 8008ee4 <_sungetc_r+0x44>
 8008ec0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	dd08      	ble.n	8008ed8 <_sungetc_r+0x38>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	1e5a      	subs	r2, r3, #1
 8008eca:	6022      	str	r2, [r4, #0]
 8008ecc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6063      	str	r3, [r4, #4]
 8008ed6:	e7e9      	b.n	8008eac <_sungetc_r+0xc>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	f000 fd71 	bl	80099c0 <__submore>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d0f1      	beq.n	8008ec6 <_sungetc_r+0x26>
 8008ee2:	e7e1      	b.n	8008ea8 <_sungetc_r+0x8>
 8008ee4:	6921      	ldr	r1, [r4, #16]
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	b141      	cbz	r1, 8008efc <_sungetc_r+0x5c>
 8008eea:	4291      	cmp	r1, r2
 8008eec:	d206      	bcs.n	8008efc <_sungetc_r+0x5c>
 8008eee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008ef2:	42a9      	cmp	r1, r5
 8008ef4:	d102      	bne.n	8008efc <_sungetc_r+0x5c>
 8008ef6:	3a01      	subs	r2, #1
 8008ef8:	6022      	str	r2, [r4, #0]
 8008efa:	e7ea      	b.n	8008ed2 <_sungetc_r+0x32>
 8008efc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f06:	2303      	movs	r3, #3
 8008f08:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008f0a:	4623      	mov	r3, r4
 8008f0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	2301      	movs	r3, #1
 8008f14:	e7de      	b.n	8008ed4 <_sungetc_r+0x34>

08008f16 <__ssrefill_r>:
 8008f16:	b510      	push	{r4, lr}
 8008f18:	460c      	mov	r4, r1
 8008f1a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008f1c:	b169      	cbz	r1, 8008f3a <__ssrefill_r+0x24>
 8008f1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f22:	4299      	cmp	r1, r3
 8008f24:	d001      	beq.n	8008f2a <__ssrefill_r+0x14>
 8008f26:	f7ff fe19 	bl	8008b5c <_free_r>
 8008f2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f2c:	6063      	str	r3, [r4, #4]
 8008f2e:	2000      	movs	r0, #0
 8008f30:	6360      	str	r0, [r4, #52]	@ 0x34
 8008f32:	b113      	cbz	r3, 8008f3a <__ssrefill_r+0x24>
 8008f34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6063      	str	r3, [r4, #4]
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f043 0320 	orr.w	r3, r3, #32
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f4e:	e7f3      	b.n	8008f38 <__ssrefill_r+0x22>

08008f50 <__ssvfiscanf_r>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	460c      	mov	r4, r1
 8008f56:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008f60:	49a5      	ldr	r1, [pc, #660]	@ (80091f8 <__ssvfiscanf_r+0x2a8>)
 8008f62:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008f64:	f10d 0804 	add.w	r8, sp, #4
 8008f68:	49a4      	ldr	r1, [pc, #656]	@ (80091fc <__ssvfiscanf_r+0x2ac>)
 8008f6a:	4fa5      	ldr	r7, [pc, #660]	@ (8009200 <__ssvfiscanf_r+0x2b0>)
 8008f6c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008f70:	4606      	mov	r6, r0
 8008f72:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	7813      	ldrb	r3, [r2, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 8158 	beq.w	800922e <__ssvfiscanf_r+0x2de>
 8008f7e:	5cf9      	ldrb	r1, [r7, r3]
 8008f80:	f011 0108 	ands.w	r1, r1, #8
 8008f84:	f102 0501 	add.w	r5, r2, #1
 8008f88:	d019      	beq.n	8008fbe <__ssvfiscanf_r+0x6e>
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	dd0f      	ble.n	8008fb0 <__ssvfiscanf_r+0x60>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	781a      	ldrb	r2, [r3, #0]
 8008f94:	5cba      	ldrb	r2, [r7, r2]
 8008f96:	0712      	lsls	r2, r2, #28
 8008f98:	d401      	bmi.n	8008f9e <__ssvfiscanf_r+0x4e>
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	e7eb      	b.n	8008f76 <__ssvfiscanf_r+0x26>
 8008f9e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	9245      	str	r2, [sp, #276]	@ 0x114
 8008fa4:	6862      	ldr	r2, [r4, #4]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	3a01      	subs	r2, #1
 8008faa:	6062      	str	r2, [r4, #4]
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	e7ec      	b.n	8008f8a <__ssvfiscanf_r+0x3a>
 8008fb0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4798      	blx	r3
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d0e9      	beq.n	8008f90 <__ssvfiscanf_r+0x40>
 8008fbc:	e7ed      	b.n	8008f9a <__ssvfiscanf_r+0x4a>
 8008fbe:	2b25      	cmp	r3, #37	@ 0x25
 8008fc0:	d012      	beq.n	8008fe8 <__ssvfiscanf_r+0x98>
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f340 8093 	ble.w	80090f2 <__ssvfiscanf_r+0x1a2>
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	7813      	ldrb	r3, [r2, #0]
 8008fd0:	454b      	cmp	r3, r9
 8008fd2:	f040 812c 	bne.w	800922e <__ssvfiscanf_r+0x2de>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	6063      	str	r3, [r4, #4]
 8008fdc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008fde:	3201      	adds	r2, #1
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	6022      	str	r2, [r4, #0]
 8008fe4:	9345      	str	r3, [sp, #276]	@ 0x114
 8008fe6:	e7d8      	b.n	8008f9a <__ssvfiscanf_r+0x4a>
 8008fe8:	9141      	str	r1, [sp, #260]	@ 0x104
 8008fea:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008fec:	7853      	ldrb	r3, [r2, #1]
 8008fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ff0:	bf02      	ittt	eq
 8008ff2:	2310      	moveq	r3, #16
 8008ff4:	1c95      	addeq	r5, r2, #2
 8008ff6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008ff8:	220a      	movs	r2, #10
 8008ffa:	46a9      	mov	r9, r5
 8008ffc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009000:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009004:	2b09      	cmp	r3, #9
 8009006:	d91e      	bls.n	8009046 <__ssvfiscanf_r+0xf6>
 8009008:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009204 <__ssvfiscanf_r+0x2b4>
 800900c:	2203      	movs	r2, #3
 800900e:	4650      	mov	r0, sl
 8009010:	f7f7 f8fe 	bl	8000210 <memchr>
 8009014:	b138      	cbz	r0, 8009026 <__ssvfiscanf_r+0xd6>
 8009016:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009018:	eba0 000a 	sub.w	r0, r0, sl
 800901c:	2301      	movs	r3, #1
 800901e:	4083      	lsls	r3, r0
 8009020:	4313      	orrs	r3, r2
 8009022:	9341      	str	r3, [sp, #260]	@ 0x104
 8009024:	464d      	mov	r5, r9
 8009026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800902a:	2b78      	cmp	r3, #120	@ 0x78
 800902c:	d806      	bhi.n	800903c <__ssvfiscanf_r+0xec>
 800902e:	2b57      	cmp	r3, #87	@ 0x57
 8009030:	d810      	bhi.n	8009054 <__ssvfiscanf_r+0x104>
 8009032:	2b25      	cmp	r3, #37	@ 0x25
 8009034:	d0c5      	beq.n	8008fc2 <__ssvfiscanf_r+0x72>
 8009036:	d857      	bhi.n	80090e8 <__ssvfiscanf_r+0x198>
 8009038:	2b00      	cmp	r3, #0
 800903a:	d065      	beq.n	8009108 <__ssvfiscanf_r+0x1b8>
 800903c:	2303      	movs	r3, #3
 800903e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009040:	230a      	movs	r3, #10
 8009042:	9342      	str	r3, [sp, #264]	@ 0x108
 8009044:	e078      	b.n	8009138 <__ssvfiscanf_r+0x1e8>
 8009046:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009048:	fb02 1103 	mla	r1, r2, r3, r1
 800904c:	3930      	subs	r1, #48	@ 0x30
 800904e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009050:	464d      	mov	r5, r9
 8009052:	e7d2      	b.n	8008ffa <__ssvfiscanf_r+0xaa>
 8009054:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009058:	2a20      	cmp	r2, #32
 800905a:	d8ef      	bhi.n	800903c <__ssvfiscanf_r+0xec>
 800905c:	a101      	add	r1, pc, #4	@ (adr r1, 8009064 <__ssvfiscanf_r+0x114>)
 800905e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009062:	bf00      	nop
 8009064:	08009117 	.word	0x08009117
 8009068:	0800903d 	.word	0x0800903d
 800906c:	0800903d 	.word	0x0800903d
 8009070:	08009171 	.word	0x08009171
 8009074:	0800903d 	.word	0x0800903d
 8009078:	0800903d 	.word	0x0800903d
 800907c:	0800903d 	.word	0x0800903d
 8009080:	0800903d 	.word	0x0800903d
 8009084:	0800903d 	.word	0x0800903d
 8009088:	0800903d 	.word	0x0800903d
 800908c:	0800903d 	.word	0x0800903d
 8009090:	08009187 	.word	0x08009187
 8009094:	0800916d 	.word	0x0800916d
 8009098:	080090ef 	.word	0x080090ef
 800909c:	080090ef 	.word	0x080090ef
 80090a0:	080090ef 	.word	0x080090ef
 80090a4:	0800903d 	.word	0x0800903d
 80090a8:	08009129 	.word	0x08009129
 80090ac:	0800903d 	.word	0x0800903d
 80090b0:	0800903d 	.word	0x0800903d
 80090b4:	0800903d 	.word	0x0800903d
 80090b8:	0800903d 	.word	0x0800903d
 80090bc:	08009197 	.word	0x08009197
 80090c0:	08009131 	.word	0x08009131
 80090c4:	0800910f 	.word	0x0800910f
 80090c8:	0800903d 	.word	0x0800903d
 80090cc:	0800903d 	.word	0x0800903d
 80090d0:	08009193 	.word	0x08009193
 80090d4:	0800903d 	.word	0x0800903d
 80090d8:	0800916d 	.word	0x0800916d
 80090dc:	0800903d 	.word	0x0800903d
 80090e0:	0800903d 	.word	0x0800903d
 80090e4:	08009117 	.word	0x08009117
 80090e8:	3b45      	subs	r3, #69	@ 0x45
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d8a6      	bhi.n	800903c <__ssvfiscanf_r+0xec>
 80090ee:	2305      	movs	r3, #5
 80090f0:	e021      	b.n	8009136 <__ssvfiscanf_r+0x1e6>
 80090f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80090f4:	4621      	mov	r1, r4
 80090f6:	4630      	mov	r0, r6
 80090f8:	4798      	blx	r3
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f43f af66 	beq.w	8008fcc <__ssvfiscanf_r+0x7c>
 8009100:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009102:	2800      	cmp	r0, #0
 8009104:	f040 808b 	bne.w	800921e <__ssvfiscanf_r+0x2ce>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800910c:	e08b      	b.n	8009226 <__ssvfiscanf_r+0x2d6>
 800910e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009110:	f042 0220 	orr.w	r2, r2, #32
 8009114:	9241      	str	r2, [sp, #260]	@ 0x104
 8009116:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800911c:	9241      	str	r2, [sp, #260]	@ 0x104
 800911e:	2210      	movs	r2, #16
 8009120:	2b6e      	cmp	r3, #110	@ 0x6e
 8009122:	9242      	str	r2, [sp, #264]	@ 0x108
 8009124:	d902      	bls.n	800912c <__ssvfiscanf_r+0x1dc>
 8009126:	e005      	b.n	8009134 <__ssvfiscanf_r+0x1e4>
 8009128:	2300      	movs	r3, #0
 800912a:	9342      	str	r3, [sp, #264]	@ 0x108
 800912c:	2303      	movs	r3, #3
 800912e:	e002      	b.n	8009136 <__ssvfiscanf_r+0x1e6>
 8009130:	2308      	movs	r3, #8
 8009132:	9342      	str	r3, [sp, #264]	@ 0x108
 8009134:	2304      	movs	r3, #4
 8009136:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dd39      	ble.n	80091b2 <__ssvfiscanf_r+0x262>
 800913e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009140:	0659      	lsls	r1, r3, #25
 8009142:	d404      	bmi.n	800914e <__ssvfiscanf_r+0x1fe>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	5cba      	ldrb	r2, [r7, r2]
 800914a:	0712      	lsls	r2, r2, #28
 800914c:	d438      	bmi.n	80091c0 <__ssvfiscanf_r+0x270>
 800914e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009150:	2b02      	cmp	r3, #2
 8009152:	dc47      	bgt.n	80091e4 <__ssvfiscanf_r+0x294>
 8009154:	466b      	mov	r3, sp
 8009156:	4622      	mov	r2, r4
 8009158:	a941      	add	r1, sp, #260	@ 0x104
 800915a:	4630      	mov	r0, r6
 800915c:	f000 fa9c 	bl	8009698 <_scanf_chars>
 8009160:	2801      	cmp	r0, #1
 8009162:	d064      	beq.n	800922e <__ssvfiscanf_r+0x2de>
 8009164:	2802      	cmp	r0, #2
 8009166:	f47f af18 	bne.w	8008f9a <__ssvfiscanf_r+0x4a>
 800916a:	e7c9      	b.n	8009100 <__ssvfiscanf_r+0x1b0>
 800916c:	220a      	movs	r2, #10
 800916e:	e7d7      	b.n	8009120 <__ssvfiscanf_r+0x1d0>
 8009170:	4629      	mov	r1, r5
 8009172:	4640      	mov	r0, r8
 8009174:	f000 fbde 	bl	8009934 <__sccl>
 8009178:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800917a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009180:	4605      	mov	r5, r0
 8009182:	2301      	movs	r3, #1
 8009184:	e7d7      	b.n	8009136 <__ssvfiscanf_r+0x1e6>
 8009186:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800918c:	9341      	str	r3, [sp, #260]	@ 0x104
 800918e:	2300      	movs	r3, #0
 8009190:	e7d1      	b.n	8009136 <__ssvfiscanf_r+0x1e6>
 8009192:	2302      	movs	r3, #2
 8009194:	e7cf      	b.n	8009136 <__ssvfiscanf_r+0x1e6>
 8009196:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009198:	06c3      	lsls	r3, r0, #27
 800919a:	f53f aefe 	bmi.w	8008f9a <__ssvfiscanf_r+0x4a>
 800919e:	9b00      	ldr	r3, [sp, #0]
 80091a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80091a2:	1d19      	adds	r1, r3, #4
 80091a4:	9100      	str	r1, [sp, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	07c0      	lsls	r0, r0, #31
 80091aa:	bf4c      	ite	mi
 80091ac:	801a      	strhmi	r2, [r3, #0]
 80091ae:	601a      	strpl	r2, [r3, #0]
 80091b0:	e6f3      	b.n	8008f9a <__ssvfiscanf_r+0x4a>
 80091b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80091b4:	4621      	mov	r1, r4
 80091b6:	4630      	mov	r0, r6
 80091b8:	4798      	blx	r3
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0bf      	beq.n	800913e <__ssvfiscanf_r+0x1ee>
 80091be:	e79f      	b.n	8009100 <__ssvfiscanf_r+0x1b0>
 80091c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80091c2:	3201      	adds	r2, #1
 80091c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80091c6:	6862      	ldr	r2, [r4, #4]
 80091c8:	3a01      	subs	r2, #1
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	6062      	str	r2, [r4, #4]
 80091ce:	dd02      	ble.n	80091d6 <__ssvfiscanf_r+0x286>
 80091d0:	3301      	adds	r3, #1
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	e7b6      	b.n	8009144 <__ssvfiscanf_r+0x1f4>
 80091d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80091d8:	4621      	mov	r1, r4
 80091da:	4630      	mov	r0, r6
 80091dc:	4798      	blx	r3
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0b0      	beq.n	8009144 <__ssvfiscanf_r+0x1f4>
 80091e2:	e78d      	b.n	8009100 <__ssvfiscanf_r+0x1b0>
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	dc0f      	bgt.n	8009208 <__ssvfiscanf_r+0x2b8>
 80091e8:	466b      	mov	r3, sp
 80091ea:	4622      	mov	r2, r4
 80091ec:	a941      	add	r1, sp, #260	@ 0x104
 80091ee:	4630      	mov	r0, r6
 80091f0:	f000 faac 	bl	800974c <_scanf_i>
 80091f4:	e7b4      	b.n	8009160 <__ssvfiscanf_r+0x210>
 80091f6:	bf00      	nop
 80091f8:	08008ea1 	.word	0x08008ea1
 80091fc:	08008f17 	.word	0x08008f17
 8009200:	0800a24f 	.word	0x0800a24f
 8009204:	0800a206 	.word	0x0800a206
 8009208:	4b0a      	ldr	r3, [pc, #40]	@ (8009234 <__ssvfiscanf_r+0x2e4>)
 800920a:	2b00      	cmp	r3, #0
 800920c:	f43f aec5 	beq.w	8008f9a <__ssvfiscanf_r+0x4a>
 8009210:	466b      	mov	r3, sp
 8009212:	4622      	mov	r2, r4
 8009214:	a941      	add	r1, sp, #260	@ 0x104
 8009216:	4630      	mov	r0, r6
 8009218:	f3af 8000 	nop.w
 800921c:	e7a0      	b.n	8009160 <__ssvfiscanf_r+0x210>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	065b      	lsls	r3, r3, #25
 8009222:	f53f af71 	bmi.w	8009108 <__ssvfiscanf_r+0x1b8>
 8009226:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009230:	e7f9      	b.n	8009226 <__ssvfiscanf_r+0x2d6>
 8009232:	bf00      	nop
 8009234:	00000000 	.word	0x00000000

08009238 <sbrk_aligned>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4e0f      	ldr	r6, [pc, #60]	@ (8009278 <sbrk_aligned+0x40>)
 800923c:	460c      	mov	r4, r1
 800923e:	6831      	ldr	r1, [r6, #0]
 8009240:	4605      	mov	r5, r0
 8009242:	b911      	cbnz	r1, 800924a <sbrk_aligned+0x12>
 8009244:	f000 fd2a 	bl	8009c9c <_sbrk_r>
 8009248:	6030      	str	r0, [r6, #0]
 800924a:	4621      	mov	r1, r4
 800924c:	4628      	mov	r0, r5
 800924e:	f000 fd25 	bl	8009c9c <_sbrk_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d103      	bne.n	800925e <sbrk_aligned+0x26>
 8009256:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800925a:	4620      	mov	r0, r4
 800925c:	bd70      	pop	{r4, r5, r6, pc}
 800925e:	1cc4      	adds	r4, r0, #3
 8009260:	f024 0403 	bic.w	r4, r4, #3
 8009264:	42a0      	cmp	r0, r4
 8009266:	d0f8      	beq.n	800925a <sbrk_aligned+0x22>
 8009268:	1a21      	subs	r1, r4, r0
 800926a:	4628      	mov	r0, r5
 800926c:	f000 fd16 	bl	8009c9c <_sbrk_r>
 8009270:	3001      	adds	r0, #1
 8009272:	d1f2      	bne.n	800925a <sbrk_aligned+0x22>
 8009274:	e7ef      	b.n	8009256 <sbrk_aligned+0x1e>
 8009276:	bf00      	nop
 8009278:	2001316c 	.word	0x2001316c

0800927c <_malloc_r>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	1ccd      	adds	r5, r1, #3
 8009282:	f025 0503 	bic.w	r5, r5, #3
 8009286:	3508      	adds	r5, #8
 8009288:	2d0c      	cmp	r5, #12
 800928a:	bf38      	it	cc
 800928c:	250c      	movcc	r5, #12
 800928e:	2d00      	cmp	r5, #0
 8009290:	4606      	mov	r6, r0
 8009292:	db01      	blt.n	8009298 <_malloc_r+0x1c>
 8009294:	42a9      	cmp	r1, r5
 8009296:	d904      	bls.n	80092a2 <_malloc_r+0x26>
 8009298:	230c      	movs	r3, #12
 800929a:	6033      	str	r3, [r6, #0]
 800929c:	2000      	movs	r0, #0
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009378 <_malloc_r+0xfc>
 80092a6:	f000 fb7f 	bl	80099a8 <__malloc_lock>
 80092aa:	f8d8 3000 	ldr.w	r3, [r8]
 80092ae:	461c      	mov	r4, r3
 80092b0:	bb44      	cbnz	r4, 8009304 <_malloc_r+0x88>
 80092b2:	4629      	mov	r1, r5
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7ff ffbf 	bl	8009238 <sbrk_aligned>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	4604      	mov	r4, r0
 80092be:	d158      	bne.n	8009372 <_malloc_r+0xf6>
 80092c0:	f8d8 4000 	ldr.w	r4, [r8]
 80092c4:	4627      	mov	r7, r4
 80092c6:	2f00      	cmp	r7, #0
 80092c8:	d143      	bne.n	8009352 <_malloc_r+0xd6>
 80092ca:	2c00      	cmp	r4, #0
 80092cc:	d04b      	beq.n	8009366 <_malloc_r+0xea>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	4639      	mov	r1, r7
 80092d2:	4630      	mov	r0, r6
 80092d4:	eb04 0903 	add.w	r9, r4, r3
 80092d8:	f000 fce0 	bl	8009c9c <_sbrk_r>
 80092dc:	4581      	cmp	r9, r0
 80092de:	d142      	bne.n	8009366 <_malloc_r+0xea>
 80092e0:	6821      	ldr	r1, [r4, #0]
 80092e2:	1a6d      	subs	r5, r5, r1
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff ffa6 	bl	8009238 <sbrk_aligned>
 80092ec:	3001      	adds	r0, #1
 80092ee:	d03a      	beq.n	8009366 <_malloc_r+0xea>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	442b      	add	r3, r5
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	f8d8 3000 	ldr.w	r3, [r8]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	bb62      	cbnz	r2, 8009358 <_malloc_r+0xdc>
 80092fe:	f8c8 7000 	str.w	r7, [r8]
 8009302:	e00f      	b.n	8009324 <_malloc_r+0xa8>
 8009304:	6822      	ldr	r2, [r4, #0]
 8009306:	1b52      	subs	r2, r2, r5
 8009308:	d420      	bmi.n	800934c <_malloc_r+0xd0>
 800930a:	2a0b      	cmp	r2, #11
 800930c:	d917      	bls.n	800933e <_malloc_r+0xc2>
 800930e:	1961      	adds	r1, r4, r5
 8009310:	42a3      	cmp	r3, r4
 8009312:	6025      	str	r5, [r4, #0]
 8009314:	bf18      	it	ne
 8009316:	6059      	strne	r1, [r3, #4]
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	bf08      	it	eq
 800931c:	f8c8 1000 	streq.w	r1, [r8]
 8009320:	5162      	str	r2, [r4, r5]
 8009322:	604b      	str	r3, [r1, #4]
 8009324:	4630      	mov	r0, r6
 8009326:	f000 fb45 	bl	80099b4 <__malloc_unlock>
 800932a:	f104 000b 	add.w	r0, r4, #11
 800932e:	1d23      	adds	r3, r4, #4
 8009330:	f020 0007 	bic.w	r0, r0, #7
 8009334:	1ac2      	subs	r2, r0, r3
 8009336:	bf1c      	itt	ne
 8009338:	1a1b      	subne	r3, r3, r0
 800933a:	50a3      	strne	r3, [r4, r2]
 800933c:	e7af      	b.n	800929e <_malloc_r+0x22>
 800933e:	6862      	ldr	r2, [r4, #4]
 8009340:	42a3      	cmp	r3, r4
 8009342:	bf0c      	ite	eq
 8009344:	f8c8 2000 	streq.w	r2, [r8]
 8009348:	605a      	strne	r2, [r3, #4]
 800934a:	e7eb      	b.n	8009324 <_malloc_r+0xa8>
 800934c:	4623      	mov	r3, r4
 800934e:	6864      	ldr	r4, [r4, #4]
 8009350:	e7ae      	b.n	80092b0 <_malloc_r+0x34>
 8009352:	463c      	mov	r4, r7
 8009354:	687f      	ldr	r7, [r7, #4]
 8009356:	e7b6      	b.n	80092c6 <_malloc_r+0x4a>
 8009358:	461a      	mov	r2, r3
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	42a3      	cmp	r3, r4
 800935e:	d1fb      	bne.n	8009358 <_malloc_r+0xdc>
 8009360:	2300      	movs	r3, #0
 8009362:	6053      	str	r3, [r2, #4]
 8009364:	e7de      	b.n	8009324 <_malloc_r+0xa8>
 8009366:	230c      	movs	r3, #12
 8009368:	6033      	str	r3, [r6, #0]
 800936a:	4630      	mov	r0, r6
 800936c:	f000 fb22 	bl	80099b4 <__malloc_unlock>
 8009370:	e794      	b.n	800929c <_malloc_r+0x20>
 8009372:	6005      	str	r5, [r0, #0]
 8009374:	e7d6      	b.n	8009324 <_malloc_r+0xa8>
 8009376:	bf00      	nop
 8009378:	20013170 	.word	0x20013170

0800937c <_printf_common>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	4616      	mov	r6, r2
 8009382:	4698      	mov	r8, r3
 8009384:	688a      	ldr	r2, [r1, #8]
 8009386:	690b      	ldr	r3, [r1, #16]
 8009388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800938c:	4293      	cmp	r3, r2
 800938e:	bfb8      	it	lt
 8009390:	4613      	movlt	r3, r2
 8009392:	6033      	str	r3, [r6, #0]
 8009394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009398:	4607      	mov	r7, r0
 800939a:	460c      	mov	r4, r1
 800939c:	b10a      	cbz	r2, 80093a2 <_printf_common+0x26>
 800939e:	3301      	adds	r3, #1
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	0699      	lsls	r1, r3, #26
 80093a6:	bf42      	ittt	mi
 80093a8:	6833      	ldrmi	r3, [r6, #0]
 80093aa:	3302      	addmi	r3, #2
 80093ac:	6033      	strmi	r3, [r6, #0]
 80093ae:	6825      	ldr	r5, [r4, #0]
 80093b0:	f015 0506 	ands.w	r5, r5, #6
 80093b4:	d106      	bne.n	80093c4 <_printf_common+0x48>
 80093b6:	f104 0a19 	add.w	sl, r4, #25
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	6832      	ldr	r2, [r6, #0]
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	42ab      	cmp	r3, r5
 80093c2:	dc26      	bgt.n	8009412 <_printf_common+0x96>
 80093c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	3b00      	subs	r3, #0
 80093cc:	bf18      	it	ne
 80093ce:	2301      	movne	r3, #1
 80093d0:	0692      	lsls	r2, r2, #26
 80093d2:	d42b      	bmi.n	800942c <_printf_common+0xb0>
 80093d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093d8:	4641      	mov	r1, r8
 80093da:	4638      	mov	r0, r7
 80093dc:	47c8      	blx	r9
 80093de:	3001      	adds	r0, #1
 80093e0:	d01e      	beq.n	8009420 <_printf_common+0xa4>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	6922      	ldr	r2, [r4, #16]
 80093e6:	f003 0306 	and.w	r3, r3, #6
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	bf02      	ittt	eq
 80093ee:	68e5      	ldreq	r5, [r4, #12]
 80093f0:	6833      	ldreq	r3, [r6, #0]
 80093f2:	1aed      	subeq	r5, r5, r3
 80093f4:	68a3      	ldr	r3, [r4, #8]
 80093f6:	bf0c      	ite	eq
 80093f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093fc:	2500      	movne	r5, #0
 80093fe:	4293      	cmp	r3, r2
 8009400:	bfc4      	itt	gt
 8009402:	1a9b      	subgt	r3, r3, r2
 8009404:	18ed      	addgt	r5, r5, r3
 8009406:	2600      	movs	r6, #0
 8009408:	341a      	adds	r4, #26
 800940a:	42b5      	cmp	r5, r6
 800940c:	d11a      	bne.n	8009444 <_printf_common+0xc8>
 800940e:	2000      	movs	r0, #0
 8009410:	e008      	b.n	8009424 <_printf_common+0xa8>
 8009412:	2301      	movs	r3, #1
 8009414:	4652      	mov	r2, sl
 8009416:	4641      	mov	r1, r8
 8009418:	4638      	mov	r0, r7
 800941a:	47c8      	blx	r9
 800941c:	3001      	adds	r0, #1
 800941e:	d103      	bne.n	8009428 <_printf_common+0xac>
 8009420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	3501      	adds	r5, #1
 800942a:	e7c6      	b.n	80093ba <_printf_common+0x3e>
 800942c:	18e1      	adds	r1, r4, r3
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	2030      	movs	r0, #48	@ 0x30
 8009432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009436:	4422      	add	r2, r4
 8009438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800943c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009440:	3302      	adds	r3, #2
 8009442:	e7c7      	b.n	80093d4 <_printf_common+0x58>
 8009444:	2301      	movs	r3, #1
 8009446:	4622      	mov	r2, r4
 8009448:	4641      	mov	r1, r8
 800944a:	4638      	mov	r0, r7
 800944c:	47c8      	blx	r9
 800944e:	3001      	adds	r0, #1
 8009450:	d0e6      	beq.n	8009420 <_printf_common+0xa4>
 8009452:	3601      	adds	r6, #1
 8009454:	e7d9      	b.n	800940a <_printf_common+0x8e>
	...

08009458 <_printf_i>:
 8009458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	7e0f      	ldrb	r7, [r1, #24]
 800945e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009460:	2f78      	cmp	r7, #120	@ 0x78
 8009462:	4691      	mov	r9, r2
 8009464:	4680      	mov	r8, r0
 8009466:	460c      	mov	r4, r1
 8009468:	469a      	mov	sl, r3
 800946a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800946e:	d807      	bhi.n	8009480 <_printf_i+0x28>
 8009470:	2f62      	cmp	r7, #98	@ 0x62
 8009472:	d80a      	bhi.n	800948a <_printf_i+0x32>
 8009474:	2f00      	cmp	r7, #0
 8009476:	f000 80d2 	beq.w	800961e <_printf_i+0x1c6>
 800947a:	2f58      	cmp	r7, #88	@ 0x58
 800947c:	f000 80b9 	beq.w	80095f2 <_printf_i+0x19a>
 8009480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009488:	e03a      	b.n	8009500 <_printf_i+0xa8>
 800948a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800948e:	2b15      	cmp	r3, #21
 8009490:	d8f6      	bhi.n	8009480 <_printf_i+0x28>
 8009492:	a101      	add	r1, pc, #4	@ (adr r1, 8009498 <_printf_i+0x40>)
 8009494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009498:	080094f1 	.word	0x080094f1
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009481 	.word	0x08009481
 80094a4:	08009481 	.word	0x08009481
 80094a8:	08009481 	.word	0x08009481
 80094ac:	08009481 	.word	0x08009481
 80094b0:	08009505 	.word	0x08009505
 80094b4:	08009481 	.word	0x08009481
 80094b8:	08009481 	.word	0x08009481
 80094bc:	08009481 	.word	0x08009481
 80094c0:	08009481 	.word	0x08009481
 80094c4:	08009605 	.word	0x08009605
 80094c8:	0800952f 	.word	0x0800952f
 80094cc:	080095bf 	.word	0x080095bf
 80094d0:	08009481 	.word	0x08009481
 80094d4:	08009481 	.word	0x08009481
 80094d8:	08009627 	.word	0x08009627
 80094dc:	08009481 	.word	0x08009481
 80094e0:	0800952f 	.word	0x0800952f
 80094e4:	08009481 	.word	0x08009481
 80094e8:	08009481 	.word	0x08009481
 80094ec:	080095c7 	.word	0x080095c7
 80094f0:	6833      	ldr	r3, [r6, #0]
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6032      	str	r2, [r6, #0]
 80094f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009500:	2301      	movs	r3, #1
 8009502:	e09d      	b.n	8009640 <_printf_i+0x1e8>
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	6820      	ldr	r0, [r4, #0]
 8009508:	1d19      	adds	r1, r3, #4
 800950a:	6031      	str	r1, [r6, #0]
 800950c:	0606      	lsls	r6, r0, #24
 800950e:	d501      	bpl.n	8009514 <_printf_i+0xbc>
 8009510:	681d      	ldr	r5, [r3, #0]
 8009512:	e003      	b.n	800951c <_printf_i+0xc4>
 8009514:	0645      	lsls	r5, r0, #25
 8009516:	d5fb      	bpl.n	8009510 <_printf_i+0xb8>
 8009518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800951c:	2d00      	cmp	r5, #0
 800951e:	da03      	bge.n	8009528 <_printf_i+0xd0>
 8009520:	232d      	movs	r3, #45	@ 0x2d
 8009522:	426d      	negs	r5, r5
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009528:	4859      	ldr	r0, [pc, #356]	@ (8009690 <_printf_i+0x238>)
 800952a:	230a      	movs	r3, #10
 800952c:	e011      	b.n	8009552 <_printf_i+0xfa>
 800952e:	6821      	ldr	r1, [r4, #0]
 8009530:	6833      	ldr	r3, [r6, #0]
 8009532:	0608      	lsls	r0, r1, #24
 8009534:	f853 5b04 	ldr.w	r5, [r3], #4
 8009538:	d402      	bmi.n	8009540 <_printf_i+0xe8>
 800953a:	0649      	lsls	r1, r1, #25
 800953c:	bf48      	it	mi
 800953e:	b2ad      	uxthmi	r5, r5
 8009540:	2f6f      	cmp	r7, #111	@ 0x6f
 8009542:	4853      	ldr	r0, [pc, #332]	@ (8009690 <_printf_i+0x238>)
 8009544:	6033      	str	r3, [r6, #0]
 8009546:	bf14      	ite	ne
 8009548:	230a      	movne	r3, #10
 800954a:	2308      	moveq	r3, #8
 800954c:	2100      	movs	r1, #0
 800954e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009552:	6866      	ldr	r6, [r4, #4]
 8009554:	60a6      	str	r6, [r4, #8]
 8009556:	2e00      	cmp	r6, #0
 8009558:	bfa2      	ittt	ge
 800955a:	6821      	ldrge	r1, [r4, #0]
 800955c:	f021 0104 	bicge.w	r1, r1, #4
 8009560:	6021      	strge	r1, [r4, #0]
 8009562:	b90d      	cbnz	r5, 8009568 <_printf_i+0x110>
 8009564:	2e00      	cmp	r6, #0
 8009566:	d04b      	beq.n	8009600 <_printf_i+0x1a8>
 8009568:	4616      	mov	r6, r2
 800956a:	fbb5 f1f3 	udiv	r1, r5, r3
 800956e:	fb03 5711 	mls	r7, r3, r1, r5
 8009572:	5dc7      	ldrb	r7, [r0, r7]
 8009574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009578:	462f      	mov	r7, r5
 800957a:	42bb      	cmp	r3, r7
 800957c:	460d      	mov	r5, r1
 800957e:	d9f4      	bls.n	800956a <_printf_i+0x112>
 8009580:	2b08      	cmp	r3, #8
 8009582:	d10b      	bne.n	800959c <_printf_i+0x144>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07df      	lsls	r7, r3, #31
 8009588:	d508      	bpl.n	800959c <_printf_i+0x144>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6861      	ldr	r1, [r4, #4]
 800958e:	4299      	cmp	r1, r3
 8009590:	bfde      	ittt	le
 8009592:	2330      	movle	r3, #48	@ 0x30
 8009594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009598:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800959c:	1b92      	subs	r2, r2, r6
 800959e:	6122      	str	r2, [r4, #16]
 80095a0:	f8cd a000 	str.w	sl, [sp]
 80095a4:	464b      	mov	r3, r9
 80095a6:	aa03      	add	r2, sp, #12
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fee6 	bl	800937c <_printf_common>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d14a      	bne.n	800964a <_printf_i+0x1f2>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095b8:	b004      	add	sp, #16
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	f043 0320 	orr.w	r3, r3, #32
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	4833      	ldr	r0, [pc, #204]	@ (8009694 <_printf_i+0x23c>)
 80095c8:	2778      	movs	r7, #120	@ 0x78
 80095ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6831      	ldr	r1, [r6, #0]
 80095d2:	061f      	lsls	r7, r3, #24
 80095d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095d8:	d402      	bmi.n	80095e0 <_printf_i+0x188>
 80095da:	065f      	lsls	r7, r3, #25
 80095dc:	bf48      	it	mi
 80095de:	b2ad      	uxthmi	r5, r5
 80095e0:	6031      	str	r1, [r6, #0]
 80095e2:	07d9      	lsls	r1, r3, #31
 80095e4:	bf44      	itt	mi
 80095e6:	f043 0320 	orrmi.w	r3, r3, #32
 80095ea:	6023      	strmi	r3, [r4, #0]
 80095ec:	b11d      	cbz	r5, 80095f6 <_printf_i+0x19e>
 80095ee:	2310      	movs	r3, #16
 80095f0:	e7ac      	b.n	800954c <_printf_i+0xf4>
 80095f2:	4827      	ldr	r0, [pc, #156]	@ (8009690 <_printf_i+0x238>)
 80095f4:	e7e9      	b.n	80095ca <_printf_i+0x172>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	f023 0320 	bic.w	r3, r3, #32
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	e7f6      	b.n	80095ee <_printf_i+0x196>
 8009600:	4616      	mov	r6, r2
 8009602:	e7bd      	b.n	8009580 <_printf_i+0x128>
 8009604:	6833      	ldr	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	6961      	ldr	r1, [r4, #20]
 800960a:	1d18      	adds	r0, r3, #4
 800960c:	6030      	str	r0, [r6, #0]
 800960e:	062e      	lsls	r6, r5, #24
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	d501      	bpl.n	8009618 <_printf_i+0x1c0>
 8009614:	6019      	str	r1, [r3, #0]
 8009616:	e002      	b.n	800961e <_printf_i+0x1c6>
 8009618:	0668      	lsls	r0, r5, #25
 800961a:	d5fb      	bpl.n	8009614 <_printf_i+0x1bc>
 800961c:	8019      	strh	r1, [r3, #0]
 800961e:	2300      	movs	r3, #0
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	4616      	mov	r6, r2
 8009624:	e7bc      	b.n	80095a0 <_printf_i+0x148>
 8009626:	6833      	ldr	r3, [r6, #0]
 8009628:	1d1a      	adds	r2, r3, #4
 800962a:	6032      	str	r2, [r6, #0]
 800962c:	681e      	ldr	r6, [r3, #0]
 800962e:	6862      	ldr	r2, [r4, #4]
 8009630:	2100      	movs	r1, #0
 8009632:	4630      	mov	r0, r6
 8009634:	f7f6 fdec 	bl	8000210 <memchr>
 8009638:	b108      	cbz	r0, 800963e <_printf_i+0x1e6>
 800963a:	1b80      	subs	r0, r0, r6
 800963c:	6060      	str	r0, [r4, #4]
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	2300      	movs	r3, #0
 8009644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009648:	e7aa      	b.n	80095a0 <_printf_i+0x148>
 800964a:	6923      	ldr	r3, [r4, #16]
 800964c:	4632      	mov	r2, r6
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	47d0      	blx	sl
 8009654:	3001      	adds	r0, #1
 8009656:	d0ad      	beq.n	80095b4 <_printf_i+0x15c>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	079b      	lsls	r3, r3, #30
 800965c:	d413      	bmi.n	8009686 <_printf_i+0x22e>
 800965e:	68e0      	ldr	r0, [r4, #12]
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	4298      	cmp	r0, r3
 8009664:	bfb8      	it	lt
 8009666:	4618      	movlt	r0, r3
 8009668:	e7a6      	b.n	80095b8 <_printf_i+0x160>
 800966a:	2301      	movs	r3, #1
 800966c:	4632      	mov	r2, r6
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d09d      	beq.n	80095b4 <_printf_i+0x15c>
 8009678:	3501      	adds	r5, #1
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	9903      	ldr	r1, [sp, #12]
 800967e:	1a5b      	subs	r3, r3, r1
 8009680:	42ab      	cmp	r3, r5
 8009682:	dcf2      	bgt.n	800966a <_printf_i+0x212>
 8009684:	e7eb      	b.n	800965e <_printf_i+0x206>
 8009686:	2500      	movs	r5, #0
 8009688:	f104 0619 	add.w	r6, r4, #25
 800968c:	e7f5      	b.n	800967a <_printf_i+0x222>
 800968e:	bf00      	nop
 8009690:	0800a211 	.word	0x0800a211
 8009694:	0800a222 	.word	0x0800a222

08009698 <_scanf_chars>:
 8009698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800969c:	4615      	mov	r5, r2
 800969e:	688a      	ldr	r2, [r1, #8]
 80096a0:	4680      	mov	r8, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b932      	cbnz	r2, 80096b4 <_scanf_chars+0x1c>
 80096a6:	698a      	ldr	r2, [r1, #24]
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	bf14      	ite	ne
 80096ac:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80096b0:	2201      	moveq	r2, #1
 80096b2:	608a      	str	r2, [r1, #8]
 80096b4:	6822      	ldr	r2, [r4, #0]
 80096b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009748 <_scanf_chars+0xb0>
 80096ba:	06d1      	lsls	r1, r2, #27
 80096bc:	bf5f      	itttt	pl
 80096be:	681a      	ldrpl	r2, [r3, #0]
 80096c0:	1d11      	addpl	r1, r2, #4
 80096c2:	6019      	strpl	r1, [r3, #0]
 80096c4:	6816      	ldrpl	r6, [r2, #0]
 80096c6:	2700      	movs	r7, #0
 80096c8:	69a0      	ldr	r0, [r4, #24]
 80096ca:	b188      	cbz	r0, 80096f0 <_scanf_chars+0x58>
 80096cc:	2801      	cmp	r0, #1
 80096ce:	d107      	bne.n	80096e0 <_scanf_chars+0x48>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	6963      	ldr	r3, [r4, #20]
 80096d6:	5c9b      	ldrb	r3, [r3, r2]
 80096d8:	b953      	cbnz	r3, 80096f0 <_scanf_chars+0x58>
 80096da:	2f00      	cmp	r7, #0
 80096dc:	d031      	beq.n	8009742 <_scanf_chars+0xaa>
 80096de:	e022      	b.n	8009726 <_scanf_chars+0x8e>
 80096e0:	2802      	cmp	r0, #2
 80096e2:	d120      	bne.n	8009726 <_scanf_chars+0x8e>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80096ec:	071b      	lsls	r3, r3, #28
 80096ee:	d41a      	bmi.n	8009726 <_scanf_chars+0x8e>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	06da      	lsls	r2, r3, #27
 80096f4:	bf5e      	ittt	pl
 80096f6:	682b      	ldrpl	r3, [r5, #0]
 80096f8:	781b      	ldrbpl	r3, [r3, #0]
 80096fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80096fe:	682a      	ldr	r2, [r5, #0]
 8009700:	686b      	ldr	r3, [r5, #4]
 8009702:	3201      	adds	r2, #1
 8009704:	602a      	str	r2, [r5, #0]
 8009706:	68a2      	ldr	r2, [r4, #8]
 8009708:	3b01      	subs	r3, #1
 800970a:	3a01      	subs	r2, #1
 800970c:	606b      	str	r3, [r5, #4]
 800970e:	3701      	adds	r7, #1
 8009710:	60a2      	str	r2, [r4, #8]
 8009712:	b142      	cbz	r2, 8009726 <_scanf_chars+0x8e>
 8009714:	2b00      	cmp	r3, #0
 8009716:	dcd7      	bgt.n	80096c8 <_scanf_chars+0x30>
 8009718:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800971c:	4629      	mov	r1, r5
 800971e:	4640      	mov	r0, r8
 8009720:	4798      	blx	r3
 8009722:	2800      	cmp	r0, #0
 8009724:	d0d0      	beq.n	80096c8 <_scanf_chars+0x30>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	f013 0310 	ands.w	r3, r3, #16
 800972c:	d105      	bne.n	800973a <_scanf_chars+0xa2>
 800972e:	68e2      	ldr	r2, [r4, #12]
 8009730:	3201      	adds	r2, #1
 8009732:	60e2      	str	r2, [r4, #12]
 8009734:	69a2      	ldr	r2, [r4, #24]
 8009736:	b102      	cbz	r2, 800973a <_scanf_chars+0xa2>
 8009738:	7033      	strb	r3, [r6, #0]
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	443b      	add	r3, r7
 800973e:	6123      	str	r3, [r4, #16]
 8009740:	2000      	movs	r0, #0
 8009742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009746:	bf00      	nop
 8009748:	0800a24f 	.word	0x0800a24f

0800974c <_scanf_i>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	4698      	mov	r8, r3
 8009752:	4b74      	ldr	r3, [pc, #464]	@ (8009924 <_scanf_i+0x1d8>)
 8009754:	460c      	mov	r4, r1
 8009756:	4682      	mov	sl, r0
 8009758:	4616      	mov	r6, r2
 800975a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800975e:	b087      	sub	sp, #28
 8009760:	ab03      	add	r3, sp, #12
 8009762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009766:	4b70      	ldr	r3, [pc, #448]	@ (8009928 <_scanf_i+0x1dc>)
 8009768:	69a1      	ldr	r1, [r4, #24]
 800976a:	4a70      	ldr	r2, [pc, #448]	@ (800992c <_scanf_i+0x1e0>)
 800976c:	2903      	cmp	r1, #3
 800976e:	bf08      	it	eq
 8009770:	461a      	moveq	r2, r3
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	9201      	str	r2, [sp, #4]
 8009776:	1e5a      	subs	r2, r3, #1
 8009778:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800977c:	bf88      	it	hi
 800977e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009782:	4627      	mov	r7, r4
 8009784:	bf82      	ittt	hi
 8009786:	eb03 0905 	addhi.w	r9, r3, r5
 800978a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800978e:	60a3      	strhi	r3, [r4, #8]
 8009790:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009794:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009798:	bf98      	it	ls
 800979a:	f04f 0900 	movls.w	r9, #0
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	463d      	mov	r5, r7
 80097a2:	f04f 0b00 	mov.w	fp, #0
 80097a6:	6831      	ldr	r1, [r6, #0]
 80097a8:	ab03      	add	r3, sp, #12
 80097aa:	7809      	ldrb	r1, [r1, #0]
 80097ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80097b0:	2202      	movs	r2, #2
 80097b2:	f7f6 fd2d 	bl	8000210 <memchr>
 80097b6:	b328      	cbz	r0, 8009804 <_scanf_i+0xb8>
 80097b8:	f1bb 0f01 	cmp.w	fp, #1
 80097bc:	d159      	bne.n	8009872 <_scanf_i+0x126>
 80097be:	6862      	ldr	r2, [r4, #4]
 80097c0:	b92a      	cbnz	r2, 80097ce <_scanf_i+0x82>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	2108      	movs	r1, #8
 80097c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097ca:	6061      	str	r1, [r4, #4]
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	68a2      	ldr	r2, [r4, #8]
 80097d8:	1e51      	subs	r1, r2, #1
 80097da:	60a1      	str	r1, [r4, #8]
 80097dc:	b192      	cbz	r2, 8009804 <_scanf_i+0xb8>
 80097de:	6832      	ldr	r2, [r6, #0]
 80097e0:	1c51      	adds	r1, r2, #1
 80097e2:	6031      	str	r1, [r6, #0]
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	f805 2b01 	strb.w	r2, [r5], #1
 80097ea:	6872      	ldr	r2, [r6, #4]
 80097ec:	3a01      	subs	r2, #1
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	6072      	str	r2, [r6, #4]
 80097f2:	dc07      	bgt.n	8009804 <_scanf_i+0xb8>
 80097f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80097f8:	4631      	mov	r1, r6
 80097fa:	4650      	mov	r0, sl
 80097fc:	4790      	blx	r2
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 8085 	bne.w	800990e <_scanf_i+0x1c2>
 8009804:	f10b 0b01 	add.w	fp, fp, #1
 8009808:	f1bb 0f03 	cmp.w	fp, #3
 800980c:	d1cb      	bne.n	80097a6 <_scanf_i+0x5a>
 800980e:	6863      	ldr	r3, [r4, #4]
 8009810:	b90b      	cbnz	r3, 8009816 <_scanf_i+0xca>
 8009812:	230a      	movs	r3, #10
 8009814:	6063      	str	r3, [r4, #4]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	4945      	ldr	r1, [pc, #276]	@ (8009930 <_scanf_i+0x1e4>)
 800981a:	6960      	ldr	r0, [r4, #20]
 800981c:	1ac9      	subs	r1, r1, r3
 800981e:	f000 f889 	bl	8009934 <__sccl>
 8009822:	f04f 0b00 	mov.w	fp, #0
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6822      	ldr	r2, [r4, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d03d      	beq.n	80098aa <_scanf_i+0x15e>
 800982e:	6831      	ldr	r1, [r6, #0]
 8009830:	6960      	ldr	r0, [r4, #20]
 8009832:	f891 c000 	ldrb.w	ip, [r1]
 8009836:	f810 000c 	ldrb.w	r0, [r0, ip]
 800983a:	2800      	cmp	r0, #0
 800983c:	d035      	beq.n	80098aa <_scanf_i+0x15e>
 800983e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009842:	d124      	bne.n	800988e <_scanf_i+0x142>
 8009844:	0510      	lsls	r0, r2, #20
 8009846:	d522      	bpl.n	800988e <_scanf_i+0x142>
 8009848:	f10b 0b01 	add.w	fp, fp, #1
 800984c:	f1b9 0f00 	cmp.w	r9, #0
 8009850:	d003      	beq.n	800985a <_scanf_i+0x10e>
 8009852:	3301      	adds	r3, #1
 8009854:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009858:	60a3      	str	r3, [r4, #8]
 800985a:	6873      	ldr	r3, [r6, #4]
 800985c:	3b01      	subs	r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	6073      	str	r3, [r6, #4]
 8009862:	dd1b      	ble.n	800989c <_scanf_i+0x150>
 8009864:	6833      	ldr	r3, [r6, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	6033      	str	r3, [r6, #0]
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	3b01      	subs	r3, #1
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	e7d9      	b.n	8009826 <_scanf_i+0xda>
 8009872:	f1bb 0f02 	cmp.w	fp, #2
 8009876:	d1ae      	bne.n	80097d6 <_scanf_i+0x8a>
 8009878:	6822      	ldr	r2, [r4, #0]
 800987a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800987e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009882:	d1bf      	bne.n	8009804 <_scanf_i+0xb8>
 8009884:	2110      	movs	r1, #16
 8009886:	6061      	str	r1, [r4, #4]
 8009888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800988c:	e7a2      	b.n	80097d4 <_scanf_i+0x88>
 800988e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	780b      	ldrb	r3, [r1, #0]
 8009896:	f805 3b01 	strb.w	r3, [r5], #1
 800989a:	e7de      	b.n	800985a <_scanf_i+0x10e>
 800989c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098a0:	4631      	mov	r1, r6
 80098a2:	4650      	mov	r0, sl
 80098a4:	4798      	blx	r3
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0df      	beq.n	800986a <_scanf_i+0x11e>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	05d9      	lsls	r1, r3, #23
 80098ae:	d50d      	bpl.n	80098cc <_scanf_i+0x180>
 80098b0:	42bd      	cmp	r5, r7
 80098b2:	d909      	bls.n	80098c8 <_scanf_i+0x17c>
 80098b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098bc:	4632      	mov	r2, r6
 80098be:	4650      	mov	r0, sl
 80098c0:	4798      	blx	r3
 80098c2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80098c6:	464d      	mov	r5, r9
 80098c8:	42bd      	cmp	r5, r7
 80098ca:	d028      	beq.n	800991e <_scanf_i+0x1d2>
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	f012 0210 	ands.w	r2, r2, #16
 80098d2:	d113      	bne.n	80098fc <_scanf_i+0x1b0>
 80098d4:	702a      	strb	r2, [r5, #0]
 80098d6:	6863      	ldr	r3, [r4, #4]
 80098d8:	9e01      	ldr	r6, [sp, #4]
 80098da:	4639      	mov	r1, r7
 80098dc:	4650      	mov	r0, sl
 80098de:	47b0      	blx	r6
 80098e0:	f8d8 3000 	ldr.w	r3, [r8]
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	1d1a      	adds	r2, r3, #4
 80098e8:	f8c8 2000 	str.w	r2, [r8]
 80098ec:	f011 0f20 	tst.w	r1, #32
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	d00f      	beq.n	8009914 <_scanf_i+0x1c8>
 80098f4:	6018      	str	r0, [r3, #0]
 80098f6:	68e3      	ldr	r3, [r4, #12]
 80098f8:	3301      	adds	r3, #1
 80098fa:	60e3      	str	r3, [r4, #12]
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	1bed      	subs	r5, r5, r7
 8009900:	445d      	add	r5, fp
 8009902:	442b      	add	r3, r5
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	2000      	movs	r0, #0
 8009908:	b007      	add	sp, #28
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	f04f 0b00 	mov.w	fp, #0
 8009912:	e7ca      	b.n	80098aa <_scanf_i+0x15e>
 8009914:	07ca      	lsls	r2, r1, #31
 8009916:	bf4c      	ite	mi
 8009918:	8018      	strhmi	r0, [r3, #0]
 800991a:	6018      	strpl	r0, [r3, #0]
 800991c:	e7eb      	b.n	80098f6 <_scanf_i+0x1aa>
 800991e:	2001      	movs	r0, #1
 8009920:	e7f2      	b.n	8009908 <_scanf_i+0x1bc>
 8009922:	bf00      	nop
 8009924:	0800a1d4 	.word	0x0800a1d4
 8009928:	08009b85 	.word	0x08009b85
 800992c:	08009c65 	.word	0x08009c65
 8009930:	0800a243 	.word	0x0800a243

08009934 <__sccl>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	780b      	ldrb	r3, [r1, #0]
 8009938:	4604      	mov	r4, r0
 800993a:	2b5e      	cmp	r3, #94	@ 0x5e
 800993c:	bf0b      	itete	eq
 800993e:	784b      	ldrbeq	r3, [r1, #1]
 8009940:	1c4a      	addne	r2, r1, #1
 8009942:	1c8a      	addeq	r2, r1, #2
 8009944:	2100      	movne	r1, #0
 8009946:	bf08      	it	eq
 8009948:	2101      	moveq	r1, #1
 800994a:	3801      	subs	r0, #1
 800994c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009950:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009954:	42a8      	cmp	r0, r5
 8009956:	d1fb      	bne.n	8009950 <__sccl+0x1c>
 8009958:	b90b      	cbnz	r3, 800995e <__sccl+0x2a>
 800995a:	1e50      	subs	r0, r2, #1
 800995c:	bd70      	pop	{r4, r5, r6, pc}
 800995e:	f081 0101 	eor.w	r1, r1, #1
 8009962:	54e1      	strb	r1, [r4, r3]
 8009964:	4610      	mov	r0, r2
 8009966:	4602      	mov	r2, r0
 8009968:	f812 5b01 	ldrb.w	r5, [r2], #1
 800996c:	2d2d      	cmp	r5, #45	@ 0x2d
 800996e:	d005      	beq.n	800997c <__sccl+0x48>
 8009970:	2d5d      	cmp	r5, #93	@ 0x5d
 8009972:	d016      	beq.n	80099a2 <__sccl+0x6e>
 8009974:	2d00      	cmp	r5, #0
 8009976:	d0f1      	beq.n	800995c <__sccl+0x28>
 8009978:	462b      	mov	r3, r5
 800997a:	e7f2      	b.n	8009962 <__sccl+0x2e>
 800997c:	7846      	ldrb	r6, [r0, #1]
 800997e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009980:	d0fa      	beq.n	8009978 <__sccl+0x44>
 8009982:	42b3      	cmp	r3, r6
 8009984:	dcf8      	bgt.n	8009978 <__sccl+0x44>
 8009986:	3002      	adds	r0, #2
 8009988:	461a      	mov	r2, r3
 800998a:	3201      	adds	r2, #1
 800998c:	4296      	cmp	r6, r2
 800998e:	54a1      	strb	r1, [r4, r2]
 8009990:	dcfb      	bgt.n	800998a <__sccl+0x56>
 8009992:	1af2      	subs	r2, r6, r3
 8009994:	3a01      	subs	r2, #1
 8009996:	1c5d      	adds	r5, r3, #1
 8009998:	42b3      	cmp	r3, r6
 800999a:	bfa8      	it	ge
 800999c:	2200      	movge	r2, #0
 800999e:	18ab      	adds	r3, r5, r2
 80099a0:	e7e1      	b.n	8009966 <__sccl+0x32>
 80099a2:	4610      	mov	r0, r2
 80099a4:	e7da      	b.n	800995c <__sccl+0x28>
	...

080099a8 <__malloc_lock>:
 80099a8:	4801      	ldr	r0, [pc, #4]	@ (80099b0 <__malloc_lock+0x8>)
 80099aa:	f7ff b8c7 	b.w	8008b3c <__retarget_lock_acquire_recursive>
 80099ae:	bf00      	nop
 80099b0:	20013168 	.word	0x20013168

080099b4 <__malloc_unlock>:
 80099b4:	4801      	ldr	r0, [pc, #4]	@ (80099bc <__malloc_unlock+0x8>)
 80099b6:	f7ff b8c2 	b.w	8008b3e <__retarget_lock_release_recursive>
 80099ba:	bf00      	nop
 80099bc:	20013168 	.word	0x20013168

080099c0 <__submore>:
 80099c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c4:	460c      	mov	r4, r1
 80099c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80099c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099cc:	4299      	cmp	r1, r3
 80099ce:	d11d      	bne.n	8009a0c <__submore+0x4c>
 80099d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80099d4:	f7ff fc52 	bl	800927c <_malloc_r>
 80099d8:	b918      	cbnz	r0, 80099e2 <__submore+0x22>
 80099da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099e6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80099e8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80099ec:	6360      	str	r0, [r4, #52]	@ 0x34
 80099ee:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80099f2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80099f6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80099fa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80099fe:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009a02:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009a06:	6020      	str	r0, [r4, #0]
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e7e8      	b.n	80099de <__submore+0x1e>
 8009a0c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009a0e:	0077      	lsls	r7, r6, #1
 8009a10:	463a      	mov	r2, r7
 8009a12:	f000 f80f 	bl	8009a34 <_realloc_r>
 8009a16:	4605      	mov	r5, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d0de      	beq.n	80099da <__submore+0x1a>
 8009a1c:	eb00 0806 	add.w	r8, r0, r6
 8009a20:	4601      	mov	r1, r0
 8009a22:	4632      	mov	r2, r6
 8009a24:	4640      	mov	r0, r8
 8009a26:	f7ff f88b 	bl	8008b40 <memcpy>
 8009a2a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009a2e:	f8c4 8000 	str.w	r8, [r4]
 8009a32:	e7e9      	b.n	8009a08 <__submore+0x48>

08009a34 <_realloc_r>:
 8009a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a38:	4680      	mov	r8, r0
 8009a3a:	4615      	mov	r5, r2
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	b921      	cbnz	r1, 8009a4a <_realloc_r+0x16>
 8009a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a44:	4611      	mov	r1, r2
 8009a46:	f7ff bc19 	b.w	800927c <_malloc_r>
 8009a4a:	b92a      	cbnz	r2, 8009a58 <_realloc_r+0x24>
 8009a4c:	f7ff f886 	bl	8008b5c <_free_r>
 8009a50:	2400      	movs	r4, #0
 8009a52:	4620      	mov	r0, r4
 8009a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a58:	f000 f930 	bl	8009cbc <_malloc_usable_size_r>
 8009a5c:	4285      	cmp	r5, r0
 8009a5e:	4606      	mov	r6, r0
 8009a60:	d802      	bhi.n	8009a68 <_realloc_r+0x34>
 8009a62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a66:	d8f4      	bhi.n	8009a52 <_realloc_r+0x1e>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	f7ff fc06 	bl	800927c <_malloc_r>
 8009a70:	4607      	mov	r7, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d0ec      	beq.n	8009a50 <_realloc_r+0x1c>
 8009a76:	42b5      	cmp	r5, r6
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	bf28      	it	cs
 8009a7e:	4632      	movcs	r2, r6
 8009a80:	f7ff f85e 	bl	8008b40 <memcpy>
 8009a84:	4621      	mov	r1, r4
 8009a86:	4640      	mov	r0, r8
 8009a88:	f7ff f868 	bl	8008b5c <_free_r>
 8009a8c:	463c      	mov	r4, r7
 8009a8e:	e7e0      	b.n	8009a52 <_realloc_r+0x1e>

08009a90 <_strtol_l.constprop.0>:
 8009a90:	2b24      	cmp	r3, #36	@ 0x24
 8009a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a96:	4686      	mov	lr, r0
 8009a98:	4690      	mov	r8, r2
 8009a9a:	d801      	bhi.n	8009aa0 <_strtol_l.constprop.0+0x10>
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d106      	bne.n	8009aae <_strtol_l.constprop.0+0x1e>
 8009aa0:	f7ff f822 	bl	8008ae8 <__errno>
 8009aa4:	2316      	movs	r3, #22
 8009aa6:	6003      	str	r3, [r0, #0]
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aae:	4834      	ldr	r0, [pc, #208]	@ (8009b80 <_strtol_l.constprop.0+0xf0>)
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ab8:	5d06      	ldrb	r6, [r0, r4]
 8009aba:	f016 0608 	ands.w	r6, r6, #8
 8009abe:	d1f8      	bne.n	8009ab2 <_strtol_l.constprop.0+0x22>
 8009ac0:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ac2:	d12d      	bne.n	8009b20 <_strtol_l.constprop.0+0x90>
 8009ac4:	782c      	ldrb	r4, [r5, #0]
 8009ac6:	2601      	movs	r6, #1
 8009ac8:	1c95      	adds	r5, r2, #2
 8009aca:	f033 0210 	bics.w	r2, r3, #16
 8009ace:	d109      	bne.n	8009ae4 <_strtol_l.constprop.0+0x54>
 8009ad0:	2c30      	cmp	r4, #48	@ 0x30
 8009ad2:	d12a      	bne.n	8009b2a <_strtol_l.constprop.0+0x9a>
 8009ad4:	782a      	ldrb	r2, [r5, #0]
 8009ad6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ada:	2a58      	cmp	r2, #88	@ 0x58
 8009adc:	d125      	bne.n	8009b2a <_strtol_l.constprop.0+0x9a>
 8009ade:	786c      	ldrb	r4, [r5, #1]
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	3502      	adds	r5, #2
 8009ae4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ae8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009aec:	2200      	movs	r2, #0
 8009aee:	fbbc f9f3 	udiv	r9, ip, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	fb03 ca19 	mls	sl, r3, r9, ip
 8009af8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009afc:	2f09      	cmp	r7, #9
 8009afe:	d81b      	bhi.n	8009b38 <_strtol_l.constprop.0+0xa8>
 8009b00:	463c      	mov	r4, r7
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	dd27      	ble.n	8009b56 <_strtol_l.constprop.0+0xc6>
 8009b06:	1c57      	adds	r7, r2, #1
 8009b08:	d007      	beq.n	8009b1a <_strtol_l.constprop.0+0x8a>
 8009b0a:	4581      	cmp	r9, r0
 8009b0c:	d320      	bcc.n	8009b50 <_strtol_l.constprop.0+0xc0>
 8009b0e:	d101      	bne.n	8009b14 <_strtol_l.constprop.0+0x84>
 8009b10:	45a2      	cmp	sl, r4
 8009b12:	db1d      	blt.n	8009b50 <_strtol_l.constprop.0+0xc0>
 8009b14:	fb00 4003 	mla	r0, r0, r3, r4
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b1e:	e7eb      	b.n	8009af8 <_strtol_l.constprop.0+0x68>
 8009b20:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b22:	bf04      	itt	eq
 8009b24:	782c      	ldrbeq	r4, [r5, #0]
 8009b26:	1c95      	addeq	r5, r2, #2
 8009b28:	e7cf      	b.n	8009aca <_strtol_l.constprop.0+0x3a>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1da      	bne.n	8009ae4 <_strtol_l.constprop.0+0x54>
 8009b2e:	2c30      	cmp	r4, #48	@ 0x30
 8009b30:	bf0c      	ite	eq
 8009b32:	2308      	moveq	r3, #8
 8009b34:	230a      	movne	r3, #10
 8009b36:	e7d5      	b.n	8009ae4 <_strtol_l.constprop.0+0x54>
 8009b38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b3c:	2f19      	cmp	r7, #25
 8009b3e:	d801      	bhi.n	8009b44 <_strtol_l.constprop.0+0xb4>
 8009b40:	3c37      	subs	r4, #55	@ 0x37
 8009b42:	e7de      	b.n	8009b02 <_strtol_l.constprop.0+0x72>
 8009b44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b48:	2f19      	cmp	r7, #25
 8009b4a:	d804      	bhi.n	8009b56 <_strtol_l.constprop.0+0xc6>
 8009b4c:	3c57      	subs	r4, #87	@ 0x57
 8009b4e:	e7d8      	b.n	8009b02 <_strtol_l.constprop.0+0x72>
 8009b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b54:	e7e1      	b.n	8009b1a <_strtol_l.constprop.0+0x8a>
 8009b56:	1c53      	adds	r3, r2, #1
 8009b58:	d108      	bne.n	8009b6c <_strtol_l.constprop.0+0xdc>
 8009b5a:	2322      	movs	r3, #34	@ 0x22
 8009b5c:	f8ce 3000 	str.w	r3, [lr]
 8009b60:	4660      	mov	r0, ip
 8009b62:	f1b8 0f00 	cmp.w	r8, #0
 8009b66:	d0a0      	beq.n	8009aaa <_strtol_l.constprop.0+0x1a>
 8009b68:	1e69      	subs	r1, r5, #1
 8009b6a:	e006      	b.n	8009b7a <_strtol_l.constprop.0+0xea>
 8009b6c:	b106      	cbz	r6, 8009b70 <_strtol_l.constprop.0+0xe0>
 8009b6e:	4240      	negs	r0, r0
 8009b70:	f1b8 0f00 	cmp.w	r8, #0
 8009b74:	d099      	beq.n	8009aaa <_strtol_l.constprop.0+0x1a>
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	d1f6      	bne.n	8009b68 <_strtol_l.constprop.0+0xd8>
 8009b7a:	f8c8 1000 	str.w	r1, [r8]
 8009b7e:	e794      	b.n	8009aaa <_strtol_l.constprop.0+0x1a>
 8009b80:	0800a24f 	.word	0x0800a24f

08009b84 <_strtol_r>:
 8009b84:	f7ff bf84 	b.w	8009a90 <_strtol_l.constprop.0>

08009b88 <_strtoul_l.constprop.0>:
 8009b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	4e34      	ldr	r6, [pc, #208]	@ (8009c60 <_strtoul_l.constprop.0+0xd8>)
 8009b8e:	4686      	mov	lr, r0
 8009b90:	460d      	mov	r5, r1
 8009b92:	4628      	mov	r0, r5
 8009b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b98:	5d37      	ldrb	r7, [r6, r4]
 8009b9a:	f017 0708 	ands.w	r7, r7, #8
 8009b9e:	d1f8      	bne.n	8009b92 <_strtoul_l.constprop.0+0xa>
 8009ba0:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ba2:	d12f      	bne.n	8009c04 <_strtoul_l.constprop.0+0x7c>
 8009ba4:	782c      	ldrb	r4, [r5, #0]
 8009ba6:	2701      	movs	r7, #1
 8009ba8:	1c85      	adds	r5, r0, #2
 8009baa:	f033 0010 	bics.w	r0, r3, #16
 8009bae:	d109      	bne.n	8009bc4 <_strtoul_l.constprop.0+0x3c>
 8009bb0:	2c30      	cmp	r4, #48	@ 0x30
 8009bb2:	d12c      	bne.n	8009c0e <_strtoul_l.constprop.0+0x86>
 8009bb4:	7828      	ldrb	r0, [r5, #0]
 8009bb6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009bba:	2858      	cmp	r0, #88	@ 0x58
 8009bbc:	d127      	bne.n	8009c0e <_strtoul_l.constprop.0+0x86>
 8009bbe:	786c      	ldrb	r4, [r5, #1]
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	3502      	adds	r5, #2
 8009bc4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009bc8:	2600      	movs	r6, #0
 8009bca:	fbb8 f8f3 	udiv	r8, r8, r3
 8009bce:	fb03 f908 	mul.w	r9, r3, r8
 8009bd2:	ea6f 0909 	mvn.w	r9, r9
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009bdc:	f1bc 0f09 	cmp.w	ip, #9
 8009be0:	d81c      	bhi.n	8009c1c <_strtoul_l.constprop.0+0x94>
 8009be2:	4664      	mov	r4, ip
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	dd2a      	ble.n	8009c3e <_strtoul_l.constprop.0+0xb6>
 8009be8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8009bec:	d007      	beq.n	8009bfe <_strtoul_l.constprop.0+0x76>
 8009bee:	4580      	cmp	r8, r0
 8009bf0:	d322      	bcc.n	8009c38 <_strtoul_l.constprop.0+0xb0>
 8009bf2:	d101      	bne.n	8009bf8 <_strtoul_l.constprop.0+0x70>
 8009bf4:	45a1      	cmp	r9, r4
 8009bf6:	db1f      	blt.n	8009c38 <_strtoul_l.constprop.0+0xb0>
 8009bf8:	fb00 4003 	mla	r0, r0, r3, r4
 8009bfc:	2601      	movs	r6, #1
 8009bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c02:	e7e9      	b.n	8009bd8 <_strtoul_l.constprop.0+0x50>
 8009c04:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c06:	bf04      	itt	eq
 8009c08:	782c      	ldrbeq	r4, [r5, #0]
 8009c0a:	1c85      	addeq	r5, r0, #2
 8009c0c:	e7cd      	b.n	8009baa <_strtoul_l.constprop.0+0x22>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1d8      	bne.n	8009bc4 <_strtoul_l.constprop.0+0x3c>
 8009c12:	2c30      	cmp	r4, #48	@ 0x30
 8009c14:	bf0c      	ite	eq
 8009c16:	2308      	moveq	r3, #8
 8009c18:	230a      	movne	r3, #10
 8009c1a:	e7d3      	b.n	8009bc4 <_strtoul_l.constprop.0+0x3c>
 8009c1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009c20:	f1bc 0f19 	cmp.w	ip, #25
 8009c24:	d801      	bhi.n	8009c2a <_strtoul_l.constprop.0+0xa2>
 8009c26:	3c37      	subs	r4, #55	@ 0x37
 8009c28:	e7dc      	b.n	8009be4 <_strtoul_l.constprop.0+0x5c>
 8009c2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009c2e:	f1bc 0f19 	cmp.w	ip, #25
 8009c32:	d804      	bhi.n	8009c3e <_strtoul_l.constprop.0+0xb6>
 8009c34:	3c57      	subs	r4, #87	@ 0x57
 8009c36:	e7d5      	b.n	8009be4 <_strtoul_l.constprop.0+0x5c>
 8009c38:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009c3c:	e7df      	b.n	8009bfe <_strtoul_l.constprop.0+0x76>
 8009c3e:	1c73      	adds	r3, r6, #1
 8009c40:	d106      	bne.n	8009c50 <_strtoul_l.constprop.0+0xc8>
 8009c42:	2322      	movs	r3, #34	@ 0x22
 8009c44:	f8ce 3000 	str.w	r3, [lr]
 8009c48:	4630      	mov	r0, r6
 8009c4a:	b932      	cbnz	r2, 8009c5a <_strtoul_l.constprop.0+0xd2>
 8009c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c50:	b107      	cbz	r7, 8009c54 <_strtoul_l.constprop.0+0xcc>
 8009c52:	4240      	negs	r0, r0
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d0f9      	beq.n	8009c4c <_strtoul_l.constprop.0+0xc4>
 8009c58:	b106      	cbz	r6, 8009c5c <_strtoul_l.constprop.0+0xd4>
 8009c5a:	1e69      	subs	r1, r5, #1
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	e7f5      	b.n	8009c4c <_strtoul_l.constprop.0+0xc4>
 8009c60:	0800a24f 	.word	0x0800a24f

08009c64 <_strtoul_r>:
 8009c64:	f7ff bf90 	b.w	8009b88 <_strtoul_l.constprop.0>

08009c68 <memmove>:
 8009c68:	4288      	cmp	r0, r1
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	eb01 0402 	add.w	r4, r1, r2
 8009c70:	d902      	bls.n	8009c78 <memmove+0x10>
 8009c72:	4284      	cmp	r4, r0
 8009c74:	4623      	mov	r3, r4
 8009c76:	d807      	bhi.n	8009c88 <memmove+0x20>
 8009c78:	1e43      	subs	r3, r0, #1
 8009c7a:	42a1      	cmp	r1, r4
 8009c7c:	d008      	beq.n	8009c90 <memmove+0x28>
 8009c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c86:	e7f8      	b.n	8009c7a <memmove+0x12>
 8009c88:	4402      	add	r2, r0
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	428a      	cmp	r2, r1
 8009c8e:	d100      	bne.n	8009c92 <memmove+0x2a>
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c9a:	e7f7      	b.n	8009c8c <memmove+0x24>

08009c9c <_sbrk_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d06      	ldr	r5, [pc, #24]	@ (8009cb8 <_sbrk_r+0x1c>)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	f7f7 fa24 	bl	80010f4 <_sbrk>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_sbrk_r+0x1a>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_sbrk_r+0x1a>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	20013164 	.word	0x20013164

08009cbc <_malloc_usable_size_r>:
 8009cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc0:	1f18      	subs	r0, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bfbc      	itt	lt
 8009cc6:	580b      	ldrlt	r3, [r1, r0]
 8009cc8:	18c0      	addlt	r0, r0, r3
 8009cca:	4770      	bx	lr

08009ccc <_init>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr

08009cd8 <_fini>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr
