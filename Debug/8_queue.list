
8_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08009574  08009574  0000a574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  0000b084  2**0
                  CONTENTS
  4 .ARM          00000008  08009b48  08009b48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b50  08009b50  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009b58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013084  20000084  08009bdc  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013108  08009bdc  0000b108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016278  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003732  00000000  00000000  0002132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00024a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4b  00000000  00000000  00025e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019703  00000000  00000000  00026d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e00  00000000  00000000  0004044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dae4  00000000  00000000  0005824e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e4  00000000  00000000  000f5d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fb75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800955c 	.word	0x0800955c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800955c 	.word	0x0800955c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f001 f94b 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f90d 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fa3b 	bl	8000a28 <MX_GPIO_Init>
  MX_RTC_Init();
 80005b2:	f000 f973 	bl	800089c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 fa0d 	bl	80009d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005ba:	f000 f995 	bl	80008e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* Start PWM */
 80005be:	2100      	movs	r1, #0
 80005c0:	4869      	ldr	r0, [pc, #420]	@ (8000768 <main+0x1c8>)
 80005c2:	f002 fe2d 	bl	8003220 <HAL_TIM_PWM_Start>

	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2,
 80005c6:	4b69      	ldr	r3, [pc, #420]	@ (800076c <main+0x1cc>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22fa      	movs	r2, #250	@ 0xfa
 80005d2:	4967      	ldr	r1, [pc, #412]	@ (8000770 <main+0x1d0>)
 80005d4:	4867      	ldr	r0, [pc, #412]	@ (8000774 <main+0x1d4>)
 80005d6:	f005 fc21 	bl	8005e1c <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]
			&handle_menu_task);
	configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x56>

	status = xTaskCreate(uart_task, "uart_task", 250, NULL, 2,
 80005fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000778 <main+0x1d8>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22fa      	movs	r2, #250	@ 0xfa
 8000606:	495d      	ldr	r1, [pc, #372]	@ (800077c <main+0x1dc>)
 8000608:	485d      	ldr	r0, [pc, #372]	@ (8000780 <main+0x1e0>)
 800060a:	f005 fc07 	bl	8005e1c <xTaskCreate>
 800060e:	61f8      	str	r0, [r7, #28]
			&handle_uart_task);
	configASSERT(status == pdPASS);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0x8e>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	617b      	str	r3, [r7, #20]
    }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x8a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2,
 800062e:	4b55      	ldr	r3, [pc, #340]	@ (8000784 <main+0x1e4>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22fa      	movs	r2, #250	@ 0xfa
 800063a:	4953      	ldr	r1, [pc, #332]	@ (8000788 <main+0x1e8>)
 800063c:	4853      	ldr	r0, [pc, #332]	@ (800078c <main+0x1ec>)
 800063e:	f005 fbed 	bl	8005e1c <xTaskCreate>
 8000642:	61f8      	str	r0, [r7, #28]
			&handle_cmd_task);
	configASSERT(status == pdPASS);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0xc2>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	613b      	str	r3, [r7, #16]
    }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xbe>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000662:	4b4b      	ldr	r3, [pc, #300]	@ (8000790 <main+0x1f0>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22fa      	movs	r2, #250	@ 0xfa
 800066e:	4949      	ldr	r1, [pc, #292]	@ (8000794 <main+0x1f4>)
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <main+0x1f8>)
 8000672:	f005 fbd3 	bl	8005e1c <xTaskCreate>
 8000676:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00b      	beq.n	8000696 <main+0xf6>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60fb      	str	r3, [r7, #12]
    }
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0xf2>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8000696:	4b41      	ldr	r3, [pc, #260]	@ (800079c <main+0x1fc>)
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2302      	movs	r3, #2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	22fa      	movs	r2, #250	@ 0xfa
 80006a2:	493f      	ldr	r1, [pc, #252]	@ (80007a0 <main+0x200>)
 80006a4:	483f      	ldr	r0, [pc, #252]	@ (80007a4 <main+0x204>)
 80006a6:	f005 fbb9 	bl	8005e1c <xTaskCreate>
 80006aa:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d00b      	beq.n	80006ca <main+0x12a>
        __asm volatile
 80006b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006b6:	f383 8811 	msr	BASEPRI, r3
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f3bf 8f4f 	dsb	sy
 80006c2:	60bb      	str	r3, [r7, #8]
    }
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	e7fd      	b.n	80006c6 <main+0x126>

	q_data = xQueueCreate(10, sizeof(char));
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	200a      	movs	r0, #10
 80006d0:	f004 fe24 	bl	800531c <xQueueGenericCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a34      	ldr	r2, [pc, #208]	@ (80007a8 <main+0x208>)
 80006d8:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 80006da:	4b33      	ldr	r3, [pc, #204]	@ (80007a8 <main+0x208>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10b      	bne.n	80006fa <main+0x15a>
        __asm volatile
 80006e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e6:	f383 8811 	msr	BASEPRI, r3
 80006ea:	f3bf 8f6f 	isb	sy
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	607b      	str	r3, [r7, #4]
    }
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	e7fd      	b.n	80006f6 <main+0x156>

	q_print = xQueueCreate(10, sizeof(size_t));
 80006fa:	2200      	movs	r2, #0
 80006fc:	2104      	movs	r1, #4
 80006fe:	200a      	movs	r0, #10
 8000700:	f004 fe0c 	bl	800531c <xQueueGenericCreate>
 8000704:	4603      	mov	r3, r0
 8000706:	4a29      	ldr	r2, [pc, #164]	@ (80007ac <main+0x20c>)
 8000708:	6013      	str	r3, [r2, #0]
	configASSERT(q_print != NULL);
 800070a:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <main+0x20c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10b      	bne.n	800072a <main+0x18a>
        __asm volatile
 8000712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000716:	f383 8811 	msr	BASEPRI, r3
 800071a:	f3bf 8f6f 	isb	sy
 800071e:	f3bf 8f4f 	dsb	sy
 8000722:	603b      	str	r3, [r7, #0]
    }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	e7fd      	b.n	8000726 <main+0x186>

	//Create software timers for LED effects
	handle_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(250),
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <main+0x210>)
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	2201      	movs	r2, #1
 8000732:	21fa      	movs	r1, #250	@ 0xfa
 8000734:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <main+0x214>)
 8000736:	f006 fe9d 	bl	8007474 <xTimerCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <main+0x218>)
 800073e:	6013      	str	r3, [r2, #0]
	pdTRUE, (void*) 1, led_effect_callback);

	HAL_UART_Transmit(&huart2, (uint8_t*) hello, strlen(hello), 100);
 8000740:	481e      	ldr	r0, [pc, #120]	@ (80007bc <main+0x21c>)
 8000742:	f7ff fd4d 	bl	80001e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	491b      	ldr	r1, [pc, #108]	@ (80007bc <main+0x21c>)
 800074e:	481c      	ldr	r0, [pc, #112]	@ (80007c0 <main+0x220>)
 8000750:	f003 fc62 	bl	8004018 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	491b      	ldr	r1, [pc, #108]	@ (80007c4 <main+0x224>)
 8000758:	4819      	ldr	r0, [pc, #100]	@ (80007c0 <main+0x220>)
 800075a:	f003 fd1e 	bl	800419a <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 800075e:	f005 fcc9 	bl	80060f4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0x1c2>
 8000766:	bf00      	nop
 8000768:	200000e4 	.word	0x200000e4
 800076c:	200000a4 	.word	0x200000a4
 8000770:	08009574 	.word	0x08009574
 8000774:	080010a9 	.word	0x080010a9
 8000778:	200000a8 	.word	0x200000a8
 800077c:	08009580 	.word	0x08009580
 8000780:	080011c5 	.word	0x080011c5
 8000784:	200000a0 	.word	0x200000a0
 8000788:	0800958c 	.word	0x0800958c
 800078c:	08001281 	.word	0x08001281
 8000790:	200000ac 	.word	0x200000ac
 8000794:	08009598 	.word	0x08009598
 8000798:	080016c1 	.word	0x080016c1
 800079c:	200000b0 	.word	0x200000b0
 80007a0:	080095a4 	.word	0x080095a4
 80007a4:	08001571 	.word	0x08001571
 80007a8:	200000b8 	.word	0x200000b8
 80007ac:	200000bc 	.word	0x200000bc
 80007b0:	08000b0d 	.word	0x08000b0d
 80007b4:	080095b0 	.word	0x080095b0
 80007b8:	200000b4 	.word	0x200000b4
 80007bc:	20000000 	.word	0x20000000
 80007c0:	2000012c 	.word	0x2000012c
 80007c4:	200000c0 	.word	0x200000c0

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fdc6 	bl	8008368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a27      	ldr	r2, [pc, #156]	@ (8000894 <SystemClock_Config+0xcc>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <SystemClock_Config+0xd0>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000824:	230a      	movs	r3, #10
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000834:	2302      	movs	r3, #2
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800083c:	2310      	movs	r3, #16
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000840:	23a8      	movs	r3, #168	@ 0xa8
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fb53 	bl	8001efc <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800085c:	f000 f99a 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2102      	movs	r1, #2
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fdb5 	bl	80023ec <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000888:	f000 f984 	bl	8000b94 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3750      	adds	r7, #80	@ 0x50
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <MX_RTC_Init+0x48>)
 80008a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008ae:	227f      	movs	r2, #127	@ 0x7f
 80008b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008b4:	22ff      	movs	r2, #255	@ 0xff
 80008b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_RTC_Init+0x44>)
 80008cc:	f002 f890 	bl	80029f0 <HAL_RTC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008d6:	f000 f95d 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000c4 	.word	0x200000c4
 80008e4:	40002800 	.word	0x40002800

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	@ 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000918:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 800091a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 8000922:	2253      	movs	r2, #83	@ 0x53
 8000924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800092c:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 800092e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000940:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 8000942:	f002 fb61 	bl	8003008 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800094c:	f000 f922 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095a:	4619      	mov	r1, r3
 800095c:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 800095e:	f002 fec1 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000968:	f000 f914 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800096c:	4818      	ldr	r0, [pc, #96]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 800096e:	f002 fbfd 	bl	800316c <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000978:	f000 f90c 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 800098c:	f003 fa72 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000996:	f000 f8fd 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2360      	movs	r3, #96	@ 0x60
 800099c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 800099e:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 80009b4:	f002 fdd4 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009be:	f000 f8e9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c2:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <MX_TIM2_Init+0xe8>)
 80009c4:	f000 f9f4 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	@ 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000e4 	.word	0x200000e4

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f003 fab4 	bl	8003f78 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f8bd 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000012c 	.word	0x2000012c
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_GPIO_Init+0x30>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <MX_GPIO_Init+0x30>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_GPIO_Init+0x30>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for (uint32_t i = 0; i < 150; i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e002      	b.n	8000a70 <HAL_UART_RxCpltCallback+0x14>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b95      	cmp	r3, #149	@ 0x95
 8000a74:	d9f9      	bls.n	8000a6a <HAL_UART_RxCpltCallback+0xe>
		;

	HAL_UART_Transmit_IT(&huart2, (uint8_t*) &user_data, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	4920      	ldr	r1, [pc, #128]	@ (8000afc <HAL_UART_RxCpltCallback+0xa0>)
 8000a7a:	4821      	ldr	r0, [pc, #132]	@ (8000b00 <HAL_UART_RxCpltCallback+0xa4>)
 8000a7c:	f003 fb57 	bl	800412e <HAL_UART_Transmit_IT>

	if (!xQueueIsQueueFullFromISR(q_data)) {
 8000a80:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <HAL_UART_RxCpltCallback+0xa8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f005 f91e 	bl	8005cc6 <xQueueIsQueueFullFromISR>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d107      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x44>
		/*Enqueue data byte */
		xQueueSendFromISR(q_data, (void* )&user_data, NULL);
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <HAL_UART_RxCpltCallback+0xa8>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	2300      	movs	r3, #0
 8000a96:	2200      	movs	r2, #0
 8000a98:	4918      	ldr	r1, [pc, #96]	@ (8000afc <HAL_UART_RxCpltCallback+0xa0>)
 8000a9a:	f004 fdb3 	bl	8005604 <xQueueGenericSendFromISR>
 8000a9e:	e013      	b.n	8000ac8 <HAL_UART_RxCpltCallback+0x6c>
	} else {
		if (user_data == '\n') {
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <HAL_UART_RxCpltCallback+0xa0>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d10e      	bne.n	8000ac8 <HAL_UART_RxCpltCallback+0x6c>
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void*) &dummy, NULL); // task out an element from queue
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_UART_RxCpltCallback+0xa8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f107 010b 	add.w	r1, r7, #11
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 ff3d 	bl	8005934 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void* )&user_data, NULL); // then push the element into the queue
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_UART_RxCpltCallback+0xa8>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	490e      	ldr	r1, [pc, #56]	@ (8000afc <HAL_UART_RxCpltCallback+0xa0>)
 8000ac4:	f004 fd9e 	bl	8005604 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if (user_data == '\n') {
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_UART_RxCpltCallback+0xa0>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	d10a      	bne.n	8000ae8 <HAL_UART_RxCpltCallback+0x8c>
		/*send notification to command handling task */
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_UART_RxCpltCallback+0xac>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	2300      	movs	r3, #0
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f006 fab2 	bl	800704c <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4904      	ldr	r1, [pc, #16]	@ (8000afc <HAL_UART_RxCpltCallback+0xa0>)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <HAL_UART_RxCpltCallback+0xa4>)
 8000aee:	f003 fb54 	bl	800419a <HAL_UART_Receive_IT>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	2000012c 	.word	0x2000012c
 8000b04:	200000b8 	.word	0x200000b8
 8000b08:	200000a0 	.word	0x200000a0

08000b0c <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	static uint32_t brightness = 0;
	static int8_t direction = 1;

	for (int i = 0; i < 1000; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e013      	b.n	8000b42 <led_effect_callback+0x36>
		brightness += direction;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <led_effect_callback+0x58>)
 8000b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <led_effect_callback+0x5c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <led_effect_callback+0x5c>)
 8000b2a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness);
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <led_effect_callback+0x60>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <led_effect_callback+0x5c>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 fec4 	bl	80018c4 <HAL_Delay>
	for (int i = 0; i < 1000; i++) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b48:	dbe7      	blt.n	8000b1a <led_effect_callback+0xe>
	}

	direction = 0 - direction;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <led_effect_callback+0x58>)
 8000b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	425b      	negs	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	b25a      	sxtb	r2, r3
 8000b58:	4b02      	ldr	r3, [pc, #8]	@ (8000b64 <led_effect_callback+0x58>)
 8000b5a:	701a      	strb	r2, [r3, #0]

//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000012 	.word	0x20000012
 8000b68:	20000174 	.word	0x20000174
 8000b6c:	200000e4 	.word	0x200000e4

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b82:	f000 fe7f 	bl	8001884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40000c00 	.word	0x40000c00

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <rtc_configure_date>:
 *      Author: robert
 */

#include "main.h"

void rtc_configure_date(RTC_DateTypeDef *date) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <rtc_configure_date+0x1c>)
 8000bae:	f002 f89a 	bl	8002ce6 <HAL_RTC_SetDate>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000c4 	.word	0x200000c4

08000bc0 <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <rtc_configure_time+0x2c>)
 8000be0:	f001 ff89 	bl	8002af6 <HAL_RTC_SetTime>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000c4 	.word	0x200000c4

08000bf0 <show_time_date>:

void show_time_date(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f007 fbb2 	bl	8008368 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2214      	movs	r2, #20
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f007 fbac 	bl	8008368 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	4821      	ldr	r0, [pc, #132]	@ (8000c9c <show_time_date+0xac>)
 8000c18:	f002 f807 	bl	8002c2a <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	481d      	ldr	r0, [pc, #116]	@ (8000c9c <show_time_date+0xac>)
 8000c26:	f002 f8e2 	bl	8002dee <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <show_time_date+0x44>
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <show_time_date+0xb0>)
 8000c32:	e000      	b.n	8000c36 <show_time_date+0x46>
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <show_time_date+0xb4>)
 8000c36:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000c38:	793b      	ldrb	r3, [r7, #4]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000c3a:	4618      	mov	r0, r3
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000c3c:	797b      	ldrb	r3, [r7, #5]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000c3e:	461a      	mov	r2, r3
			rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000c40:	79bb      	ldrb	r3, [r7, #6]
	sprintf((char*) showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date",
 8000c42:	4619      	mov	r1, r3
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	9101      	str	r1, [sp, #4]
 8000c4a:	9200      	str	r2, [sp, #0]
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ca8 <show_time_date+0xb8>)
 8000c50:	4916      	ldr	r1, [pc, #88]	@ (8000cac <show_time_date+0xbc>)
 8000c52:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <show_time_date+0xc0>)
 8000c54:	f007 fb3c 	bl	80082d0 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <show_time_date+0xc4>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c62:	4915      	ldr	r1, [pc, #84]	@ (8000cb8 <show_time_date+0xc8>)
 8000c64:	f004 fbcc 	bl	8005400 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000c68:	7e7b      	ldrb	r3, [r7, #25]
 8000c6a:	461a      	mov	r2, r3
			rtc_date.Date, 2000 + rtc_date.Year);
 8000c6c:	7ebb      	ldrb	r3, [r7, #26]
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000c6e:	4619      	mov	r1, r3
			rtc_date.Date, 2000 + rtc_date.Year);
 8000c70:	7efb      	ldrb	r3, [r7, #27]
	sprintf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month,
 8000c72:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4910      	ldr	r1, [pc, #64]	@ (8000cbc <show_time_date+0xcc>)
 8000c7c:	4810      	ldr	r0, [pc, #64]	@ (8000cc0 <show_time_date+0xd0>)
 8000c7e:	f007 fb27 	bl	80082d0 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <show_time_date+0xc4>)
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c8c:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <show_time_date+0xd4>)
 8000c8e:	f004 fbb7 	bl	8005400 <xQueueGenericSend>
}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c4 	.word	0x200000c4
 8000ca0:	080095bc 	.word	0x080095bc
 8000ca4:	080095c0 	.word	0x080095c0
 8000ca8:	080095c4 	.word	0x080095c4
 8000cac:	080095d8 	.word	0x080095d8
 8000cb0:	20000178 	.word	0x20000178
 8000cb4:	200000bc 	.word	0x200000bc
 8000cb8:	20000014 	.word	0x20000014
 8000cbc:	080095f0 	.word	0x080095f0
 8000cc0:	200001a0 	.word	0x200001a0
 8000cc4:	20000018 	.word	0x20000018

08000cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <HAL_RTC_MspInit+0x50>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d111      	bne.n	8000d60 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d44:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fd60 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d56:	f7ff ff1d 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_RTC_MspInit+0x54>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40002800 	.word	0x40002800
 8000d6c:	42470e3c 	.word	0x42470e3c

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d80:	d10d      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd0:	d11d      	bne.n	8000e0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dee:	2320      	movs	r3, #32
 8000df0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000e0a:	f000 fef3 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_UART_MspInit+0x94>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d133      	bne.n	8000eaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <HAL_UART_MspInit+0x9c>)
 8000e96:	f000 fead 	bl	8001bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2106      	movs	r1, #6
 8000e9e:	2026      	movs	r0, #38	@ 0x26
 8000ea0:	f000 fdec 	bl	8001a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea4:	2026      	movs	r0, #38	@ 0x26
 8000ea6:	f000 fe05 	bl	8001ab4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <HAL_InitTick+0xe4>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	4a32      	ldr	r2, [pc, #200]	@ (8000fa4 <HAL_InitTick+0xe4>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee0:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <HAL_InitTick+0xe4>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eec:	f107 0210 	add.w	r2, r7, #16
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fc58 	bl	80027ac <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f06:	f001 fc29 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8000f0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f0c:	e004      	b.n	8000f18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f0e:	f001 fc25 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8000f12:	4603      	mov	r3, r0
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <HAL_InitTick+0xe8>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	3b01      	subs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <HAL_InitTick+0xec>)
 8000f28:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_InitTick+0xec>)
 8000f2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f32:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_InitTick+0xec>)
 8000f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f38:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_InitTick+0xec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_InitTick+0xec>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <HAL_InitTick+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000f4c:	4817      	ldr	r0, [pc, #92]	@ (8000fac <HAL_InitTick+0xec>)
 8000f4e:	f002 f85b 	bl	8003008 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11b      	bne.n	8000f98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000f60:	4812      	ldr	r0, [pc, #72]	@ (8000fac <HAL_InitTick+0xec>)
 8000f62:	f002 f8a1 	bl	80030a8 <HAL_TIM_Base_Start_IT>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d111      	bne.n	8000f98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f74:	2032      	movs	r0, #50	@ 0x32
 8000f76:	f000 fd9d 	bl	8001ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d808      	bhi.n	8000f92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2032      	movs	r0, #50	@ 0x32
 8000f86:	f000 fd79 	bl	8001a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_InitTick+0xf4>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e002      	b.n	8000f98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3738      	adds	r7, #56	@ 0x38
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	200001c8 	.word	0x200001c8
 8000fb0:	40000c00 	.word	0x40000c00
 8000fb4:	20000024 	.word	0x20000024

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <USART2_IRQHandler+0x10>)
 8000ff6:	f003 f8f5 	bl	80041e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000012c 	.word	0x2000012c

08001004 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <TIM5_IRQHandler+0x10>)
 800100a:	f002 f9b9 	bl	8003380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001c8 	.word	0x200001c8

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f007 f996 	bl	8008378 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20020000 	.word	0x20020000
 8001078:	00000400 	.word	0x00000400
 800107c:	20000210 	.word	0x20000210
 8001080:	20013108 	.word	0x20013108

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <menu_task>:

const char *msg_inv = "!!!!Invalid option!!!!\n";

state_t curr_state = sMainMenu;

void menu_task(void *param) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char *msg_menu = "\n========================\n"
 80010b0:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <menu_task+0xfc>)
 80010b2:	613b      	str	r3, [r7, #16]
			"Date and time ----> 1\n"
			"Exit          ----> 2\n"
			"Enter your choice here : ";

	while (1) {
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80010b4:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <menu_task+0x100>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	f107 0110 	add.w	r1, r7, #16
 80010bc:	2300      	movs	r3, #0
 80010be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010c2:	f004 f99d 	bl	8005400 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2000      	movs	r0, #0
 80010d6:	f005 fe13 	bl	8006d00 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	61fb      	str	r3, [r7, #28]

		if (cmd->len == 1) {
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d149      	bne.n	800117a <menu_task+0xd2>
			option = cmd->payload[0] - '0';
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	3b30      	subs	r3, #48	@ 0x30
 80010ec:	61bb      	str	r3, [r7, #24]
			switch (option) {
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d04b      	beq.n	800118c <menu_task+0xe4>
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	dc36      	bgt.n	8001168 <menu_task+0xc0>
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <menu_task+0x60>
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d018      	beq.n	8001138 <menu_task+0x90>
 8001106:	e02f      	b.n	8001168 <menu_task+0xc0>
			case 0:
				const char *msg_led = "Switch to LED task\n";
 8001108:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <menu_task+0x104>)
 800110a:	60fb      	str	r3, [r7, #12]
				xQueueSend(q_print, &msg_led, portMAX_DELAY);
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <menu_task+0x100>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 010c 	add.w	r1, r7, #12
 8001114:	2300      	movs	r3, #0
 8001116:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800111a:	f004 f971 	bl	8005400 <xQueueGenericSend>
				curr_state = sLedEffect;
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <menu_task+0x108>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task, 0, eNoAction);
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <menu_task+0x10c>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	f005 fe65 	bl	8006e00 <xTaskGenericNotify>
				break;
 8001136:	e02a      	b.n	800118e <menu_task+0xe6>
			case 1:
				const char *msg_rtc = "Switch to RTC task\n";
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <menu_task+0x110>)
 800113a:	60bb      	str	r3, [r7, #8]
				xQueueSend(q_print, &msg_rtc, portMAX_DELAY);
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <menu_task+0x100>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	f107 0108 	add.w	r1, r7, #8
 8001144:	2300      	movs	r3, #0
 8001146:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800114a:	f004 f959 	bl	8005400 <xQueueGenericSend>
				curr_state = sRtcMenu;
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <menu_task+0x108>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <menu_task+0x114>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	f005 fe4d 	bl	8006e00 <xTaskGenericNotify>
				break;
 8001166:	e012      	b.n	800118e <menu_task+0xe6>
			case 2: /*implement exit */
				break;
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <menu_task+0x100>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001172:	4913      	ldr	r1, [pc, #76]	@ (80011c0 <menu_task+0x118>)
 8001174:	f004 f944 	bl	8005400 <xQueueGenericSend>
 8001178:	e79c      	b.n	80010b4 <menu_task+0xc>
				continue;
			}

		} else {
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <menu_task+0x100>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001184:	490e      	ldr	r1, [pc, #56]	@ (80011c0 <menu_task+0x118>)
 8001186:	f004 f93b 	bl	8005400 <xQueueGenericSend>
			continue;
 800118a:	e009      	b.n	80011a0 <menu_task+0xf8>
				break;
 800118c:	bf00      	nop
		}
		// wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2000      	movs	r0, #0
 800119c:	f005 fdb0 	bl	8006d00 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80011a0:	e788      	b.n	80010b4 <menu_task+0xc>
 80011a2:	bf00      	nop
 80011a4:	08009618 	.word	0x08009618
 80011a8:	200000bc 	.word	0x200000bc
 80011ac:	080096c0 	.word	0x080096c0
 80011b0:	20000214 	.word	0x20000214
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	080096d4 	.word	0x080096d4
 80011bc:	200000b0 	.word	0x200000b0
 80011c0:	20000020 	.word	0x20000020

080011c4 <uart_task>:
	} // while super loop
}

void uart_task(void *param) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while (1) {
		// Get string from queue and then send it out.
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <uart_task+0x38>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f107 010c 	add.w	r1, r7, #12
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 fac9 	bl	8005770 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char*) msg),
 80011de:	68fc      	ldr	r4, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7fe fffc 	bl	80001e0 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f0:	4621      	mov	r1, r4
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <uart_task+0x3c>)
 80011f4:	f002 ff10 	bl	8004018 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80011f8:	bf00      	nop
 80011fa:	e7e7      	b.n	80011cc <uart_task+0x8>
 80011fc:	200000bc 	.word	0x200000bc
 8001200:	2000012c 	.word	0x2000012c

08001204 <extract_command>:
		HAL_MAX_DELAY);
	} //while super loop
}

static inline int extract_command(command_t *cmd) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;
	uint8_t i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	75fb      	strb	r3, [r7, #23]

	// Check if there are any messages waiting in the queue.s
	status = uxQueueMessagesWaiting(q_data);
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <extract_command+0x78>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fc27 	bl	8005a68 <uxQueueMessagesWaiting>
 800121a:	4603      	mov	r3, r0
 800121c:	613b      	str	r3, [r7, #16]
	if (!status)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <extract_command+0x26>
		return -1;
 8001224:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001228:	e023      	b.n	8001272 <extract_command+0x6e>

	do {
		status = xQueueReceive(q_data, &item, 0);
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <extract_command+0x78>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f107 010f 	add.w	r1, r7, #15
 8001232:	2200      	movs	r2, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fa9b 	bl	8005770 <xQueueReceive>
 800123a:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE && item != '\r')
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d109      	bne.n	8001256 <extract_command+0x52>
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2b0d      	cmp	r3, #13
 8001246:	d006      	beq.n	8001256 <extract_command+0x52>
			cmd->payload[i++] = item;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	75fa      	strb	r2, [r7, #23]
 800124e:	461a      	mov	r2, r3
 8001250:	7bf9      	ldrb	r1, [r7, #15]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	5499      	strb	r1, [r3, r2]
	} while (item != '\n');
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b0a      	cmp	r3, #10
 800125a:	d1e6      	bne.n	800122a <extract_command+0x26>

	cmd->payload[i - 1] = '\0';
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	3b01      	subs	r3, #1
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	2100      	movs	r1, #0
 8001264:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1; /*save  length of the command excluding null char */
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	3b01      	subs	r3, #1
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]

	return 0;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000b8 	.word	0x200000b8

08001280 <cmd_handler_task>:

void cmd_handler_task(void *param) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af02      	add	r7, sp, #8
 8001286:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while (1) {
		/*Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f005 fd33 	bl	8006d00 <xTaskGenericNotifyWait>
 800129a:	61f8      	str	r0, [r7, #28]

		if (ret == pdTRUE) {
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d1f2      	bne.n	8001288 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			extract_command(&cmd);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffac 	bl	8001204 <extract_command>

			switch (curr_state) {
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <cmd_handler_task+0x88>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	dce9      	bgt.n	8001288 <cmd_handler_task+0x8>
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	da1a      	bge.n	80012ee <cmd_handler_task+0x6e>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <cmd_handler_task+0x42>
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d00b      	beq.n	80012d8 <cmd_handler_task+0x58>
 80012c0:	e020      	b.n	8001304 <cmd_handler_task+0x84>
			case sMainMenu:
				xTaskNotify(handle_menu_task, (uint32_t )&cmd,
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <cmd_handler_task+0x8c>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2303      	movs	r3, #3
 80012d0:	2100      	movs	r1, #0
 80012d2:	f005 fd95 	bl	8006e00 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 80012d6:	e015      	b.n	8001304 <cmd_handler_task+0x84>

			case sLedEffect:
				xTaskNotify(handle_led_task, (uint32_t )&cmd,
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <cmd_handler_task+0x90>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2303      	movs	r3, #3
 80012e6:	2100      	movs	r1, #0
 80012e8:	f005 fd8a 	bl	8006e00 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 80012ec:	e00a      	b.n	8001304 <cmd_handler_task+0x84>

			case sRtcMenu:
			case sRtcTimeConfig:
			case sRtcDateConfig:
			case sRtcReport:
				xTaskNotify(handle_rtc_task, (uint32_t )&cmd,
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <cmd_handler_task+0x94>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2303      	movs	r3, #3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f005 fd7f 	bl	8006e00 <xTaskGenericNotify>
						eSetValueWithOverwrite);
				break;
 8001302:	bf00      	nop
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001304:	e7c0      	b.n	8001288 <cmd_handler_task+0x8>
 8001306:	bf00      	nop
 8001308:	20000214 	.word	0x20000214
 800130c:	200000a4 	.word	0x200000a4
 8001310:	200000ac 	.word	0x200000ac
 8001314:	200000b0 	.word	0x200000b0

08001318 <led_effect_stop>:
			}
		}
	}
}

void led_effect_stop(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af02      	add	r7, sp, #8
	xTimerStop(handle_led_timer, portMAX_DELAY);
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <led_effect_stop+0x20>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	2200      	movs	r2, #0
 800132c:	2103      	movs	r1, #3
 800132e:	f006 f8fb 	bl	8007528 <xTimerGenericCommand>
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200000b4 	.word	0x200000b4

0800133c <led_effect>:

static inline void led_effect(int n) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b092      	sub	sp, #72	@ 0x48
 8001340:	af02      	add	r7, sp, #8
 8001342:	6078      	str	r0, [r7, #4]
	// use sprintf() put "You select type %d\n"
	char msg[50];
	sprintf(msg, "You select type %d led effect\n", n);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4912      	ldr	r1, [pc, #72]	@ (8001394 <led_effect+0x58>)
 800134c:	4618      	mov	r0, r3
 800134e:	f006 ffbf 	bl	80082d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4618      	mov	r0, r3
 8001358:	f7fe ff42 	bl	80001e0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f107 010c 	add.w	r1, r7, #12
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001368:	480b      	ldr	r0, [pc, #44]	@ (8001398 <led_effect+0x5c>)
 800136a:	f002 fe55 	bl	8004018 <HAL_UART_Transmit>

	led_effect_stop();
 800136e:	f7ff ffd3 	bl	8001318 <led_effect_stop>
	xTimerChangePeriod(handle_led_timer, n * portTICK_PERIOD_MS * 1000, 100);
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <led_effect+0x60>)
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800137c:	fb03 f202 	mul.w	r2, r3, r2
 8001380:	2364      	movs	r3, #100	@ 0x64
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	2104      	movs	r1, #4
 8001388:	f006 f8ce 	bl	8007528 <xTimerGenericCommand>
}
 800138c:	bf00      	nop
 800138e:	3740      	adds	r7, #64	@ 0x40
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	080096e8 	.word	0x080096e8
 8001398:	2000012c 	.word	0x2000012c
 800139c:	200000b4 	.word	0x200000b4

080013a0 <rtc_time_config>:

void rtc_time_config(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef time;
	const char *msg = "Enter hour(1-12):minutes(0-59):seconds(0-59)\n";
 80013a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <rtc_time_config+0xc0>)
 80013a8:	617b      	str	r3, [r7, #20]
	int min;
	int sec;
	uint32_t cmd_addr;
	command_t *cmd;

	xQueueSend(q_print, &msg, portMAX_DELAY);
 80013aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <rtc_time_config+0xc4>)
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	f107 0114 	add.w	r1, r7, #20
 80013b2:	2300      	movs	r3, #0
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b8:	f004 f822 	bl	8005400 <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2000      	movs	r0, #0
 80013ca:	f005 fc99 	bl	8006d00 <xTaskGenericNotifyWait>
	cmd = (command_t*) cmd_addr;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// parse the string "cmd", which format is <hour>:<min>:<sec> into the uint8_t variables
	if (sscanf((char*) cmd->payload, "%d:%d:%d", &hour, &min, &sec) == 3) {
 80013d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d4:	f107 010c 	add.w	r1, r7, #12
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	460b      	mov	r3, r1
 80013e4:	4920      	ldr	r1, [pc, #128]	@ (8001468 <rtc_time_config+0xc8>)
 80013e6:	f006 ff93 	bl	8008310 <siscanf>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d12b      	bne.n	8001448 <rtc_time_config+0xa8>
		// Validate the input
		if (hour >= 1 && hour <= 12 && min >= 0 && min <= 59 && sec >= 0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dd1f      	ble.n	8001436 <rtc_time_config+0x96>
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	dc1c      	bgt.n	8001436 <rtc_time_config+0x96>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db19      	blt.n	8001436 <rtc_time_config+0x96>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b3b      	cmp	r3, #59	@ 0x3b
 8001406:	dc16      	bgt.n	8001436 <rtc_time_config+0x96>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db13      	blt.n	8001436 <rtc_time_config+0x96>
				&& sec <= 59) {
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b3b      	cmp	r3, #59	@ 0x3b
 8001412:	dc10      	bgt.n	8001436 <rtc_time_config+0x96>
			time.Hours = (uint8_t) hour;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	763b      	strb	r3, [r7, #24]
			time.Minutes = (uint8_t) min;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	767b      	strb	r3, [r7, #25]
			time.Seconds = (uint8_t) sec;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	76bb      	strb	r3, [r7, #26]

			rtc_configure_time(&time);
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fbc8 	bl	8000bc0 <rtc_configure_time>
			// Print success message
			msg = "Time set successfully\n";
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <rtc_time_config+0xcc>)
 8001432:	617b      	str	r3, [r7, #20]
		}
	} else {
		// invalid entry
		xQueueSend(q_print, &msg_inv, portMAX_DELAY);
	}
}
 8001434:	e010      	b.n	8001458 <rtc_time_config+0xb8>
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <rtc_time_config+0xc4>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001440:	490b      	ldr	r1, [pc, #44]	@ (8001470 <rtc_time_config+0xd0>)
 8001442:	f003 ffdd 	bl	8005400 <xQueueGenericSend>
}
 8001446:	e007      	b.n	8001458 <rtc_time_config+0xb8>
		xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <rtc_time_config+0xc4>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001452:	4907      	ldr	r1, [pc, #28]	@ (8001470 <rtc_time_config+0xd0>)
 8001454:	f003 ffd4 	bl	8005400 <xQueueGenericSend>
}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	@ 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	08009708 	.word	0x08009708
 8001464:	200000bc 	.word	0x200000bc
 8001468:	08009738 	.word	0x08009738
 800146c:	08009744 	.word	0x08009744
 8001470:	20000020 	.word	0x20000020

08001474 <rtc_date_config>:

void rtc_date_config(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af02      	add	r7, sp, #8
	RTC_DateTypeDef date;
	const char *msg = "Enter month:day:year (e.g., 1:1:2023)\n";
 800147a:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <rtc_date_config+0xe4>)
 800147c:	617b      	str	r3, [r7, #20]
	int month, day, year;
	uint32_t cmd_addr;
	command_t *cmd;

	xQueueSend(q_print, &msg, portMAX_DELAY);
 800147e:	4b37      	ldr	r3, [pc, #220]	@ (800155c <rtc_date_config+0xe8>)
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	f107 0114 	add.w	r1, r7, #20
 8001486:	2300      	movs	r3, #0
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800148c:	f003 ffb8 	bl	8005400 <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f005 fc2f 	bl	8006d00 <xTaskGenericNotifyWait>
	cmd = (command_t*) cmd_addr;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	61fb      	str	r3, [r7, #28]

	if (sscanf((char*) cmd->payload, "%d:%d:%d", &month, &day, &year) == 3) {
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f107 010c 	add.w	r1, r7, #12
 80014ac:	f107 0210 	add.w	r2, r7, #16
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	460b      	mov	r3, r1
 80014b8:	4929      	ldr	r1, [pc, #164]	@ (8001560 <rtc_date_config+0xec>)
 80014ba:	f006 ff29 	bl	8008310 <siscanf>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d139      	bne.n	8001538 <rtc_date_config+0xc4>
		if (year >= 0 && year <= 100 && month >= 1 && month <= 12 && day >= 1
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db2a      	blt.n	8001520 <rtc_date_config+0xac>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b64      	cmp	r3, #100	@ 0x64
 80014ce:	dc27      	bgt.n	8001520 <rtc_date_config+0xac>
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dd24      	ble.n	8001520 <rtc_date_config+0xac>
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	dc21      	bgt.n	8001520 <rtc_date_config+0xac>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dd1e      	ble.n	8001520 <rtc_date_config+0xac>
				&& day <= 31) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b1f      	cmp	r3, #31
 80014e6:	dc1b      	bgt.n	8001520 <rtc_date_config+0xac>
			date.Date = (uint8_t) day;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	76bb      	strb	r3, [r7, #26]
			date.Month = (uint8_t) month;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	767b      	strb	r3, [r7, #25]
			date.Year = (uint8_t) (year - 2000); // RTC typically uses years since 2000
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3330      	adds	r3, #48	@ 0x30
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	76fb      	strb	r3, [r7, #27]

			rtc_configure_date(&date);
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb4c 	bl	8000ba0 <rtc_configure_date>
			msg = "Date set successfully\n";
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <rtc_date_config+0xf0>)
 800150a:	617b      	str	r3, [r7, #20]
			xQueueSend(q_print, &msg, portMAX_DELAY);
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <rtc_date_config+0xe8>)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f107 0114 	add.w	r1, r7, #20
 8001514:	2300      	movs	r3, #0
 8001516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800151a:	f003 ff71 	bl	8005400 <xQueueGenericSend>
		}
	} else {
		msg = "Invalid input format. Please use MONTH:DAY:YEAR format.\n";
		xQueueSend(q_print, &msg, portMAX_DELAY);
	}
}
 800151e:	e016      	b.n	800154e <rtc_date_config+0xda>
			msg = "Invalid date range. Please enter valid values.\n";
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <rtc_date_config+0xf4>)
 8001522:	617b      	str	r3, [r7, #20]
			xQueueSend(q_print, &msg, portMAX_DELAY);
 8001524:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <rtc_date_config+0xe8>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f107 0114 	add.w	r1, r7, #20
 800152c:	2300      	movs	r3, #0
 800152e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001532:	f003 ff65 	bl	8005400 <xQueueGenericSend>
}
 8001536:	e00a      	b.n	800154e <rtc_date_config+0xda>
		msg = "Invalid input format. Please use MONTH:DAY:YEAR format.\n";
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <rtc_date_config+0xf8>)
 800153a:	617b      	str	r3, [r7, #20]
		xQueueSend(q_print, &msg, portMAX_DELAY);
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <rtc_date_config+0xe8>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f107 0114 	add.w	r1, r7, #20
 8001544:	2300      	movs	r3, #0
 8001546:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800154a:	f003 ff59 	bl	8005400 <xQueueGenericSend>
}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	0800975c 	.word	0x0800975c
 800155c:	200000bc 	.word	0x200000bc
 8001560:	08009738 	.word	0x08009738
 8001564:	08009784 	.word	0x08009784
 8001568:	0800979c 	.word	0x0800979c
 800156c:	080097cc 	.word	0x080097cc

08001570 <rtc_task>:

portTASK_FUNCTION( rtc_task, pvParameters ) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af02      	add	r7, sp, #8
 8001576:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char *msg_rtc1 = "========================\n"
 8001578:	4b48      	ldr	r3, [pc, #288]	@ (800169c <rtc_task+0x12c>)
 800157a:	61bb      	str	r3, [r7, #24]
			"|         RTC          |\n"
			"========================\n";
	const char *msg_rtc2 = "Configure Time            ----> 0\n"
 800157c:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <rtc_task+0x130>)
 800157e:	617b      	str	r3, [r7, #20]
			"Enable reporting          ----> 2\n"
			"Exit                      ----> 3\n"
			"Enter your choice here : ";

	while (1) {
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f005 fbb7 	bl	8006d00 <xTaskGenericNotifyWait>

		// Show the RTC menu
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 8001592:	4b44      	ldr	r3, [pc, #272]	@ (80016a4 <rtc_task+0x134>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f107 0118 	add.w	r1, r7, #24
 800159a:	2300      	movs	r3, #0
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015a0:	f003 ff2e 	bl	8005400 <xQueueGenericSend>
		show_time_date();
 80015a4:	f7ff fb24 	bl	8000bf0 <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 80015a8:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <rtc_task+0x134>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f107 0114 	add.w	r1, r7, #20
 80015b0:	2300      	movs	r3, #0
 80015b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b6:	f003 ff23 	bl	8005400 <xQueueGenericSend>

		/*Wait for command notification (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2000      	movs	r0, #0
 80015ca:	f005 fb99 	bl	8006d00 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24

		if (cmd->len == 1) {
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d14a      	bne.n	8001670 <rtc_task+0x100>
			option = cmd->payload[0] - '0';
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3b30      	subs	r3, #48	@ 0x30
 80015e0:	623b      	str	r3, [r7, #32]
			switch (option) {
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d02b      	beq.n	8001640 <rtc_task+0xd0>
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	dc37      	bgt.n	800165e <rtc_task+0xee>
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <rtc_task+0x8c>
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d011      	beq.n	800161e <rtc_task+0xae>
 80015fa:	e030      	b.n	800165e <rtc_task+0xee>
			case 0:
				xQueueSend(q_print, &(char* ) { "Configure time\n" },
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <rtc_task+0x134>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <rtc_task+0x138>)
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	f107 0110 	add.w	r1, r7, #16
 8001608:	2300      	movs	r3, #0
 800160a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800160e:	f003 fef7 	bl	8005400 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcTimeConfig;
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <rtc_task+0x13c>)
 8001614:	2203      	movs	r2, #3
 8001616:	701a      	strb	r2, [r3, #0]
				rtc_time_config();
 8001618:	f7ff fec2 	bl	80013a0 <rtc_time_config>
				break;
 800161c:	e031      	b.n	8001682 <rtc_task+0x112>
			case 1:
				xQueueSend(q_print, &(char* ) { "Configure Date\n" },
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <rtc_task+0x134>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <rtc_task+0x140>)
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	2300      	movs	r3, #0
 800162c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001630:	f003 fee6 	bl	8005400 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcDateConfig;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <rtc_task+0x13c>)
 8001636:	2204      	movs	r2, #4
 8001638:	701a      	strb	r2, [r3, #0]
				rtc_date_config();
 800163a:	f7ff ff1b 	bl	8001474 <rtc_date_config>
				break;
 800163e:	e020      	b.n	8001682 <rtc_task+0x112>
			case 2: /*implement exit */
				xQueueSend(q_print, &(char* ) { "Enable export time\n" },
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <rtc_task+0x134>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <rtc_task+0x144>)
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	f107 0108 	add.w	r1, r7, #8
 800164c:	2300      	movs	r3, #0
 800164e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001652:	f003 fed5 	bl	8005400 <xQueueGenericSend>
						portMAX_DELAY);
				curr_state = sRtcReport;
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <rtc_task+0x13c>)
 8001658:	2205      	movs	r2, #5
 800165a:	701a      	strb	r2, [r3, #0]

				break;
 800165c:	e011      	b.n	8001682 <rtc_task+0x112>
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <rtc_task+0x134>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001668:	4913      	ldr	r1, [pc, #76]	@ (80016b8 <rtc_task+0x148>)
 800166a:	f003 fec9 	bl	8005400 <xQueueGenericSend>
 800166e:	e787      	b.n	8001580 <rtc_task+0x10>
				continue;
			}
		} else {
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <rtc_task+0x134>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800167a:	490f      	ldr	r1, [pc, #60]	@ (80016b8 <rtc_task+0x148>)
 800167c:	f003 fec0 	bl	8005400 <xQueueGenericSend>
			continue;
 8001680:	e00b      	b.n	800169a <rtc_task+0x12a>
		}

		/* update state variable */
		curr_state = sMainMenu;
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <rtc_task+0x13c>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <rtc_task+0x14c>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	f005 fbb3 	bl	8006e00 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800169a:	e771      	b.n	8001580 <rtc_task+0x10>
 800169c:	08009808 	.word	0x08009808
 80016a0:	08009854 	.word	0x08009854
 80016a4:	200000bc 	.word	0x200000bc
 80016a8:	080098f8 	.word	0x080098f8
 80016ac:	20000214 	.word	0x20000214
 80016b0:	08009908 	.word	0x08009908
 80016b4:	08009918 	.word	0x08009918
 80016b8:	20000020 	.word	0x20000020
 80016bc:	200000a4 	.word	0x200000a4

080016c0 <led_task>:
	}
}

portTASK_FUNCTION( led_task, pvParameters ) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char *msg_led = "========================\n"
 80016c8:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <led_task+0x104>)
 80016ca:	60fb      	str	r3, [r7, #12]
			"========================\n"
			"(none,e1,e2,e3,e4)\n"
			"Enter your choice here : ";
	while (1) {
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2300      	movs	r3, #0
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f005 fb11 	bl	8006d00 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80016de:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <led_task+0x108>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f107 010c 	add.w	r1, r7, #12
 80016e6:	2300      	movs	r3, #0
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ec:	f003 fe88 	bl	8005400 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016f8:	9200      	str	r2, [sp, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2000      	movs	r0, #0
 8001700:	f005 fafe 	bl	8006d00 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	617b      	str	r3, [r7, #20]

		if (cmd->len <= 4) {
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b04      	cmp	r3, #4
 800170e:	d843      	bhi.n	8001798 <led_task+0xd8>
			if (!strcmp((char*) cmd->payload, "none"))
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	492e      	ldr	r1, [pc, #184]	@ (80017cc <led_task+0x10c>)
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd6b 	bl	80001f0 <strcmp>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <led_task+0x66>
				led_effect_stop();
 8001720:	f7ff fdfa 	bl	8001318 <led_effect_stop>
 8001724:	e040      	b.n	80017a8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e1"))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4929      	ldr	r1, [pc, #164]	@ (80017d0 <led_task+0x110>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd60 	bl	80001f0 <strcmp>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <led_task+0x7e>
				led_effect(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff fe00 	bl	800133c <led_effect>
 800173c:	e034      	b.n	80017a8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e2"))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4924      	ldr	r1, [pc, #144]	@ (80017d4 <led_task+0x114>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd54 	bl	80001f0 <strcmp>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <led_task+0x96>
				led_effect(2);
 800174e:	2002      	movs	r0, #2
 8001750:	f7ff fdf4 	bl	800133c <led_effect>
 8001754:	e028      	b.n	80017a8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e3"))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	491f      	ldr	r1, [pc, #124]	@ (80017d8 <led_task+0x118>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fd48 	bl	80001f0 <strcmp>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <led_task+0xae>
				led_effect(3);
 8001766:	2003      	movs	r0, #3
 8001768:	f7ff fde8 	bl	800133c <led_effect>
 800176c:	e01c      	b.n	80017a8 <led_task+0xe8>
			else if (!strcmp((char*) cmd->payload, "e4"))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	491a      	ldr	r1, [pc, #104]	@ (80017dc <led_task+0x11c>)
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fd3c 	bl	80001f0 <strcmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <led_task+0xc6>
				led_effect(4);
 800177e:	2004      	movs	r0, #4
 8001780:	f7ff fddc 	bl	800133c <led_effect>
 8001784:	e010      	b.n	80017a8 <led_task+0xe8>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY); /*print invalid message */
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <led_task+0x108>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001790:	4913      	ldr	r1, [pc, #76]	@ (80017e0 <led_task+0x120>)
 8001792:	f003 fe35 	bl	8005400 <xQueueGenericSend>
 8001796:	e007      	b.n	80017a8 <led_task+0xe8>
		} else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <led_task+0x108>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a2:	490f      	ldr	r1, [pc, #60]	@ (80017e0 <led_task+0x120>)
 80017a4:	f003 fe2c 	bl	8005400 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <led_task+0x124>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <led_task+0x128>)
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	f005 fb20 	bl	8006e00 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017c0:	e784      	b.n	80016cc <led_task+0xc>
 80017c2:	bf00      	nop
 80017c4:	0800992c 	.word	0x0800992c
 80017c8:	200000bc 	.word	0x200000bc
 80017cc:	080099a4 	.word	0x080099a4
 80017d0:	080099ac 	.word	0x080099ac
 80017d4:	080099b0 	.word	0x080099b0
 80017d8:	080099b4 	.word	0x080099b4
 80017dc:	080099b8 	.word	0x080099b8
 80017e0:	20000020 	.word	0x20000020
 80017e4:	20000214 	.word	0x20000214
 80017e8:	200000a4 	.word	0x200000a4

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001824 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f0:	f7ff fc48 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	@ (800182c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	@ (8001838 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f006 fdb3 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7fe febf 	bl	80005a0 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001830:	08009b58 	.word	0x08009b58
  ldr r2, =_sbss
 8001834:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001838:	20013108 	.word	0x20013108

0800183c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f8fc 	bl	8001a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	200f      	movs	r0, #15
 8001870:	f7ff fb26 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fa28 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000028 	.word	0x20000028
 80018a8:	20000218 	.word	0x20000218

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000218 	.word	0x20000218

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000028 	.word	0x20000028

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	@ (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	@ (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	@ (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff4c 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8e:	f7ff ff61 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff ffb1 	bl	8001a00 <NVIC_EncodePriority>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff80 	bl	80019ac <__NVIC_SetPriority>
}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff54 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ade:	f7ff fee5 	bl	80018ac <HAL_GetTick>
 8001ae2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d008      	beq.n	8001b02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e052      	b.n	8001ba8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0216 	bic.w	r2, r2, #22
 8001b10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <HAL_DMA_Abort+0x62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0208 	bic.w	r2, r2, #8
 8001b40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b52:	e013      	b.n	8001b7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b54:	f7ff feaa 	bl	80018ac <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d90c      	bls.n	8001b7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e015      	b.n	8001ba8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1e4      	bne.n	8001b54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	223f      	movs	r2, #63	@ 0x3f
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d004      	beq.n	8001bce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00c      	b.n	8001be8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e159      	b.n	8001ec4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8148 	bne.w	8001ebe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a2 	beq.w	8001ebe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b57      	ldr	r3, [pc, #348]	@ (8001edc <HAL_GPIO_Init+0x2e8>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a56      	ldr	r2, [pc, #344]	@ (8001edc <HAL_GPIO_Init+0x2e8>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8a:	4b54      	ldr	r3, [pc, #336]	@ (8001edc <HAL_GPIO_Init+0x2e8>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a52      	ldr	r2, [pc, #328]	@ (8001ee0 <HAL_GPIO_Init+0x2ec>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a49      	ldr	r2, [pc, #292]	@ (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x202>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a48      	ldr	r2, [pc, #288]	@ (8001ee8 <HAL_GPIO_Init+0x2f4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x1fe>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a47      	ldr	r2, [pc, #284]	@ (8001eec <HAL_GPIO_Init+0x2f8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x1fa>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a46      	ldr	r2, [pc, #280]	@ (8001ef0 <HAL_GPIO_Init+0x2fc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x1f6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a45      	ldr	r2, [pc, #276]	@ (8001ef4 <HAL_GPIO_Init+0x300>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x1f2>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <HAL_GPIO_Init+0x2ec>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b38      	ldr	r3, [pc, #224]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f aea2 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e267      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d075      	beq.n	8002006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f1a:	4b88      	ldr	r3, [pc, #544]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b85      	ldr	r3, [pc, #532]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b82      	ldr	r3, [pc, #520]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b7e      	ldr	r3, [pc, #504]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e242      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x74>
 8001f62:	4b76      	ldr	r3, [pc, #472]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a75      	ldr	r2, [pc, #468]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b70      	ldr	r3, [pc, #448]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b6d      	ldr	r3, [pc, #436]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f94:	4b69      	ldr	r3, [pc, #420]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a68      	ldr	r2, [pc, #416]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b66      	ldr	r3, [pc, #408]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a65      	ldr	r2, [pc, #404]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fc7a 	bl	80018ac <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fc76 	bl	80018ac <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e207      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b5b      	ldr	r3, [pc, #364]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fc66 	bl	80018ac <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fc62 	bl	80018ac <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1f3      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b51      	ldr	r3, [pc, #324]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xe8>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002012:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b44      	ldr	r3, [pc, #272]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1c7      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b3b      	ldr	r3, [pc, #236]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4937      	ldr	r1, [pc, #220]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <HAL_RCC_OscConfig+0x244>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff fc1b 	bl	80018ac <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207a:	f7ff fc17 	bl	80018ac <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1a8      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b2b      	ldr	r3, [pc, #172]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b28      	ldr	r3, [pc, #160]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4925      	ldr	r1, [pc, #148]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_RCC_OscConfig+0x244>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff fbfa 	bl	80018ac <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020bc:	f7ff fbf6 	bl	80018ac <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e187      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d036      	beq.n	8002154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_RCC_OscConfig+0x248>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff fbda 	bl	80018ac <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff fbd6 	bl	80018ac <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e167      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_RCC_OscConfig+0x240>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x200>
 800211a:	e01b      	b.n	8002154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_OscConfig+0x248>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff fbc3 	bl	80018ac <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	e00e      	b.n	8002148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212a:	f7ff fbbf 	bl	80018ac <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d907      	bls.n	8002148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e150      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
 800213c:	40023800 	.word	0x40023800
 8002140:	42470000 	.word	0x42470000
 8002144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b88      	ldr	r3, [pc, #544]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ea      	bne.n	800212a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8097 	beq.w	8002290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b81      	ldr	r3, [pc, #516]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b7d      	ldr	r3, [pc, #500]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	4a7c      	ldr	r2, [pc, #496]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	@ 0x40
 8002182:	4b7a      	ldr	r3, [pc, #488]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b77      	ldr	r3, [pc, #476]	@ (8002370 <HAL_RCC_OscConfig+0x474>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b74      	ldr	r3, [pc, #464]	@ (8002370 <HAL_RCC_OscConfig+0x474>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a73      	ldr	r2, [pc, #460]	@ (8002370 <HAL_RCC_OscConfig+0x474>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fb7f 	bl	80018ac <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff fb7b 	bl	80018ac <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e10c      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002370 <HAL_RCC_OscConfig+0x474>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2ea>
 80021d8:	4b64      	ldr	r3, [pc, #400]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4a63      	ldr	r2, [pc, #396]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0x324>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x30c>
 80021ee:	4b5f      	ldr	r3, [pc, #380]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f2:	4a5e      	ldr	r2, [pc, #376]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fa:	4b5c      	ldr	r3, [pc, #368]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	4a5b      	ldr	r2, [pc, #364]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	@ 0x70
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0x324>
 8002208:	4b58      	ldr	r3, [pc, #352]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	4a57      	ldr	r2, [pc, #348]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	@ 0x70
 8002214:	4b55      	ldr	r3, [pc, #340]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002218:	4a54      	ldr	r2, [pc, #336]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7ff fb40 	bl	80018ac <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff fb3c 	bl	80018ac <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0cb      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4b49      	ldr	r3, [pc, #292]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ee      	beq.n	8002230 <HAL_RCC_OscConfig+0x334>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7ff fb2a 	bl	80018ac <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7ff fb26 	bl	80018ac <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0b5      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002272:	4b3e      	ldr	r3, [pc, #248]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ee      	bne.n	800225c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b39      	ldr	r3, [pc, #228]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	4a38      	ldr	r2, [pc, #224]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800228a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a1 	beq.w	80023dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229a:	4b34      	ldr	r3, [pc, #208]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d05c      	beq.n	8002360 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d141      	bne.n	8002332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <HAL_RCC_OscConfig+0x478>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fafa 	bl	80018ac <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff faf6 	bl	80018ac <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e087      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	491b      	ldr	r1, [pc, #108]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x478>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff facf 	bl	80018ac <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff facb 	bl	80018ac <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e05c      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	4b11      	ldr	r3, [pc, #68]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x416>
 8002330:	e054      	b.n	80023dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_RCC_OscConfig+0x478>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fab8 	bl	80018ac <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff fab4 	bl	80018ac <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e045      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCC_OscConfig+0x470>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x444>
 800235e:	e03d      	b.n	80023dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e038      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000
 8002374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RCC_OscConfig+0x4ec>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d028      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d121      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d11a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d111      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0cc      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b68      	ldr	r3, [pc, #416]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d90c      	bls.n	8002428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b65      	ldr	r3, [pc, #404]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800244a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d044      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d119      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b3f      	ldr	r3, [pc, #252]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e067      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4934      	ldr	r1, [pc, #208]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7ff f9e6 	bl	80018ac <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f9e2 	bl	80018ac <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d20c      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fc94 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	080099e0 	.word	0x080099e0
 80025b0:	2000001c 	.word	0x2000001c
 80025b4:	20000024 	.word	0x20000024

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b090      	sub	sp, #64	@ 0x40
 80025be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d00d      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	f200 80a1 	bhi.w	8002724 <HAL_RCC_GetSysClockFreq+0x16c>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ea:	e09b      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b53      	ldr	r3, [pc, #332]	@ (800273c <HAL_RCC_GetSysClockFreq+0x184>)
 80025ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025f0:	e09b      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b53      	ldr	r3, [pc, #332]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025f6:	e098      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b4d      	ldr	r3, [pc, #308]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d028      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b4a      	ldr	r3, [pc, #296]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	2200      	movs	r2, #0
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	627a      	str	r2, [r7, #36]	@ 0x24
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002620:	2100      	movs	r1, #0
 8002622:	4b47      	ldr	r3, [pc, #284]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x188>)
 8002624:	fb03 f201 	mul.w	r2, r3, r1
 8002628:	2300      	movs	r3, #0
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	4413      	add	r3, r2
 8002630:	4a43      	ldr	r2, [pc, #268]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x188>)
 8002632:	fba0 1202 	umull	r1, r2, r0, r2
 8002636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002638:	460a      	mov	r2, r1
 800263a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800263c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800263e:	4413      	add	r3, r2
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002644:	2200      	movs	r2, #0
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	61fa      	str	r2, [r7, #28]
 800264a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002652:	f7fd fe2d 	bl	80002b0 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4613      	mov	r3, r2
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800265e:	e053      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002660:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	2200      	movs	r2, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	617a      	str	r2, [r7, #20]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002672:	f04f 0b00 	mov.w	fp, #0
 8002676:	4652      	mov	r2, sl
 8002678:	465b      	mov	r3, fp
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002688:	0150      	lsls	r0, r2, #5
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	ebb2 080a 	subs.w	r8, r2, sl
 8002692:	eb63 090b 	sbc.w	r9, r3, fp
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026aa:	ebb2 0408 	subs.w	r4, r2, r8
 80026ae:	eb63 0509 	sbc.w	r5, r3, r9
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	00eb      	lsls	r3, r5, #3
 80026bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c0:	00e2      	lsls	r2, r4, #3
 80026c2:	4614      	mov	r4, r2
 80026c4:	461d      	mov	r5, r3
 80026c6:	eb14 030a 	adds.w	r3, r4, sl
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	eb45 030b 	adc.w	r3, r5, fp
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026de:	4629      	mov	r1, r5
 80026e0:	028b      	lsls	r3, r1, #10
 80026e2:	4621      	mov	r1, r4
 80026e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e8:	4621      	mov	r1, r4
 80026ea:	028a      	lsls	r2, r1, #10
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	2200      	movs	r2, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026fc:	f7fd fdd8 	bl	80002b0 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	3301      	adds	r3, #1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002722:	e002      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <HAL_RCC_GetSysClockFreq+0x184>)
 8002726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800272c:	4618      	mov	r0, r3
 800272e:	3740      	adds	r7, #64	@ 0x40
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	017d7840 	.word	0x017d7840

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_RCC_GetHCLKFreq+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000001c 	.word	0x2000001c

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002760:	f7ff fff0 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0a9b      	lsrs	r3, r3, #10
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4903      	ldr	r1, [pc, #12]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	080099f0 	.word	0x080099f0

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002788:	f7ff ffdc 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0b5b      	lsrs	r3, r3, #13
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	080099f0 	.word	0x080099f0

080027ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	220f      	movs	r2, #15
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <HAL_RCC_GetClockConfig+0x5c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <HAL_RCC_GetClockConfig+0x5c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	08db      	lsrs	r3, r3, #3
 80027e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ee:	4b07      	ldr	r3, [pc, #28]	@ (800280c <HAL_RCC_GetClockConfig+0x60>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0207 	and.w	r2, r3, #7
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40023c00 	.word	0x40023c00

08002810 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002834:	2b00      	cmp	r3, #0
 8002836:	d038      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002838:	4b68      	ldr	r3, [pc, #416]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800283e:	f7ff f835 	bl	80018ac <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002846:	f7ff f831 	bl	80018ac <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0bd      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002858:	4b61      	ldr	r3, [pc, #388]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	071b      	lsls	r3, r3, #28
 8002876:	495a      	ldr	r1, [pc, #360]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800287e:	4b57      	ldr	r3, [pc, #348]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002884:	f7ff f812 	bl	80018ac <HAL_GetTick>
 8002888:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800288c:	f7ff f80e 	bl	80018ac <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e09a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800289e:	4b50      	ldr	r3, [pc, #320]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8083 	beq.w	80029be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	4b48      	ldr	r3, [pc, #288]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	4a47      	ldr	r2, [pc, #284]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c8:	4b45      	ldr	r3, [pc, #276]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028d4:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe ffe4 	bl	80018ac <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe ffe0 	bl	80018ac <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e06c      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80028fa:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002906:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800290e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d02f      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d028      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002924:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800292e:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002934:	4b2c      	ldr	r3, [pc, #176]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800293a:	4a29      	ldr	r2, [pc, #164]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002940:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d114      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe ffae 	bl	80018ac <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe ffaa 	bl	80018ac <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e034      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002982:	d10d      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002998:	4911      	ldr	r1, [pc, #68]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
 800299e:	e005      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029aa:	6093      	str	r3, [r2, #8]
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	4909      	ldr	r1, [pc, #36]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7d1a      	ldrb	r2, [r3, #20]
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80029d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	42470068 	.word	0x42470068
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42470e40 	.word	0x42470e40
 80029ec:	424711e0 	.word	0x424711e0

080029f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e073      	b.n	8002aee <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7f5b      	ldrb	r3, [r3, #29]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f97e 	bl	8000d18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d055      	beq.n	8002adc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	22ca      	movs	r2, #202	@ 0xca
 8002a36:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2253      	movs	r2, #83	@ 0x53
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa49 	bl	8002ed8 <RTC_EnterInitMode>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d12c      	bne.n	8002aaa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a62:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68d2      	ldr	r2, [r2, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	041a      	lsls	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa50 	bl	8002f46 <RTC_ExitInitMode>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d110      	bne.n	8002ad2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	22ff      	movs	r2, #255	@ 0xff
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ada:	e001      	b.n	8002ae0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	7f1b      	ldrb	r3, [r3, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_RTC_SetTime+0x1c>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e087      	b.n	8002c22 <HAL_RTC_SetTime+0x12c>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d126      	bne.n	8002b72 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2200      	movs	r2, #0
 8002b36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fa27 	bl	8002f90 <RTC_ByteToBcd2>
 8002b42:	4603      	mov	r3, r0
 8002b44:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fa20 	bl	8002f90 <RTC_ByteToBcd2>
 8002b50:	4603      	mov	r3, r0
 8002b52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b54:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	789b      	ldrb	r3, [r3, #2]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fa18 	bl	8002f90 <RTC_ByteToBcd2>
 8002b60:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e018      	b.n	8002ba4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b92:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	78db      	ldrb	r3, [r3, #3]
 8002b9e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	22ca      	movs	r2, #202	@ 0xca
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2253      	movs	r2, #83	@ 0x53
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f98f 	bl	8002ed8 <RTC_EnterInitMode>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d120      	bne.n	8002c06 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002bce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002be2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f9a2 	bl	8002f46 <RTC_ExitInitMode>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	22ff      	movs	r2, #255	@ 0xff
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]

  return status;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}

08002c2a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002c5c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002c60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	0d9b      	lsrs	r3, r3, #22
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f98e 	bl	8002fcc <RTC_Bcd2ToByte>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f985 	bl	8002fcc <RTC_Bcd2ToByte>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	789b      	ldrb	r3, [r3, #2]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f97c 	bl	8002fcc <RTC_Bcd2ToByte>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	7f1b      	ldrb	r3, [r3, #28]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_RTC_SetDate+0x1c>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e071      	b.n	8002de6 <HAL_RTC_SetDate+0x100>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10e      	bne.n	8002d32 <HAL_RTC_SetDate+0x4c>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	f023 0310 	bic.w	r3, r3, #16
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	330a      	adds	r3, #10
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11c      	bne.n	8002d72 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f927 	bl	8002f90 <RTC_ByteToBcd2>
 8002d42:	4603      	mov	r3, r0
 8002d44:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	785b      	ldrb	r3, [r3, #1]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f920 	bl	8002f90 <RTC_ByteToBcd2>
 8002d50:	4603      	mov	r3, r0
 8002d52:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d54:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	789b      	ldrb	r3, [r3, #2]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f918 	bl	8002f90 <RTC_ByteToBcd2>
 8002d60:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d62:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e00e      	b.n	8002d90 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	78db      	ldrb	r3, [r3, #3]
 8002d76:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d7e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002d84:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	22ca      	movs	r2, #202	@ 0xca
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2253      	movs	r2, #83	@ 0x53
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f899 	bl	8002ed8 <RTC_EnterInitMode>
 8002da6:	4603      	mov	r3, r0
 8002da8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10c      	bne.n	8002dca <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002dbe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f8c0 	bl	8002f46 <RTC_ExitInitMode>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	22ff      	movs	r2, #255	@ 0xff
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]

  return status;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}

08002dee <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	0b5b      	lsrs	r3, r3, #13
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11a      	bne.n	8002e82 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	78db      	ldrb	r3, [r3, #3]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f8bb 	bl	8002fcc <RTC_Bcd2ToByte>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f8b2 	bl	8002fcc <RTC_Bcd2ToByte>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f8a9 	bl	8002fcc <RTC_Bcd2ToByte>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <HAL_RTC_WaitForSynchro+0x48>)
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea0:	f7fe fd04 	bl	80018ac <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ea6:	e009      	b.n	8002ebc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ea8:	f7fe fd00 	bl	80018ac <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eb6:	d901      	bls.n	8002ebc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e007      	b.n	8002ecc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ee      	beq.n	8002ea8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	00013f5f 	.word	0x00013f5f

08002ed8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d122      	bne.n	8002f3c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f04:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f06:	f7fe fcd1 	bl	80018ac <HAL_GetTick>
 8002f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f0c:	e00c      	b.n	8002f28 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f0e:	f7fe fccd 	bl	80018ac <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f1c:	d904      	bls.n	8002f28 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2204      	movs	r2, #4
 8002f22:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <RTC_EnterInitMode+0x64>
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d1e8      	bne.n	8002f0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff8b 	bl	8002e8c <HAL_RTC_WaitForSynchro>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002f9e:	e005      	b.n	8002fac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	3b0a      	subs	r3, #10
 8002faa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b09      	cmp	r3, #9
 8002fb0:	d8f6      	bhi.n	8002fa0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b2db      	uxtb	r3, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e041      	b.n	800309e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fe9e 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 fc3c 	bl	80038c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d001      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e044      	b.n	800314a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003158 <HAL_TIM_Base_Start_IT+0xb0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ea:	d013      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1a      	ldr	r2, [pc, #104]	@ (800315c <HAL_TIM_Base_Start_IT+0xb4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_TIM_Base_Start_IT+0xb8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <HAL_TIM_Base_Start_IT+0xbc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a16      	ldr	r2, [pc, #88]	@ (8003168 <HAL_TIM_Base_Start_IT+0xc0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d111      	bne.n	8003138 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d010      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	e007      	b.n	8003148 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40010000 	.word	0x40010000
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000

0800316c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e041      	b.n	8003202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f839 	bl	800320a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 fb8a 	bl	80038c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_TIM_PWM_Start+0x24>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e022      	b.n	800328a <HAL_TIM_PWM_Start+0x6a>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b04      	cmp	r3, #4
 8003248:	d109      	bne.n	800325e <HAL_TIM_PWM_Start+0x3e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e015      	b.n	800328a <HAL_TIM_PWM_Start+0x6a>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d109      	bne.n	8003278 <HAL_TIM_PWM_Start+0x58>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e008      	b.n	800328a <HAL_TIM_PWM_Start+0x6a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e068      	b.n	8003364 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0x82>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a0:	e013      	b.n	80032ca <HAL_TIM_PWM_Start+0xaa>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x92>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b0:	e00b      	b.n	80032ca <HAL_TIM_PWM_Start+0xaa>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xa2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c0:	e003      	b.n	80032ca <HAL_TIM_PWM_Start+0xaa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	6839      	ldr	r1, [r7, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fda8 	bl	8003e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a23      	ldr	r2, [pc, #140]	@ (800336c <HAL_TIM_PWM_Start+0x14c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <HAL_TIM_PWM_Start+0x14c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_TIM_PWM_Start+0x10e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003304:	d013      	beq.n	800332e <HAL_TIM_PWM_Start+0x10e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a19      	ldr	r2, [pc, #100]	@ (8003370 <HAL_TIM_PWM_Start+0x150>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_TIM_PWM_Start+0x10e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <HAL_TIM_PWM_Start+0x154>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_TIM_PWM_Start+0x10e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_TIM_PWM_Start+0x158>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_TIM_PWM_Start+0x10e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <HAL_TIM_PWM_Start+0x15c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d111      	bne.n	8003352 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d010      	beq.n	8003362 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003350:	e007      	b.n	8003362 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40014000 	.word	0x40014000

08003380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0202 	mvn.w	r2, #2
 80033b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa5b 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa4d 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fa5e 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0204 	mvn.w	r2, #4
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa35 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa27 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa38 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0208 	mvn.w	r2, #8
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2204      	movs	r2, #4
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa0f 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa01 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fa12 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0210 	mvn.w	r2, #16
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2208      	movs	r2, #8
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9e9 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9db 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f9ec 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0201 	mvn.w	r2, #1
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fb42 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fd2a 	bl	8003f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9bd 	bl	80038ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0220 	mvn.w	r2, #32
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fcfc 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800357a:	2302      	movs	r3, #2
 800357c:	e0ae      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	f200 809f 	bhi.w	80036cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800358e:	a201      	add	r2, pc, #4	@ (adr r2, 8003594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080036cd 	.word	0x080036cd
 800359c:	080036cd 	.word	0x080036cd
 80035a0:	080036cd 	.word	0x080036cd
 80035a4:	08003609 	.word	0x08003609
 80035a8:	080036cd 	.word	0x080036cd
 80035ac:	080036cd 	.word	0x080036cd
 80035b0:	080036cd 	.word	0x080036cd
 80035b4:	0800364b 	.word	0x0800364b
 80035b8:	080036cd 	.word	0x080036cd
 80035bc:	080036cd 	.word	0x080036cd
 80035c0:	080036cd 	.word	0x080036cd
 80035c4:	0800368b 	.word	0x0800368b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fa04 	bl	80039dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6999      	ldr	r1, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	619a      	str	r2, [r3, #24]
      break;
 8003606:	e064      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa4a 	bl	8003aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6999      	ldr	r1, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	619a      	str	r2, [r3, #24]
      break;
 8003648:	e043      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fa95 	bl	8003b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0208 	orr.w	r2, r2, #8
 8003664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0204 	bic.w	r2, r2, #4
 8003674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	61da      	str	r2, [r3, #28]
      break;
 8003688:	e023      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fadf 	bl	8003c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	61da      	str	r2, [r3, #28]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0b4      	b.n	800386a <HAL_TIM_ConfigClockSource+0x186>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003738:	d03e      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xd4>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373e:	f200 8087 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003746:	f000 8086 	beq.w	8003856 <HAL_TIM_ConfigClockSource+0x172>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374e:	d87f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b70      	cmp	r3, #112	@ 0x70
 8003752:	d01a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xa6>
 8003754:	2b70      	cmp	r3, #112	@ 0x70
 8003756:	d87b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b60      	cmp	r3, #96	@ 0x60
 800375a:	d050      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x11a>
 800375c:	2b60      	cmp	r3, #96	@ 0x60
 800375e:	d877      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b50      	cmp	r3, #80	@ 0x50
 8003762:	d03c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xfa>
 8003764:	2b50      	cmp	r3, #80	@ 0x50
 8003766:	d873      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b40      	cmp	r3, #64	@ 0x40
 800376a:	d058      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x13a>
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d86f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b30      	cmp	r3, #48	@ 0x30
 8003772:	d064      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	2b30      	cmp	r3, #48	@ 0x30
 8003776:	d86b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d060      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d867      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d05a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	e062      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800379a:	f000 fb25 	bl	8003de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04f      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037c8:	f000 fb0e 	bl	8003de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e03c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fa82 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	@ 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fadb 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e02c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380a:	461a      	mov	r2, r3
 800380c:	f000 faa1 	bl	8003d52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	@ 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 facb 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 800381c:	e01c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	461a      	mov	r2, r3
 800382c:	f000 fa62 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	@ 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fabb 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 800383c:	e00c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 fab2 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 800384e:	e003      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e000      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3a      	ldr	r2, [pc, #232]	@ (80039c0 <TIM_Base_SetConfig+0xfc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00f      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a37      	ldr	r2, [pc, #220]	@ (80039c4 <TIM_Base_SetConfig+0x100>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a36      	ldr	r2, [pc, #216]	@ (80039c8 <TIM_Base_SetConfig+0x104>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a35      	ldr	r2, [pc, #212]	@ (80039cc <TIM_Base_SetConfig+0x108>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	@ (80039c0 <TIM_Base_SetConfig+0xfc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01b      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d017      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a28      	ldr	r2, [pc, #160]	@ (80039c4 <TIM_Base_SetConfig+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a27      	ldr	r2, [pc, #156]	@ (80039c8 <TIM_Base_SetConfig+0x104>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <TIM_Base_SetConfig+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a25      	ldr	r2, [pc, #148]	@ (80039d0 <TIM_Base_SetConfig+0x10c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a24      	ldr	r2, [pc, #144]	@ (80039d4 <TIM_Base_SetConfig+0x110>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a23      	ldr	r2, [pc, #140]	@ (80039d8 <TIM_Base_SetConfig+0x114>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <TIM_Base_SetConfig+0xfc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f023 0201 	bic.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]
  }
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800

080039dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 0201 	bic.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 0302 	bic.w	r3, r3, #2
 8003a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <TIM_OC1_SetConfig+0xc8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10c      	bne.n	8003a52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0308 	bic.w	r3, r3, #8
 8003a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <TIM_OC1_SetConfig+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d111      	bne.n	8003a7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40010000 	.word	0x40010000

08003aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f023 0210 	bic.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0320 	bic.w	r3, r3, #32
 8003af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a1e      	ldr	r2, [pc, #120]	@ (8003b7c <TIM_OC2_SetConfig+0xd4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10d      	bne.n	8003b24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a15      	ldr	r2, [pc, #84]	@ (8003b7c <TIM_OC2_SetConfig+0xd4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d113      	bne.n	8003b54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000

08003b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <TIM_OC3_SetConfig+0xd0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10d      	bne.n	8003bfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <TIM_OC3_SetConfig+0xd0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40010000 	.word	0x40010000

08003c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <TIM_OC4_SetConfig+0x9c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d109      	bne.n	8003cc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000

08003cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 030a 	bic.w	r3, r3, #10
 8003d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 0210 	bic.w	r2, r3, #16
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 0307 	orr.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e050      	b.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d018      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a18      	ldr	r2, [pc, #96]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a13      	ldr	r2, [pc, #76]	@ (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10c      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e042      	b.n	8004010 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc ff3e 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	@ 0x24
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fdf3 	bl	8004ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	@ 0x28
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	4613      	mov	r3, r2
 8004026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b20      	cmp	r3, #32
 8004036:	d175      	bne.n	8004124 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_UART_Transmit+0x2c>
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e06e      	b.n	8004126 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2221      	movs	r2, #33	@ 0x21
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004056:	f7fd fc29 	bl	80018ac <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004070:	d108      	bne.n	8004084 <HAL_UART_Transmit+0x6c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	e003      	b.n	800408c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800408c:	e02e      	b.n	80040ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	2180      	movs	r1, #128	@ 0x80
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fb55 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03a      	b.n	8004126 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	3302      	adds	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e007      	b.n	80040de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3301      	adds	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1cb      	bne.n	800408e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2140      	movs	r1, #64	@ 0x40
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fb21 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	4613      	mov	r3, r2
 800413a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b20      	cmp	r3, #32
 8004146:	d121      	bne.n	800418c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Transmit_IT+0x26>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e01a      	b.n	800418e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	88fa      	ldrh	r2, [r7, #6]
 8004162:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2221      	movs	r2, #33	@ 0x21
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004186:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d112      	bne.n	80041da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Receive_IT+0x26>
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e00b      	b.n	80041dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fb12 	bl	80047fa <UART_Start_Receive_IT>
 80041d6:	4603      	mov	r3, r0
 80041d8:	e000      	b.n	80041dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0ba      	sub	sp, #232	@ 0xe8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004210:	2300      	movs	r3, #0
 8004212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_UART_IRQHandler+0x66>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fbf2 	bl	8004a2c <UART_Receive_IT>
      return;
 8004248:	e25b      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800424a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80de 	beq.w	8004410 <HAL_UART_IRQHandler+0x22c>
 8004254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004264:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80d1 	beq.w	8004410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_UART_IRQHandler+0xae>
 800427a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_UART_IRQHandler+0xd2>
 800429e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	f043 0202 	orr.w	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_UART_IRQHandler+0xf6>
 80042c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	f043 0204 	orr.w	r2, r3, #4
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d011      	beq.n	800430a <HAL_UART_IRQHandler+0x126>
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f043 0208 	orr.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 81f2 	beq.w	80046f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_UART_IRQHandler+0x14e>
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb7d 	bl	8004a2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_UART_IRQHandler+0x17a>
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04f      	beq.n	80043fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa85 	bl	800486e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436e:	2b40      	cmp	r3, #64	@ 0x40
 8004370:	d141      	bne.n	80043f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800438c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800439e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d9      	bne.n	8004372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d013      	beq.n	80043ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ca:	4a7e      	ldr	r2, [pc, #504]	@ (80045c4 <HAL_UART_IRQHandler+0x3e0>)
 80043cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fbec 	bl	8001bb0 <HAL_DMA_Abort_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043e8:	4610      	mov	r0, r2
 80043ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	e00e      	b.n	800440c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f994 	bl	800471c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	e00a      	b.n	800440c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f990 	bl	800471c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	e006      	b.n	800440c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f98c 	bl	800471c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800440a:	e175      	b.n	80046f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	bf00      	nop
    return;
 800440e:	e173      	b.n	80046f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	2b01      	cmp	r3, #1
 8004416:	f040 814f 	bne.w	80046b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8148 	beq.w	80046b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8141 	beq.w	80046b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	f040 80b6 	bne.w	80045c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8145 	beq.w	80046fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800447a:	429a      	cmp	r2, r3
 800447c:	f080 813e 	bcs.w	80046fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004486:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004492:	f000 8088 	beq.w	80045a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1d9      	bne.n	8004496 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004506:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800450a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800450e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e1      	bne.n	80044e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800452e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e3      	bne.n	800451e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004588:	65ba      	str	r2, [r7, #88]	@ 0x58
 800458a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800458e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e3      	bne.n	8004564 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fa95 	bl	8001ad0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8b7 	bl	8004730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045c2:	e09b      	b.n	80046fc <HAL_UART_IRQHandler+0x518>
 80045c4:	08004935 	.word	0x08004935
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 808e 	beq.w	8004700 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8089 	beq.w	8004700 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004612:	647a      	str	r2, [r7, #68]	@ 0x44
 8004614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e3      	bne.n	80045ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	623b      	str	r3, [r7, #32]
   return(result);
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800464a:	633a      	str	r2, [r7, #48]	@ 0x30
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	60fb      	str	r3, [r7, #12]
   return(result);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0310 	bic.w	r3, r3, #16
 8004682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004690:	61fa      	str	r2, [r7, #28]
 8004692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	617b      	str	r3, [r7, #20]
   return(result);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f83d 	bl	8004730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b6:	e023      	b.n	8004700 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <HAL_UART_IRQHandler+0x4f4>
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f943 	bl	800495c <UART_Transmit_IT>
    return;
 80046d6:	e014      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <HAL_UART_IRQHandler+0x51e>
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f983 	bl	80049fc <UART_EndTransmit_IT>
    return;
 80046f6:	e004      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
    return;
 80046f8:	bf00      	nop
 80046fa:	e002      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
      return;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
      return;
 8004700:	bf00      	nop
  }
}
 8004702:	37e8      	adds	r7, #232	@ 0xe8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004758:	e03b      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004760:	d037      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004762:	f7fd f8a3 	bl	80018ac <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	429a      	cmp	r2, r3
 8004770:	d302      	bcc.n	8004778 <UART_WaitOnFlagUntilTimeout+0x30>
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e03a      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d023      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b80      	cmp	r3, #128	@ 0x80
 800478e:	d020      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b40      	cmp	r3, #64	@ 0x40
 8004794:	d01d      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d116      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f857 	bl	800486e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2208      	movs	r2, #8
 80047c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d0b4      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	4613      	mov	r3, r2
 8004806:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2222      	movs	r2, #34	@ 0x22
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800483e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0220 	orr.w	r2, r2, #32
 800485e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800486e:	b480      	push	{r7}
 8004870:	b095      	sub	sp, #84	@ 0x54
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800488c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004896:	643a      	str	r2, [r7, #64]	@ 0x40
 8004898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800489c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d119      	bne.n	800491a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f023 0310 	bic.w	r3, r3, #16
 80048fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004906:	61ba      	str	r2, [r7, #24]
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	613b      	str	r3, [r7, #16]
   return(result);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004928:	bf00      	nop
 800492a:	3754      	adds	r7, #84	@ 0x54
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff fee4 	bl	800471c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b21      	cmp	r3, #33	@ 0x21
 800496e:	d13e      	bne.n	80049ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004978:	d114      	bne.n	80049a4 <UART_Transmit_IT+0x48>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d110      	bne.n	80049a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004996:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	1c9a      	adds	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]
 80049a2:	e008      	b.n	80049b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6211      	str	r1, [r2, #32]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fe73 	bl	8004708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	@ 0x30
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b22      	cmp	r3, #34	@ 0x22
 8004a3e:	f040 80ae 	bne.w	8004b9e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a4a:	d117      	bne.n	8004a7c <UART_Receive_IT+0x50>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d113      	bne.n	8004a7c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a7a:	e026      	b.n	8004aca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8e:	d007      	beq.n	8004aa0 <UART_Receive_IT+0x74>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <UART_Receive_IT+0x82>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e008      	b.n	8004ac0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d15d      	bne.n	8004b9a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0220 	bic.w	r2, r2, #32
 8004aec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004afc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d135      	bne.n	8004b90 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f023 0310 	bic.w	r3, r3, #16
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4a:	623a      	str	r2, [r7, #32]
 8004b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	69f9      	ldr	r1, [r7, #28]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d10a      	bne.n	8004b82 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fdd1 	bl	8004730 <HAL_UARTEx_RxEventCallback>
 8004b8e:	e002      	b.n	8004b96 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fb ff63 	bl	8000a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e002      	b.n	8004ba0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3730      	adds	r7, #48	@ 0x30
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bac:	b0c0      	sub	sp, #256	@ 0x100
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	68d9      	ldr	r1, [r3, #12]
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	ea40 0301 	orr.w	r3, r0, r1
 8004bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c00:	f021 010c 	bic.w	r1, r1, #12
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c22:	6999      	ldr	r1, [r3, #24]
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	ea40 0301 	orr.w	r3, r0, r1
 8004c2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b8f      	ldr	r3, [pc, #572]	@ (8004e74 <UART_SetConfig+0x2cc>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d005      	beq.n	8004c48 <UART_SetConfig+0xa0>
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b8d      	ldr	r3, [pc, #564]	@ (8004e78 <UART_SetConfig+0x2d0>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d104      	bne.n	8004c52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7fd fd9c 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8004c4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c50:	e003      	b.n	8004c5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c52:	f7fd fd83 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8004c56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c64:	f040 810c 	bne.w	8004e80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	1891      	adds	r1, r2, r2
 8004c80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c82:	415b      	adcs	r3, r3
 8004c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	eb12 0801 	adds.w	r8, r2, r1
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb43 0901 	adc.w	r9, r3, r1
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004caa:	4690      	mov	r8, r2
 8004cac:	4699      	mov	r9, r3
 8004cae:	4623      	mov	r3, r4
 8004cb0:	eb18 0303 	adds.w	r3, r8, r3
 8004cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cb8:	462b      	mov	r3, r5
 8004cba:	eb49 0303 	adc.w	r3, r9, r3
 8004cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	18db      	adds	r3, r3, r3
 8004cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cdc:	4613      	mov	r3, r2
 8004cde:	eb42 0303 	adc.w	r3, r2, r3
 8004ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cec:	f7fb fae0 	bl	80002b0 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4b61      	ldr	r3, [pc, #388]	@ (8004e7c <UART_SetConfig+0x2d4>)
 8004cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	011c      	lsls	r4, r3, #4
 8004cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	1891      	adds	r1, r2, r2
 8004d16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d18:	415b      	adcs	r3, r3
 8004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d20:	4641      	mov	r1, r8
 8004d22:	eb12 0a01 	adds.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb43 0b01 	adc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d40:	4692      	mov	sl, r2
 8004d42:	469b      	mov	fp, r3
 8004d44:	4643      	mov	r3, r8
 8004d46:	eb1a 0303 	adds.w	r3, sl, r3
 8004d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	eb4b 0303 	adc.w	r3, fp, r3
 8004d54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	18db      	adds	r3, r3, r3
 8004d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d72:	4613      	mov	r3, r2
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d82:	f7fb fa95 	bl	80002b0 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e7c <UART_SetConfig+0x2d4>)
 8004d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2264      	movs	r2, #100	@ 0x64
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	1acb      	subs	r3, r1, r3
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004da2:	4b36      	ldr	r3, [pc, #216]	@ (8004e7c <UART_SetConfig+0x2d4>)
 8004da4:	fba3 2302 	umull	r2, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004db0:	441c      	add	r4, r3
 8004db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	1891      	adds	r1, r2, r2
 8004dca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dcc:	415b      	adcs	r3, r3
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	1851      	adds	r1, r2, r1
 8004dd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dda:	4649      	mov	r1, r9
 8004ddc:	414b      	adcs	r3, r1
 8004dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dec:	4659      	mov	r1, fp
 8004dee:	00cb      	lsls	r3, r1, #3
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004df6:	4651      	mov	r1, sl
 8004df8:	00ca      	lsls	r2, r1, #3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4642      	mov	r2, r8
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e08:	464b      	mov	r3, r9
 8004e0a:	460a      	mov	r2, r1
 8004e0c:	eb42 0303 	adc.w	r3, r2, r3
 8004e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e28:	460b      	mov	r3, r1
 8004e2a:	18db      	adds	r3, r3, r3
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e2e:	4613      	mov	r3, r2
 8004e30:	eb42 0303 	adc.w	r3, r2, r3
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e3e:	f7fb fa37 	bl	80002b0 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <UART_SetConfig+0x2d4>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	@ 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	3332      	adds	r3, #50	@ 0x32
 8004e5a:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <UART_SetConfig+0x2d4>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 0207 	and.w	r2, r3, #7
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4422      	add	r2, r4
 8004e6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e70:	e106      	b.n	8005080 <UART_SetConfig+0x4d8>
 8004e72:	bf00      	nop
 8004e74:	40011000 	.word	0x40011000
 8004e78:	40011400 	.word	0x40011400
 8004e7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e92:	4642      	mov	r2, r8
 8004e94:	464b      	mov	r3, r9
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	6239      	str	r1, [r7, #32]
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	1854      	adds	r4, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb43 0501 	adc.w	r5, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	00eb      	lsls	r3, r5, #3
 8004eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eba:	00e2      	lsls	r2, r4, #3
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	461d      	mov	r5, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	18e3      	adds	r3, r4, r3
 8004ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ec8:	464b      	mov	r3, r9
 8004eca:	eb45 0303 	adc.w	r3, r5, r3
 8004ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ede:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eee:	4629      	mov	r1, r5
 8004ef0:	008b      	lsls	r3, r1, #2
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef8:	4621      	mov	r1, r4
 8004efa:	008a      	lsls	r2, r1, #2
 8004efc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f00:	f7fb f9d6 	bl	80002b0 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4b60      	ldr	r3, [pc, #384]	@ (800508c <UART_SetConfig+0x4e4>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	011c      	lsls	r4, r3, #4
 8004f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	61b9      	str	r1, [r7, #24]
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f34:	4641      	mov	r1, r8
 8004f36:	1851      	adds	r1, r2, r1
 8004f38:	6139      	str	r1, [r7, #16]
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	414b      	adcs	r3, r1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	00cb      	lsls	r3, r1, #3
 8004f50:	4651      	mov	r1, sl
 8004f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f56:	4651      	mov	r1, sl
 8004f58:	00ca      	lsls	r2, r1, #3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4642      	mov	r2, r8
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f68:	464b      	mov	r3, r9
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	008b      	lsls	r3, r1, #2
 8004f90:	4641      	mov	r1, r8
 8004f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f96:	4641      	mov	r1, r8
 8004f98:	008a      	lsls	r2, r1, #2
 8004f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f9e:	f7fb f987 	bl	80002b0 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4b38      	ldr	r3, [pc, #224]	@ (800508c <UART_SetConfig+0x4e4>)
 8004faa:	fba3 2301 	umull	r2, r3, r3, r1
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2264      	movs	r2, #100	@ 0x64
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	1acb      	subs	r3, r1, r3
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	3332      	adds	r3, #50	@ 0x32
 8004fbc:	4a33      	ldr	r2, [pc, #204]	@ (800508c <UART_SetConfig+0x4e4>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fc8:	441c      	add	r4, r3
 8004fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fce:	2200      	movs	r2, #0
 8004fd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	1891      	adds	r1, r2, r2
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	415b      	adcs	r3, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fe8:	4641      	mov	r1, r8
 8004fea:	1851      	adds	r1, r2, r1
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	4649      	mov	r1, r9
 8004ff0:	414b      	adcs	r3, r1
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005000:	4659      	mov	r1, fp
 8005002:	00cb      	lsls	r3, r1, #3
 8005004:	4651      	mov	r1, sl
 8005006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500a:	4651      	mov	r1, sl
 800500c:	00ca      	lsls	r2, r1, #3
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	4603      	mov	r3, r0
 8005014:	4642      	mov	r2, r8
 8005016:	189b      	adds	r3, r3, r2
 8005018:	66bb      	str	r3, [r7, #104]	@ 0x68
 800501a:	464b      	mov	r3, r9
 800501c:	460a      	mov	r2, r1
 800501e:	eb42 0303 	adc.w	r3, r2, r3
 8005022:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	663b      	str	r3, [r7, #96]	@ 0x60
 800502e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800503c:	4649      	mov	r1, r9
 800503e:	008b      	lsls	r3, r1, #2
 8005040:	4641      	mov	r1, r8
 8005042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005046:	4641      	mov	r1, r8
 8005048:	008a      	lsls	r2, r1, #2
 800504a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800504e:	f7fb f92f 	bl	80002b0 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <UART_SetConfig+0x4e4>)
 8005058:	fba3 1302 	umull	r1, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2164      	movs	r1, #100	@ 0x64
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	3332      	adds	r3, #50	@ 0x32
 800506a:	4a08      	ldr	r2, [pc, #32]	@ (800508c <UART_SetConfig+0x4e4>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4422      	add	r2, r4
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005086:	46bd      	mov	sp, r7
 8005088:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508c:	51eb851f 	.word	0x51eb851f

08005090 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f103 0208 	add.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005148:	d103      	bne.n	8005152 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e00c      	b.n	800516c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3308      	adds	r3, #8
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e002      	b.n	8005160 <vListInsert+0x2e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d2f6      	bcs.n	800515a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d103      	bne.n	80051d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005202:	2301      	movs	r3, #1
 8005204:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <xQueueGenericReset+0x30>
        __asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60fb      	str	r3, [r7, #12]
    }
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d05d      	beq.n	80052ea <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	d059      	beq.n	80052ea <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523e:	2100      	movs	r1, #0
 8005240:	fba3 2302 	umull	r2, r3, r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d000      	beq.n	800524a <xQueueGenericReset+0x52>
 8005248:	2101      	movs	r1, #1
 800524a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800524c:	2b00      	cmp	r3, #0
 800524e:	d14c      	bne.n	80052ea <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8005250:	f002 fd44 	bl	8007cdc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525c:	6939      	ldr	r1, [r7, #16]
 800525e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	441a      	add	r2, r3
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2200      	movs	r2, #0
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005280:	3b01      	subs	r3, #1
 8005282:	6939      	ldr	r1, [r7, #16]
 8005284:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	441a      	add	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	22ff      	movs	r2, #255	@ 0xff
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	22ff      	movs	r2, #255	@ 0xff
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d114      	bne.n	80052d0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01a      	beq.n	80052e4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3310      	adds	r3, #16
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 fa76 	bl	80067a4 <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <xQueueGenericReset+0x120>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	e009      	b.n	80052e4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3310      	adds	r3, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fedb 	bl	8005090 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	3324      	adds	r3, #36	@ 0x24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fed6 	bl	8005090 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80052e4:	f002 fd2c 	bl	8007d40 <vPortExitCritical>
 80052e8:	e001      	b.n	80052ee <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <xQueueGenericReset+0x114>
        __asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60bb      	str	r3, [r7, #8]
    }
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800530c:	697b      	ldr	r3, [r7, #20]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	@ 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02e      	beq.n	8005392 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005334:	2100      	movs	r1, #0
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	fba3 2302 	umull	r2, r3, r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d000      	beq.n	8005344 <xQueueGenericCreate+0x28>
 8005342:	2101      	movs	r1, #1
 8005344:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005346:	2b00      	cmp	r3, #0
 8005348:	d123      	bne.n	8005392 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005352:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005356:	d81c      	bhi.n	8005392 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	fb02 f303 	mul.w	r3, r2, r3
 8005360:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	3350      	adds	r3, #80	@ 0x50
 8005366:	4618      	mov	r0, r3
 8005368:	f002 fde2 	bl	8007f30 <pvPortMalloc>
 800536c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01d      	beq.n	80053b0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3350      	adds	r3, #80	@ 0x50
 800537c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800537e:	79fa      	ldrb	r2, [r7, #7]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f815 	bl	80053ba <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005390:	e00e      	b.n	80053b0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <xQueueGenericCreate+0x94>
        __asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	613b      	str	r3, [r7, #16]
    }
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80053b0:	69fb      	ldr	r3, [r7, #28]
    }
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e002      	b.n	80053dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053e8:	2101      	movs	r1, #1
 80053ea:	69b8      	ldr	r0, [r7, #24]
 80053ec:	f7ff ff04 	bl	80051f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08e      	sub	sp, #56	@ 0x38
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800540e:	2300      	movs	r3, #0
 8005410:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xQueueGenericSend+0x34>
        __asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <xQueueGenericSend+0x42>
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <xQueueGenericSend+0x46>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <xQueueGenericSend+0x48>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <xQueueGenericSend+0x64>
        __asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d103      	bne.n	8005472 <xQueueGenericSend+0x72>
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <xQueueGenericSend+0x76>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericSend+0x78>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <xQueueGenericSend+0x94>
        __asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	623b      	str	r3, [r7, #32]
    }
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005494:	f001 fb9a 	bl	8006bcc <xTaskGetSchedulerState>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <xQueueGenericSend+0xa4>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <xQueueGenericSend+0xa8>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <xQueueGenericSend+0xaa>
 80054a8:	2300      	movs	r3, #0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <xQueueGenericSend+0xc6>
        __asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	61fb      	str	r3, [r7, #28]
    }
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80054c6:	f002 fc09 	bl	8007cdc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <xQueueGenericSend+0xdc>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d129      	bne.n	8005530 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054e2:	f000 fae0 	bl	8005aa6 <prvCopyDataToQueue>
 80054e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	3324      	adds	r3, #36	@ 0x24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f955 	bl	80067a4 <xTaskRemoveFromEventList>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005500:	4b3f      	ldr	r3, [pc, #252]	@ (8005600 <xQueueGenericSend+0x200>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	e00a      	b.n	8005528 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005518:	4b39      	ldr	r3, [pc, #228]	@ (8005600 <xQueueGenericSend+0x200>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005528:	f002 fc0a 	bl	8007d40 <vPortExitCritical>
                return pdPASS;
 800552c:	2301      	movs	r3, #1
 800552e:	e063      	b.n	80055f8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005536:	f002 fc03 	bl	8007d40 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800553a:	2300      	movs	r3, #0
 800553c:	e05c      	b.n	80055f8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800553e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005544:	f107 0314 	add.w	r3, r7, #20
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fa03 	bl	8006954 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800554e:	2301      	movs	r3, #1
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005552:	f002 fbf5 	bl	8007d40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005556:	f000 fe1f 	bl	8006198 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800555a:	f002 fbbf 	bl	8007cdc <vPortEnterCritical>
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005564:	b25b      	sxtb	r3, r3
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800556a:	d103      	bne.n	8005574 <xQueueGenericSend+0x174>
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800557a:	b25b      	sxtb	r3, r3
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005580:	d103      	bne.n	800558a <xQueueGenericSend+0x18a>
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800558a:	f002 fbd9 	bl	8007d40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800558e:	1d3a      	adds	r2, r7, #4
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f001 f9f2 	bl	8006980 <xTaskCheckForTimeOut>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d124      	bne.n	80055ec <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a4:	f000 fb77 	bl	8005c96 <prvIsQueueFull>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	3310      	adds	r3, #16
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f888 	bl	80066cc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80055bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055be:	f000 fb02 	bl	8005bc6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80055c2:	f000 fdf7 	bl	80061b4 <xTaskResumeAll>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f47f af7c 	bne.w	80054c6 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80055ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <xQueueGenericSend+0x200>)
 80055d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	e772      	b.n	80054c6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80055e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055e2:	f000 faf0 	bl	8005bc6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80055e6:	f000 fde5 	bl	80061b4 <xTaskResumeAll>
 80055ea:	e76c      	b.n	80054c6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80055ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ee:	f000 faea 	bl	8005bc6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80055f2:	f000 fddf 	bl	80061b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80055f6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3738      	adds	r7, #56	@ 0x38
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b092      	sub	sp, #72	@ 0x48
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8005616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <xQueueGenericSendFromISR+0x3e>
 800563a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <xQueueGenericSendFromISR+0x42>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <xQueueGenericSendFromISR+0x44>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d103      	bne.n	8005672 <xQueueGenericSendFromISR+0x6e>
 800566a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <xQueueGenericSendFromISR+0x72>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <xQueueGenericSendFromISR+0x74>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005694:	f002 fc0a 	bl	8007eac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005698:	f3ef 8211 	mrs	r2, BASEPRI
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	623a      	str	r2, [r7, #32]
 80056ae:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d302      	bcc.n	80056c6 <xQueueGenericSendFromISR+0xc2>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d147      	bne.n	8005756 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80056c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056cc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80056dc:	f000 f9e3 	bl	8005aa6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80056e0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e8:	d112      	bne.n	8005710 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02e      	beq.n	8005750 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f4:	3324      	adds	r3, #36	@ 0x24
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 f854 	bl	80067a4 <xTaskRemoveFromEventList>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d026      	beq.n	8005750 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d023      	beq.n	8005750 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e01f      	b.n	8005750 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005710:	f000 fe5c 	bl	80063cc <uxTaskGetNumberOfTasks>
 8005714:	6338      	str	r0, [r7, #48]	@ 0x30
 8005716:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800571a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571c:	429a      	cmp	r2, r3
 800571e:	d917      	bls.n	8005750 <xQueueGenericSendFromISR+0x14c>
 8005720:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005724:	2b7f      	cmp	r3, #127	@ 0x7f
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61bb      	str	r3, [r7, #24]
    }
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSendFromISR+0x138>
 8005740:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005744:	3301      	adds	r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	b25a      	sxtb	r2, r3
 800574a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005750:	2301      	movs	r3, #1
 8005752:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8005754:	e001      	b.n	800575a <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005756:	2300      	movs	r3, #0
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005764:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005768:	4618      	mov	r0, r3
 800576a:	3748      	adds	r7, #72	@ 0x48
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08c      	sub	sp, #48	@ 0x30
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <xQueueReceive+0x32>
        __asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	623b      	str	r3, [r7, #32]
    }
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	e7fd      	b.n	800579e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <xQueueReceive+0x40>
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xQueueReceive+0x44>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xQueueReceive+0x46>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <xQueueReceive+0x62>
        __asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
    }
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057d2:	f001 f9fb 	bl	8006bcc <xTaskGetSchedulerState>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <xQueueReceive+0x72>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xQueueReceive+0x76>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueReceive+0x78>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <xQueueReceive+0x94>
        __asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	61bb      	str	r3, [r7, #24]
    }
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005804:	f002 fa6a 	bl	8007cdc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01f      	beq.n	8005854 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005818:	f000 f9af 	bl	8005b7a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00f      	beq.n	800584c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582e:	3310      	adds	r3, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f000 ffb7 	bl	80067a4 <xTaskRemoveFromEventList>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800583c:	4b3c      	ldr	r3, [pc, #240]	@ (8005930 <xQueueReceive+0x1c0>)
 800583e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800584c:	f002 fa78 	bl	8007d40 <vPortExitCritical>
                return pdPASS;
 8005850:	2301      	movs	r3, #1
 8005852:	e069      	b.n	8005928 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800585a:	f002 fa71 	bl	8007d40 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800585e:	2300      	movs	r3, #0
 8005860:	e062      	b.n	8005928 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	4618      	mov	r0, r3
 800586e:	f001 f871 	bl	8006954 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005872:	2301      	movs	r3, #1
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005876:	f002 fa63 	bl	8007d40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800587a:	f000 fc8d 	bl	8006198 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800587e:	f002 fa2d 	bl	8007cdc <vPortEnterCritical>
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005888:	b25b      	sxtb	r3, r3
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800588e:	d103      	bne.n	8005898 <xQueueReceive+0x128>
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800589e:	b25b      	sxtb	r3, r3
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058a4:	d103      	bne.n	80058ae <xQueueReceive+0x13e>
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058ae:	f002 fa47 	bl	8007d40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058b2:	1d3a      	adds	r2, r7, #4
 80058b4:	f107 0310 	add.w	r3, r7, #16
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 f860 	bl	8006980 <xTaskCheckForTimeOut>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d123      	bne.n	800590e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c8:	f000 f9cf 	bl	8005c6a <prvIsQueueEmpty>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	3324      	adds	r3, #36	@ 0x24
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fef6 	bl	80066cc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80058e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e2:	f000 f970 	bl	8005bc6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80058e6:	f000 fc65 	bl	80061b4 <xTaskResumeAll>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d189      	bne.n	8005804 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80058f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005930 <xQueueReceive+0x1c0>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	e780      	b.n	8005804 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005904:	f000 f95f 	bl	8005bc6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005908:	f000 fc54 	bl	80061b4 <xTaskResumeAll>
 800590c:	e77a      	b.n	8005804 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800590e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005910:	f000 f959 	bl	8005bc6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005914:	f000 fc4e 	bl	80061b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800591a:	f000 f9a6 	bl	8005c6a <prvIsQueueEmpty>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	f43f af6f 	beq.w	8005804 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005926:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005928:	4618      	mov	r0, r3
 800592a:	3730      	adds	r7, #48	@ 0x30
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b090      	sub	sp, #64	@ 0x40
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <xQueueReceiveFromISR+0x3c>
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <xQueueReceiveFromISR+0x40>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <xQueueReceiveFromISR+0x42>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	623b      	str	r3, [r7, #32]
    }
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005992:	f002 fa8b 	bl	8007eac <vPortValidateInterruptPriority>
        __asm volatile
 8005996:	f3ef 8211 	mrs	r2, BASEPRI
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	61fa      	str	r2, [r7, #28]
 80059ac:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80059ae:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d047      	beq.n	8005a4e <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059cc:	f000 f8d5 	bl	8005b7a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80059d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e0:	d112      	bne.n	8005a08 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d02e      	beq.n	8005a48 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	3310      	adds	r3, #16
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fed8 	bl	80067a4 <xTaskRemoveFromEventList>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d026      	beq.n	8005a48 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d023      	beq.n	8005a48 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e01f      	b.n	8005a48 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005a08:	f000 fce0 	bl	80063cc <uxTaskGetNumberOfTasks>
 8005a0c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005a0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d917      	bls.n	8005a48 <xQueueReceiveFromISR+0x114>
 8005a18:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a1e:	d10b      	bne.n	8005a38 <xQueueReceiveFromISR+0x104>
        __asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	617b      	str	r3, [r7, #20]
    }
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	e7fd      	b.n	8005a34 <xQueueReceiveFromISR+0x100>
 8005a38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	b25a      	sxtb	r2, r3
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a4c:	e001      	b.n	8005a52 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a54:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f383 8811 	msr	BASEPRI, r3
    }
 8005a5c:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3740      	adds	r7, #64	@ 0x40
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60bb      	str	r3, [r7, #8]
    }
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005a8e:	f002 f925 	bl	8007cdc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005a98:	f002 f952 	bl	8007d40 <vPortExitCritical>

    return uxReturn;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d14d      	bne.n	8005b68 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f899 	bl	8006c08 <xTaskPriorityDisinherit>
 8005ad6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	609a      	str	r2, [r3, #8]
 8005ade:	e043      	b.n	8005b68 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d119      	bne.n	8005b1a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6858      	ldr	r0, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	461a      	mov	r2, r3
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	f002 fc6d 	bl	80083d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	441a      	add	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d32b      	bcc.n	8005b68 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	e026      	b.n	8005b68 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68d8      	ldr	r0, [r3, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	461a      	mov	r2, r3
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	f002 fc53 	bl	80083d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	425b      	negs	r3, r3
 8005b34:	441a      	add	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d207      	bcs.n	8005b56 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	425b      	negs	r3, r3
 8005b50:	441a      	add	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d105      	bne.n	8005b68 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005b70:	697b      	ldr	r3, [r7, #20]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d018      	beq.n	8005bbe <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d303      	bcc.n	8005bae <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68d9      	ldr	r1, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6838      	ldr	r0, [r7, #0]
 8005bba:	f002 fc09 	bl	80083d0 <memcpy>
    }
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005bce:	f002 f885 	bl	8007cdc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bda:	e011      	b.n	8005c00 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3324      	adds	r3, #36	@ 0x24
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fddb 	bl	80067a4 <xTaskRemoveFromEventList>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005bf4:	f000 ff2c 	bl	8006a50 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dce9      	bgt.n	8005bdc <prvUnlockQueue+0x16>
 8005c08:	e000      	b.n	8005c0c <prvUnlockQueue+0x46>
                    break;
 8005c0a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	22ff      	movs	r2, #255	@ 0xff
 8005c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005c14:	f002 f894 	bl	8007d40 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005c18:	f002 f860 	bl	8007cdc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c22:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c24:	e011      	b.n	8005c4a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d012      	beq.n	8005c54 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3310      	adds	r3, #16
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fdb6 	bl	80067a4 <xTaskRemoveFromEventList>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005c3e:	f000 ff07 	bl	8006a50 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	dce9      	bgt.n	8005c26 <prvUnlockQueue+0x60>
 8005c52:	e000      	b.n	8005c56 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005c54:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	22ff      	movs	r2, #255	@ 0xff
 8005c5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005c5e:	f002 f86f 	bl	8007d40 <vPortExitCritical>
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005c72:	f002 f833 	bl	8007cdc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e001      	b.n	8005c88 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005c88:	f002 f85a 	bl	8007d40 <vPortExitCritical>

    return xReturn;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005c9e:	f002 f81d 	bl	8007cdc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d102      	bne.n	8005cb4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e001      	b.n	8005cb8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005cb8:	f002 f842 	bl	8007d40 <vPortExitCritical>

    return xReturn;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b087      	sub	sp, #28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60fb      	str	r3, [r7, #12]
    }
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d102      	bne.n	8005d02 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e001      	b.n	8005d06 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d06:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	60fb      	str	r3, [r7, #12]
    }
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d024      	beq.n	8005d90 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e01e      	b.n	8005d8a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005d4c:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <vQueueAddToRegistry+0x9c>)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	4413      	add	r3, r2
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d105      	bne.n	8005d68 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4a13      	ldr	r2, [pc, #76]	@ (8005db0 <vQueueAddToRegistry+0x9c>)
 8005d62:	4413      	add	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
                    break;
 8005d66:	e013      	b.n	8005d90 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <vQueueAddToRegistry+0x70>
 8005d6e:	4a10      	ldr	r2, [pc, #64]	@ (8005db0 <vQueueAddToRegistry+0x9c>)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005db0 <vQueueAddToRegistry+0x9c>)
 8005d80:	4413      	add	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3301      	adds	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b07      	cmp	r3, #7
 8005d8e:	d9dd      	bls.n	8005d4c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	2000021c 	.word	0x2000021c

08005db4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005dc4:	f001 ff8a 	bl	8007cdc <vPortEnterCritical>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dce:	b25b      	sxtb	r3, r3
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd4:	d103      	bne.n	8005dde <vQueueWaitForMessageRestricted+0x2a>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dea:	d103      	bne.n	8005df4 <vQueueWaitForMessageRestricted+0x40>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005df4:	f001 ffa4 	bl	8007d40 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	3324      	adds	r3, #36	@ 0x24
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fc85 	bl	8006718 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005e0e:	6978      	ldr	r0, [r7, #20]
 8005e10:	f7ff fed9 	bl	8005bc6 <prvUnlockQueue>
    }
 8005e14:	bf00      	nop
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	@ 0x30
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f002 f87d 	bl	8007f30 <pvPortMalloc>
 8005e36:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e3e:	2058      	movs	r0, #88	@ 0x58
 8005e40:	f002 f876 	bl	8007f30 <pvPortMalloc>
 8005e44:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005e4c:	2258      	movs	r2, #88	@ 0x58
 8005e4e:	2100      	movs	r1, #0
 8005e50:	69f8      	ldr	r0, [r7, #28]
 8005e52:	f002 fa89 	bl	8008368 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e5c:	e005      	b.n	8005e6a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005e5e:	6978      	ldr	r0, [r7, #20]
 8005e60:	f002 f922 	bl	80080a8 <vPortFree>
 8005e64:	e001      	b.n	8005e6a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e70:	88fa      	ldrh	r2, [r7, #6]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9303      	str	r3, [sp, #12]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	9302      	str	r3, [sp, #8]
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f80e 	bl	8005ea8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005e8c:	69f8      	ldr	r0, [r7, #28]
 8005e8e:	f000 f89b 	bl	8005fc8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	e002      	b.n	8005e9e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e9c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
    }
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	21a5      	movs	r1, #165	@ 0xa5
 8005ec2:	f002 fa51 	bl	8008368 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	617b      	str	r3, [r7, #20]
    }
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01e      	beq.n	8005f46 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e012      	b.n	8005f34 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3334      	adds	r3, #52	@ 0x34
 8005f1e:	460a      	mov	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b09      	cmp	r3, #9
 8005f38:	d9e9      	bls.n	8005f0e <prvInitialiseNewTask+0x66>
 8005f3a:	e000      	b.n	8005f3e <prvInitialiseNewTask+0x96>
            {
                break;
 8005f3c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d90b      	bls.n	8005f64 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	613b      	str	r3, [r7, #16]
    }
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d901      	bls.n	8005f6e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f6a:	2304      	movs	r3, #4
 8005f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f72:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f78:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff f8a6 	bl	80050d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	3318      	adds	r3, #24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff f8a1 	bl	80050d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f92:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	f1c3 0205 	rsb	r2, r3, #5
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	69b8      	ldr	r0, [r7, #24]
 8005faa:	f001 fd63 	bl	8007a74 <pxPortInitialiseStack>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fbe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005fc0:	bf00      	nop
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005fd0:	f001 fe84 	bl	8007cdc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005fd4:	4b40      	ldr	r3, [pc, #256]	@ (80060d8 <prvAddNewTaskToReadyList+0x110>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a3f      	ldr	r2, [pc, #252]	@ (80060d8 <prvAddNewTaskToReadyList+0x110>)
 8005fdc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005fde:	4b3f      	ldr	r3, [pc, #252]	@ (80060dc <prvAddNewTaskToReadyList+0x114>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005fe6:	4a3d      	ldr	r2, [pc, #244]	@ (80060dc <prvAddNewTaskToReadyList+0x114>)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fec:	4b3a      	ldr	r3, [pc, #232]	@ (80060d8 <prvAddNewTaskToReadyList+0x110>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d110      	bne.n	8006016 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005ff4:	f000 fd50 	bl	8006a98 <prvInitialiseTaskLists>
 8005ff8:	e00d      	b.n	8006016 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005ffa:	4b39      	ldr	r3, [pc, #228]	@ (80060e0 <prvAddNewTaskToReadyList+0x118>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006002:	4b36      	ldr	r3, [pc, #216]	@ (80060dc <prvAddNewTaskToReadyList+0x114>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	429a      	cmp	r2, r3
 800600e:	d802      	bhi.n	8006016 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006010:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <prvAddNewTaskToReadyList+0x114>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006016:	4b33      	ldr	r3, [pc, #204]	@ (80060e4 <prvAddNewTaskToReadyList+0x11c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	4a31      	ldr	r2, [pc, #196]	@ (80060e4 <prvAddNewTaskToReadyList+0x11c>)
 800601e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006020:	4b30      	ldr	r3, [pc, #192]	@ (80060e4 <prvAddNewTaskToReadyList+0x11c>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	4b2d      	ldr	r3, [pc, #180]	@ (80060e8 <prvAddNewTaskToReadyList+0x120>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <prvAddNewTaskToReadyList+0x120>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603e:	492b      	ldr	r1, [pc, #172]	@ (80060ec <prvAddNewTaskToReadyList+0x124>)
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3304      	adds	r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	609a      	str	r2, [r3, #8]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	3204      	adds	r2, #4
 8006066:	605a      	str	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	1d1a      	adds	r2, r3, #4
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a1b      	ldr	r2, [pc, #108]	@ (80060ec <prvAddNewTaskToReadyList+0x124>)
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	615a      	str	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006088:	4918      	ldr	r1, [pc, #96]	@ (80060ec <prvAddNewTaskToReadyList+0x124>)
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	4814      	ldr	r0, [pc, #80]	@ (80060ec <prvAddNewTaskToReadyList+0x124>)
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4403      	add	r3, r0
 80060a4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80060a6:	f001 fe4b 	bl	8007d40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <prvAddNewTaskToReadyList+0x118>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <prvAddNewTaskToReadyList+0x114>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	429a      	cmp	r2, r3
 80060be:	d207      	bcs.n	80060d0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80060c0:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <prvAddNewTaskToReadyList+0x128>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000334 	.word	0x20000334
 80060dc:	2000025c 	.word	0x2000025c
 80060e0:	20000340 	.word	0x20000340
 80060e4:	20000350 	.word	0x20000350
 80060e8:	2000033c 	.word	0x2000033c
 80060ec:	20000260 	.word	0x20000260
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80060fa:	4b20      	ldr	r3, [pc, #128]	@ (800617c <vTaskStartScheduler+0x88>)
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	2282      	movs	r2, #130	@ 0x82
 8006106:	491e      	ldr	r1, [pc, #120]	@ (8006180 <vTaskStartScheduler+0x8c>)
 8006108:	481e      	ldr	r0, [pc, #120]	@ (8006184 <vTaskStartScheduler+0x90>)
 800610a:	f7ff fe87 	bl	8005e1c <xTaskCreate>
 800610e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d102      	bne.n	800611c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006116:	f001 f979 	bl	800740c <xTimerCreateTimerTask>
 800611a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d116      	bne.n	8006150 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
    }
 8006134:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006136:	4b14      	ldr	r3, [pc, #80]	@ (8006188 <vTaskStartScheduler+0x94>)
 8006138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800613c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800613e:	4b13      	ldr	r3, [pc, #76]	@ (800618c <vTaskStartScheduler+0x98>)
 8006140:	2201      	movs	r2, #1
 8006142:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006144:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <vTaskStartScheduler+0x9c>)
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800614a:	f001 fd23 	bl	8007b94 <xPortStartScheduler>
 800614e:	e00f      	b.n	8006170 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006156:	d10b      	bne.n	8006170 <vTaskStartScheduler+0x7c>
        __asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	607b      	str	r3, [r7, #4]
    }
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006170:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <vTaskStartScheduler+0xa0>)
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000358 	.word	0x20000358
 8006180:	080099bc 	.word	0x080099bc
 8006184:	08006a69 	.word	0x08006a69
 8006188:	20000354 	.word	0x20000354
 800618c:	20000340 	.word	0x20000340
 8006190:	20000338 	.word	0x20000338
 8006194:	2000002c 	.word	0x2000002c

08006198 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <vTaskSuspendAll+0x18>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	4a03      	ldr	r2, [pc, #12]	@ (80061b0 <vTaskSuspendAll+0x18>)
 80061a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80061a6:	bf00      	nop
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000035c 	.word	0x2000035c

080061b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80061c2:	4b71      	ldr	r3, [pc, #452]	@ (8006388 <xTaskResumeAll+0x1d4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xTaskResumeAll+0x2e>
        __asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	607b      	str	r3, [r7, #4]
    }
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80061e2:	f001 fd7b 	bl	8007cdc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80061e6:	4b68      	ldr	r3, [pc, #416]	@ (8006388 <xTaskResumeAll+0x1d4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	4a66      	ldr	r2, [pc, #408]	@ (8006388 <xTaskResumeAll+0x1d4>)
 80061ee:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f0:	4b65      	ldr	r3, [pc, #404]	@ (8006388 <xTaskResumeAll+0x1d4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 80c0 	bne.w	800637a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061fa:	4b64      	ldr	r3, [pc, #400]	@ (800638c <xTaskResumeAll+0x1d8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80bb 	beq.w	800637a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006204:	e08a      	b.n	800631c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006206:	4b62      	ldr	r3, [pc, #392]	@ (8006390 <xTaskResumeAll+0x1dc>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	6a12      	ldr	r2, [r2, #32]
 800621c:	609a      	str	r2, [r3, #8]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	69d2      	ldr	r2, [r2, #28]
 8006226:	605a      	str	r2, [r3, #4]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3318      	adds	r3, #24
 8006230:	429a      	cmp	r2, r3
 8006232:	d103      	bne.n	800623c <xTaskResumeAll+0x88>
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2200      	movs	r2, #0
 8006240:	629a      	str	r2, [r3, #40]	@ 0x28
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	1e5a      	subs	r2, r3, #1
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	68d2      	ldr	r2, [r2, #12]
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	6892      	ldr	r2, [r2, #8]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3304      	adds	r3, #4
 800626e:	429a      	cmp	r2, r3
 8006270:	d103      	bne.n	800627a <xTaskResumeAll+0xc6>
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2200      	movs	r2, #0
 800627e:	615a      	str	r2, [r3, #20]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	2201      	movs	r2, #1
 8006290:	409a      	lsls	r2, r3
 8006292:	4b40      	ldr	r3, [pc, #256]	@ (8006394 <xTaskResumeAll+0x1e0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	4a3e      	ldr	r2, [pc, #248]	@ (8006394 <xTaskResumeAll+0x1e0>)
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a0:	493d      	ldr	r1, [pc, #244]	@ (8006398 <xTaskResumeAll+0x1e4>)
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3304      	adds	r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	60da      	str	r2, [r3, #12]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	3204      	adds	r2, #4
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	1d1a      	adds	r2, r3, #4
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4a2e      	ldr	r2, [pc, #184]	@ (8006398 <xTaskResumeAll+0x1e4>)
 80062e0:	441a      	add	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	615a      	str	r2, [r3, #20]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ea:	492b      	ldr	r1, [pc, #172]	@ (8006398 <xTaskResumeAll+0x1e4>)
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	4827      	ldr	r0, [pc, #156]	@ (8006398 <xTaskResumeAll+0x1e4>)
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4403      	add	r3, r0
 8006306:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630c:	4b23      	ldr	r3, [pc, #140]	@ (800639c <xTaskResumeAll+0x1e8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8006316:	4b22      	ldr	r3, [pc, #136]	@ (80063a0 <xTaskResumeAll+0x1ec>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631c:	4b1c      	ldr	r3, [pc, #112]	@ (8006390 <xTaskResumeAll+0x1dc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f47f af70 	bne.w	8006206 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800632c:	f000 fc32 	bl	8006b94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006330:	4b1c      	ldr	r3, [pc, #112]	@ (80063a4 <xTaskResumeAll+0x1f0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d010      	beq.n	800635e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800633c:	f000 f852 	bl	80063e4 <xTaskIncrementTick>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8006346:	4b16      	ldr	r3, [pc, #88]	@ (80063a0 <xTaskResumeAll+0x1ec>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3b01      	subs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f1      	bne.n	800633c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8006358:	4b12      	ldr	r3, [pc, #72]	@ (80063a4 <xTaskResumeAll+0x1f0>)
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800635e:	4b10      	ldr	r3, [pc, #64]	@ (80063a0 <xTaskResumeAll+0x1ec>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800636a:	4b0f      	ldr	r3, [pc, #60]	@ (80063a8 <xTaskResumeAll+0x1f4>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800637a:	f001 fce1 	bl	8007d40 <vPortExitCritical>

    return xAlreadyYielded;
 800637e:	69bb      	ldr	r3, [r7, #24]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	2000035c 	.word	0x2000035c
 800638c:	20000334 	.word	0x20000334
 8006390:	200002f4 	.word	0x200002f4
 8006394:	2000033c 	.word	0x2000033c
 8006398:	20000260 	.word	0x20000260
 800639c:	2000025c 	.word	0x2000025c
 80063a0:	20000348 	.word	0x20000348
 80063a4:	20000344 	.word	0x20000344
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80063b2:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <xTaskGetTickCount+0x1c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80063b8:	687b      	ldr	r3, [r7, #4]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000338 	.word	0x20000338

080063cc <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80063d0:	4b03      	ldr	r3, [pc, #12]	@ (80063e0 <uxTaskGetNumberOfTasks+0x14>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000334 	.word	0x20000334

080063e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	@ 0x28
 80063e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ee:	4b7e      	ldr	r3, [pc, #504]	@ (80065e8 <xTaskIncrementTick+0x204>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f040 80ed 	bne.w	80065d2 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063f8:	4b7c      	ldr	r3, [pc, #496]	@ (80065ec <xTaskIncrementTick+0x208>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006400:	4a7a      	ldr	r2, [pc, #488]	@ (80065ec <xTaskIncrementTick+0x208>)
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d121      	bne.n	8006450 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800640c:	4b78      	ldr	r3, [pc, #480]	@ (80065f0 <xTaskIncrementTick+0x20c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <xTaskIncrementTick+0x4a>
        __asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	607b      	str	r3, [r7, #4]
    }
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <xTaskIncrementTick+0x46>
 800642e:	4b70      	ldr	r3, [pc, #448]	@ (80065f0 <xTaskIncrementTick+0x20c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	4b6f      	ldr	r3, [pc, #444]	@ (80065f4 <xTaskIncrementTick+0x210>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a6d      	ldr	r2, [pc, #436]	@ (80065f0 <xTaskIncrementTick+0x20c>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4a6d      	ldr	r2, [pc, #436]	@ (80065f4 <xTaskIncrementTick+0x210>)
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b6d      	ldr	r3, [pc, #436]	@ (80065f8 <xTaskIncrementTick+0x214>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	4a6b      	ldr	r2, [pc, #428]	@ (80065f8 <xTaskIncrementTick+0x214>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	f000 fba2 	bl	8006b94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006450:	4b6a      	ldr	r3, [pc, #424]	@ (80065fc <xTaskIncrementTick+0x218>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	429a      	cmp	r2, r3
 8006458:	f0c0 80a6 	bcc.w	80065a8 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645c:	4b64      	ldr	r3, [pc, #400]	@ (80065f0 <xTaskIncrementTick+0x20c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006466:	4b65      	ldr	r3, [pc, #404]	@ (80065fc <xTaskIncrementTick+0x218>)
 8006468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800646c:	601a      	str	r2, [r3, #0]
                    break;
 800646e:	e09b      	b.n	80065a8 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006470:	4b5f      	ldr	r3, [pc, #380]	@ (80065f0 <xTaskIncrementTick+0x20c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006480:	6a3a      	ldr	r2, [r7, #32]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	429a      	cmp	r2, r3
 8006486:	d203      	bcs.n	8006490 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006488:	4a5c      	ldr	r2, [pc, #368]	@ (80065fc <xTaskIncrementTick+0x218>)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800648e:	e08b      	b.n	80065a8 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	68d2      	ldr	r2, [r2, #12]
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3304      	adds	r3, #4
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d103      	bne.n	80064be <xTaskIncrementTick+0xda>
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01e      	beq.n	8006514 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	6a12      	ldr	r2, [r2, #32]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	69d2      	ldr	r2, [r2, #28]
 80064ee:	605a      	str	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3318      	adds	r3, #24
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d103      	bne.n	8006504 <xTaskIncrementTick+0x120>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2200      	movs	r2, #0
 8006508:	629a      	str	r2, [r3, #40]	@ 0x28
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	2201      	movs	r2, #1
 800651a:	409a      	lsls	r2, r3
 800651c:	4b38      	ldr	r3, [pc, #224]	@ (8006600 <xTaskIncrementTick+0x21c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4313      	orrs	r3, r2
 8006522:	4a37      	ldr	r2, [pc, #220]	@ (8006600 <xTaskIncrementTick+0x21c>)
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652a:	4936      	ldr	r1, [pc, #216]	@ (8006604 <xTaskIncrementTick+0x220>)
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	3304      	adds	r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	3204      	adds	r2, #4
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	1d1a      	adds	r2, r3, #4
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a26      	ldr	r2, [pc, #152]	@ (8006604 <xTaskIncrementTick+0x220>)
 800656a:	441a      	add	r2, r3
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	615a      	str	r2, [r3, #20]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006574:	4923      	ldr	r1, [pc, #140]	@ (8006604 <xTaskIncrementTick+0x220>)
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	481f      	ldr	r0, [pc, #124]	@ (8006604 <xTaskIncrementTick+0x220>)
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4403      	add	r3, r0
 8006590:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006596:	4b1c      	ldr	r3, [pc, #112]	@ (8006608 <xTaskIncrementTick+0x224>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	429a      	cmp	r2, r3
 800659e:	f67f af5d 	bls.w	800645c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80065a2:	2301      	movs	r3, #1
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a6:	e759      	b.n	800645c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065a8:	4b17      	ldr	r3, [pc, #92]	@ (8006608 <xTaskIncrementTick+0x224>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ae:	4915      	ldr	r1, [pc, #84]	@ (8006604 <xTaskIncrementTick+0x220>)
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d901      	bls.n	80065c4 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80065c4:	4b11      	ldr	r3, [pc, #68]	@ (800660c <xTaskIncrementTick+0x228>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d0:	e004      	b.n	80065dc <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80065d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006610 <xTaskIncrementTick+0x22c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006610 <xTaskIncrementTick+0x22c>)
 80065da:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3728      	adds	r7, #40	@ 0x28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000035c 	.word	0x2000035c
 80065ec:	20000338 	.word	0x20000338
 80065f0:	200002ec 	.word	0x200002ec
 80065f4:	200002f0 	.word	0x200002f0
 80065f8:	2000034c 	.word	0x2000034c
 80065fc:	20000354 	.word	0x20000354
 8006600:	2000033c 	.word	0x2000033c
 8006604:	20000260 	.word	0x20000260
 8006608:	2000025c 	.word	0x2000025c
 800660c:	20000348 	.word	0x20000348
 8006610:	20000344 	.word	0x20000344

08006614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800661a:	4b27      	ldr	r3, [pc, #156]	@ (80066b8 <vTaskSwitchContext+0xa4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006622:	4b26      	ldr	r3, [pc, #152]	@ (80066bc <vTaskSwitchContext+0xa8>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006628:	e040      	b.n	80066ac <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800662a:	4b24      	ldr	r3, [pc, #144]	@ (80066bc <vTaskSwitchContext+0xa8>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006630:	4b23      	ldr	r3, [pc, #140]	@ (80066c0 <vTaskSwitchContext+0xac>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	fab3 f383 	clz	r3, r3
 800663c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	f1c3 031f 	rsb	r3, r3, #31
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	491f      	ldr	r1, [pc, #124]	@ (80066c4 <vTaskSwitchContext+0xb0>)
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <vTaskSwitchContext+0x5e>
        __asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	607b      	str	r3, [r7, #4]
    }
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <vTaskSwitchContext+0x5a>
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4a11      	ldr	r2, [pc, #68]	@ (80066c4 <vTaskSwitchContext+0xb0>)
 800667e:	4413      	add	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3308      	adds	r3, #8
 8006694:	429a      	cmp	r2, r3
 8006696:	d104      	bne.n	80066a2 <vTaskSwitchContext+0x8e>
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a07      	ldr	r2, [pc, #28]	@ (80066c8 <vTaskSwitchContext+0xb4>)
 80066aa:	6013      	str	r3, [r2, #0]
}
 80066ac:	bf00      	nop
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	2000035c 	.word	0x2000035c
 80066bc:	20000348 	.word	0x20000348
 80066c0:	2000033c 	.word	0x2000033c
 80066c4:	20000260 	.word	0x20000260
 80066c8:	2000025c 	.word	0x2000025c

080066cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
    }
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	e7fd      	b.n	80066f0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <vTaskPlaceOnEventList+0x48>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3318      	adds	r3, #24
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7fe fd18 	bl	8005132 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006702:	2101      	movs	r1, #1
 8006704:	6838      	ldr	r0, [r7, #0]
 8006706:	f000 fe01 	bl	800730c <prvAddCurrentTaskToDelayedList>
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000025c 	.word	0x2000025c

08006718 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	613b      	str	r3, [r7, #16]
    }
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <vTaskPlaceOnEventListRestricted+0x88>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	61da      	str	r2, [r3, #28]
 8006750:	4b13      	ldr	r3, [pc, #76]	@ (80067a0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	6892      	ldr	r2, [r2, #8]
 8006758:	621a      	str	r2, [r3, #32]
 800675a:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <vTaskPlaceOnEventListRestricted+0x88>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	3218      	adds	r2, #24
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	4b0e      	ldr	r3, [pc, #56]	@ (80067a0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f103 0218 	add.w	r2, r3, #24
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	629a      	str	r2, [r3, #40]	@ 0x28
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800678e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	68b8      	ldr	r0, [r7, #8]
 8006794:	f000 fdba 	bl	800730c <prvAddCurrentTaskToDelayedList>
    }
 8006798:	bf00      	nop
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	2000025c 	.word	0x2000025c

080067a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b08b      	sub	sp, #44	@ 0x2c
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60fb      	str	r3, [r7, #12]
    }
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	6a12      	ldr	r2, [r2, #32]
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	69d2      	ldr	r2, [r2, #28]
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	3318      	adds	r3, #24
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d103      	bne.n	8006800 <xTaskRemoveFromEventList+0x5c>
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	2200      	movs	r2, #0
 8006804:	629a      	str	r2, [r3, #40]	@ 0x28
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006810:	4b4a      	ldr	r3, [pc, #296]	@ (800693c <xTaskRemoveFromEventList+0x198>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d15e      	bne.n	80068d6 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	68d2      	ldr	r2, [r2, #12]
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	6892      	ldr	r2, [r2, #8]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	3304      	adds	r3, #4
 800683a:	429a      	cmp	r2, r3
 800683c:	d103      	bne.n	8006846 <xTaskRemoveFromEventList+0xa2>
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2200      	movs	r2, #0
 800684a:	615a      	str	r2, [r3, #20]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	2201      	movs	r2, #1
 800685c:	409a      	lsls	r2, r3
 800685e:	4b38      	ldr	r3, [pc, #224]	@ (8006940 <xTaskRemoveFromEventList+0x19c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4313      	orrs	r3, r2
 8006864:	4a36      	ldr	r2, [pc, #216]	@ (8006940 <xTaskRemoveFromEventList+0x19c>)
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686c:	4935      	ldr	r1, [pc, #212]	@ (8006944 <xTaskRemoveFromEventList+0x1a0>)
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3304      	adds	r3, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	60da      	str	r2, [r3, #12]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	3204      	adds	r2, #4
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	1d1a      	adds	r2, r3, #4
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4a26      	ldr	r2, [pc, #152]	@ (8006944 <xTaskRemoveFromEventList+0x1a0>)
 80068ac:	441a      	add	r2, r3
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	615a      	str	r2, [r3, #20]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b6:	4923      	ldr	r1, [pc, #140]	@ (8006944 <xTaskRemoveFromEventList+0x1a0>)
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	481f      	ldr	r0, [pc, #124]	@ (8006944 <xTaskRemoveFromEventList+0x1a0>)
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4403      	add	r3, r0
 80068d2:	6019      	str	r1, [r3, #0]
 80068d4:	e01b      	b.n	800690e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006948 <xTaskRemoveFromEventList+0x1a4>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	61da      	str	r2, [r3, #28]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	621a      	str	r2, [r3, #32]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	3218      	adds	r2, #24
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	f103 0218 	add.w	r2, r3, #24
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	609a      	str	r2, [r3, #8]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	4a11      	ldr	r2, [pc, #68]	@ (8006948 <xTaskRemoveFromEventList+0x1a4>)
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28
 8006904:	4b10      	ldr	r3, [pc, #64]	@ (8006948 <xTaskRemoveFromEventList+0x1a4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	4a0f      	ldr	r2, [pc, #60]	@ (8006948 <xTaskRemoveFromEventList+0x1a4>)
 800690c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	4b0e      	ldr	r3, [pc, #56]	@ (800694c <xTaskRemoveFromEventList+0x1a8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	429a      	cmp	r2, r3
 800691a:	d905      	bls.n	8006928 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006920:	4b0b      	ldr	r3, [pc, #44]	@ (8006950 <xTaskRemoveFromEventList+0x1ac>)
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	e001      	b.n	800692c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800692e:	4618      	mov	r0, r3
 8006930:	372c      	adds	r7, #44	@ 0x2c
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2000035c 	.word	0x2000035c
 8006940:	2000033c 	.word	0x2000033c
 8006944:	20000260 	.word	0x20000260
 8006948:	200002f4 	.word	0x200002f4
 800694c:	2000025c 	.word	0x2000025c
 8006950:	20000348 	.word	0x20000348

08006954 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800695c:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <vTaskInternalSetTimeOutState+0x24>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006964:	4b05      	ldr	r3, [pc, #20]	@ (800697c <vTaskInternalSetTimeOutState+0x28>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	605a      	str	r2, [r3, #4]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	2000034c 	.word	0x2000034c
 800697c:	20000338 	.word	0x20000338

08006980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	613b      	str	r3, [r7, #16]
    }
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60fb      	str	r3, [r7, #12]
    }
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80069c6:	f001 f989 	bl	8007cdc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80069ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006a48 <xTaskCheckForTimeOut+0xc8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e2:	d102      	bne.n	80069ea <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	e026      	b.n	8006a38 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <xTaskCheckForTimeOut+0xcc>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d00a      	beq.n	8006a0c <xTaskCheckForTimeOut+0x8c>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d305      	bcc.n	8006a0c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e015      	b.n	8006a38 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d20b      	bcs.n	8006a2e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff ff96 	bl	8006954 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e004      	b.n	8006a38 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006a38:	f001 f982 	bl	8007d40 <vPortExitCritical>

    return xReturn;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000338 	.word	0x20000338
 8006a4c:	2000034c 	.word	0x2000034c

08006a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006a54:	4b03      	ldr	r3, [pc, #12]	@ (8006a64 <vTaskMissedYield+0x14>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	20000348 	.word	0x20000348

08006a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006a70:	f000 f852 	bl	8006b18 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a74:	4b06      	ldr	r3, [pc, #24]	@ (8006a90 <prvIdleTask+0x28>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d9f9      	bls.n	8006a70 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006a7c:	4b05      	ldr	r3, [pc, #20]	@ (8006a94 <prvIdleTask+0x2c>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006a8c:	e7f0      	b.n	8006a70 <prvIdleTask+0x8>
 8006a8e:	bf00      	nop
 8006a90:	20000260 	.word	0x20000260
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	e00c      	b.n	8006abe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4a12      	ldr	r2, [pc, #72]	@ (8006af8 <prvInitialiseTaskLists+0x60>)
 8006ab0:	4413      	add	r3, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe faec 	bl	8005090 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3301      	adds	r3, #1
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d9ef      	bls.n	8006aa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006ac4:	480d      	ldr	r0, [pc, #52]	@ (8006afc <prvInitialiseTaskLists+0x64>)
 8006ac6:	f7fe fae3 	bl	8005090 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006aca:	480d      	ldr	r0, [pc, #52]	@ (8006b00 <prvInitialiseTaskLists+0x68>)
 8006acc:	f7fe fae0 	bl	8005090 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006ad0:	480c      	ldr	r0, [pc, #48]	@ (8006b04 <prvInitialiseTaskLists+0x6c>)
 8006ad2:	f7fe fadd 	bl	8005090 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006ad6:	480c      	ldr	r0, [pc, #48]	@ (8006b08 <prvInitialiseTaskLists+0x70>)
 8006ad8:	f7fe fada 	bl	8005090 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006adc:	480b      	ldr	r0, [pc, #44]	@ (8006b0c <prvInitialiseTaskLists+0x74>)
 8006ade:	f7fe fad7 	bl	8005090 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <prvInitialiseTaskLists+0x78>)
 8006ae4:	4a05      	ldr	r2, [pc, #20]	@ (8006afc <prvInitialiseTaskLists+0x64>)
 8006ae6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b14 <prvInitialiseTaskLists+0x7c>)
 8006aea:	4a05      	ldr	r2, [pc, #20]	@ (8006b00 <prvInitialiseTaskLists+0x68>)
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000260 	.word	0x20000260
 8006afc:	200002c4 	.word	0x200002c4
 8006b00:	200002d8 	.word	0x200002d8
 8006b04:	200002f4 	.word	0x200002f4
 8006b08:	20000308 	.word	0x20000308
 8006b0c:	20000320 	.word	0x20000320
 8006b10:	200002ec 	.word	0x200002ec
 8006b14:	200002f0 	.word	0x200002f0

08006b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b1e:	e019      	b.n	8006b54 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006b20:	f001 f8dc 	bl	8007cdc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b24:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <prvCheckTasksWaitingTermination+0x50>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe fb37 	bl	80051a4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <prvCheckTasksWaitingTermination+0x54>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b6c <prvCheckTasksWaitingTermination+0x54>)
 8006b3e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <prvCheckTasksWaitingTermination+0x58>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <prvCheckTasksWaitingTermination+0x58>)
 8006b48:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006b4a:	f001 f8f9 	bl	8007d40 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f810 	bl	8006b74 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b54:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <prvCheckTasksWaitingTermination+0x58>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e1      	bne.n	8006b20 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000308 	.word	0x20000308
 8006b6c:	20000334 	.word	0x20000334
 8006b70:	2000031c 	.word	0x2000031c

08006b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fa91 	bl	80080a8 <vPortFree>
            vPortFree( pxTCB );
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fa8e 	bl	80080a8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b98:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <prvResetNextTaskUnblockTime+0x30>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006ba2:	4b09      	ldr	r3, [pc, #36]	@ (8006bc8 <prvResetNextTaskUnblockTime+0x34>)
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ba8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006baa:	e005      	b.n	8006bb8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bac:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <prvResetNextTaskUnblockTime+0x30>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a04      	ldr	r2, [pc, #16]	@ (8006bc8 <prvResetNextTaskUnblockTime+0x34>)
 8006bb6:	6013      	str	r3, [r2, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	200002ec 	.word	0x200002ec
 8006bc8:	20000354 	.word	0x20000354

08006bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <xTaskGetSchedulerState+0x34>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	e008      	b.n	8006bf2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be0:	4b08      	ldr	r3, [pc, #32]	@ (8006c04 <xTaskGetSchedulerState+0x38>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006be8:	2302      	movs	r3, #2
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	e001      	b.n	8006bf2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006bf2:	687b      	ldr	r3, [r7, #4]
    }
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	20000340 	.word	0x20000340
 8006c04:	2000035c 	.word	0x2000035c

08006c08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d065      	beq.n	8006cea <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006c1e:	4b35      	ldr	r3, [pc, #212]	@ (8006cf4 <xTaskPriorityDisinherit+0xec>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d00b      	beq.n	8006c40 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
    }
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60bb      	str	r3, [r7, #8]
    }
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	e7fd      	b.n	8006c5c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c64:	1e5a      	subs	r2, r3, #1
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d039      	beq.n	8006cea <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d135      	bne.n	8006cea <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fa8e 	bl	80051a4 <uxListRemove>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	2201      	movs	r2, #1
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43da      	mvns	r2, r3
 8006c9a:	4b17      	ldr	r3, [pc, #92]	@ (8006cf8 <xTaskPriorityDisinherit+0xf0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	4a15      	ldr	r2, [pc, #84]	@ (8006cf8 <xTaskPriorityDisinherit+0xf0>)
 8006ca2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	f1c3 0205 	rsb	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <xTaskPriorityDisinherit+0xf0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf8 <xTaskPriorityDisinherit+0xf0>)
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4a09      	ldr	r2, [pc, #36]	@ (8006cfc <xTaskPriorityDisinherit+0xf4>)
 8006cd8:	441a      	add	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f7fe fa02 	bl	80050ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006cea:	697b      	ldr	r3, [r7, #20]
    }
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	2000025c 	.word	0x2000025c
 8006cf8:	2000033c 	.word	0x2000033c
 8006cfc:	20000260 	.word	0x20000260

08006d00 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	613b      	str	r3, [r7, #16]
    }
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006d2c:	f000 ffd6 	bl	8007cdc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006d30:	4b31      	ldr	r3, [pc, #196]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	3354      	adds	r3, #84	@ 0x54
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d022      	beq.n	8006d88 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006d42:	4b2d      	ldr	r3, [pc, #180]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	3214      	adds	r2, #20
 8006d4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	43d2      	mvns	r2, r2
 8006d52:	4011      	ands	r1, r2
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	3214      	adds	r2, #20
 8006d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006d5c:	4b26      	ldr	r3, [pc, #152]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	3354      	adds	r3, #84	@ 0x54
 8006d66:	2201      	movs	r2, #1
 8006d68:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d70:	2101      	movs	r1, #1
 8006d72:	6a38      	ldr	r0, [r7, #32]
 8006d74:	f000 faca 	bl	800730c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006d78:	4b20      	ldr	r3, [pc, #128]	@ (8006dfc <xTaskGenericNotifyWait+0xfc>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006d88:	f000 ffda 	bl	8007d40 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006d8c:	f000 ffa6 	bl	8007cdc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006d96:	4b18      	ldr	r3, [pc, #96]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	3214      	adds	r2, #20
 8006d9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006da6:	4b14      	ldr	r3, [pc, #80]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	3354      	adds	r3, #84	@ 0x54
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d002      	beq.n	8006dbe <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e00e      	b.n	8006ddc <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	3214      	adds	r2, #20
 8006dc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	43d2      	mvns	r2, r2
 8006dce:	4011      	ands	r1, r2
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	3214      	adds	r2, #20
 8006dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <xTaskGenericNotifyWait+0xf8>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	3354      	adds	r3, #84	@ 0x54
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006dea:	f000 ffa9 	bl	8007d40 <vPortExitCritical>

        return xReturn;
 8006dee:	697b      	ldr	r3, [r7, #20]
    }
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	2000025c 	.word	0x2000025c
 8006dfc:	e000ed04 	.word	0xe000ed04

08006e00 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08e      	sub	sp, #56	@ 0x38
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <xTaskGenericNotify+0x30>
        __asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	623b      	str	r3, [r7, #32]
    }
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <xTaskGenericNotify+0x4e>
        __asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	61fb      	str	r3, [r7, #28]
    }
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8006e52:	f000 ff43 	bl	8007cdc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	3214      	adds	r2, #20
 8006e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3354      	adds	r3, #84	@ 0x54
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3354      	adds	r3, #84	@ 0x54
 8006e80:	2202      	movs	r2, #2
 8006e82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d83b      	bhi.n	8006f02 <xTaskGenericNotify+0x102>
 8006e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e90 <xTaskGenericNotify+0x90>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006f23 	.word	0x08006f23
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ee7 	.word	0x08006ee7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	3214      	adds	r2, #20
 8006eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	ea42 0103 	orr.w	r1, r2, r3
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	3214      	adds	r2, #20
 8006eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ebe:	e033      	b.n	8006f28 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	3214      	adds	r2, #20
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	3214      	adds	r2, #20
 8006ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ed6:	e027      	b.n	8006f28 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	3214      	adds	r2, #20
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ee4:	e020      	b.n	8006f28 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d006      	beq.n	8006efc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	3214      	adds	r2, #20
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006efa:	e015      	b.n	8006f28 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8006f00:	e012      	b.n	8006f28 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006f02:	4b4d      	ldr	r3, [pc, #308]	@ (8007038 <xTaskGenericNotify+0x238>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <xTaskGenericNotify+0x126>
        __asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	61bb      	str	r3, [r7, #24]
    }
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <xTaskGenericNotify+0x11e>
                    break;
 8006f22:	bf00      	nop
 8006f24:	e000      	b.n	8006f28 <xTaskGenericNotify+0x128>

                    break;
 8006f26:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d17c      	bne.n	800702a <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f3c:	68d2      	ldr	r2, [r2, #12]
 8006f3e:	609a      	str	r2, [r3, #8]
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f46:	6892      	ldr	r2, [r2, #8]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	3304      	adds	r3, #4
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d103      	bne.n	8006f5e <xTaskGenericNotify+0x15e>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	2200      	movs	r2, #0
 8006f62:	615a      	str	r2, [r3, #20]
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	1e5a      	subs	r2, r3, #1
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	2201      	movs	r2, #1
 8006f74:	409a      	lsls	r2, r3
 8006f76:	4b31      	ldr	r3, [pc, #196]	@ (800703c <xTaskGenericNotify+0x23c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800703c <xTaskGenericNotify+0x23c>)
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f84:	492e      	ldr	r1, [pc, #184]	@ (8007040 <xTaskGenericNotify+0x240>)
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3304      	adds	r3, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006faa:	3204      	adds	r2, #4
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	609a      	str	r2, [r3, #8]
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007040 <xTaskGenericNotify+0x240>)
 8006fc4:	441a      	add	r2, r3
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	615a      	str	r2, [r3, #20]
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fce:	491c      	ldr	r1, [pc, #112]	@ (8007040 <xTaskGenericNotify+0x240>)
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	1c59      	adds	r1, r3, #1
 8006fde:	4818      	ldr	r0, [pc, #96]	@ (8007040 <xTaskGenericNotify+0x240>)
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4403      	add	r3, r0
 8006fea:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <xTaskGenericNotify+0x20c>
        __asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	617b      	str	r3, [r7, #20]
    }
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	e7fd      	b.n	8007008 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007010:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <xTaskGenericNotify+0x244>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	429a      	cmp	r2, r3
 8007018:	d907      	bls.n	800702a <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800701a:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <xTaskGenericNotify+0x248>)
 800701c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800702a:	f000 fe89 	bl	8007d40 <vPortExitCritical>

        return xReturn;
 800702e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8007030:	4618      	mov	r0, r3
 8007032:	3738      	adds	r7, #56	@ 0x38
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20000338 	.word	0x20000338
 800703c:	2000033c 	.word	0x2000033c
 8007040:	20000260 	.word	0x20000260
 8007044:	2000025c 	.word	0x2000025c
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800704c:	b580      	push	{r7, lr}
 800704e:	b092      	sub	sp, #72	@ 0x48
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800709a:	f000 ff07 	bl	8007eac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 80070a2:	f3ef 8211 	mrs	r2, BASEPRI
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	623a      	str	r2, [r7, #32]
 80070b8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80070ba:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80070be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d006      	beq.n	80070d2 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80070c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	3214      	adds	r2, #20
 80070ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80070d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4413      	add	r3, r2
 80070d8:	3354      	adds	r3, #84	@ 0x54
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80070e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	3354      	adds	r3, #84	@ 0x54
 80070e8:	2202      	movs	r2, #2
 80070ea:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d83b      	bhi.n	800716a <xTaskGenericNotifyFromISR+0x11e>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <xTaskGenericNotifyFromISR+0xac>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800718b 	.word	0x0800718b
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	08007129 	.word	0x08007129
 8007104:	08007141 	.word	0x08007141
 8007108:	0800714f 	.word	0x0800714f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800710c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	3214      	adds	r2, #20
 8007112:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	ea42 0103 	orr.w	r1, r2, r3
 800711c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	3214      	adds	r2, #20
 8007122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007126:	e033      	b.n	8007190 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	3214      	adds	r2, #20
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	1c59      	adds	r1, r3, #1
 8007134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	3214      	adds	r2, #20
 800713a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800713e:	e027      	b.n	8007190 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	3214      	adds	r2, #20
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800714c:	e020      	b.n	8007190 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800714e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007152:	2b02      	cmp	r3, #2
 8007154:	d006      	beq.n	8007164 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	3214      	adds	r2, #20
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007162:	e015      	b.n	8007190 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8007164:	2300      	movs	r3, #0
 8007166:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8007168:	e012      	b.n	8007190 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800716a:	4b61      	ldr	r3, [pc, #388]	@ (80072f0 <xTaskGenericNotifyFromISR+0x2a4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	61bb      	str	r3, [r7, #24]
    }
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800718e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007190:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007194:	2b01      	cmp	r3, #1
 8007196:	f040 809f 	bne.w	80072d8 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800719a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	617b      	str	r3, [r7, #20]
    }
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ba:	4b4e      	ldr	r3, [pc, #312]	@ (80072f4 <xTaskGenericNotifyFromISR+0x2a8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d15e      	bne.n	8007280 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80071c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071ce:	68d2      	ldr	r2, [r2, #12]
 80071d0:	609a      	str	r2, [r3, #8]
 80071d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071d8:	6892      	ldr	r2, [r2, #8]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e2:	3304      	adds	r3, #4
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d103      	bne.n	80071f0 <xTaskGenericNotifyFromISR+0x1a4>
 80071e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	605a      	str	r2, [r3, #4]
 80071f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f2:	2200      	movs	r2, #0
 80071f4:	615a      	str	r2, [r3, #20]
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1e5a      	subs	r2, r3, #1
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	2201      	movs	r2, #1
 8007206:	409a      	lsls	r2, r3
 8007208:	4b3b      	ldr	r3, [pc, #236]	@ (80072f8 <xTaskGenericNotifyFromISR+0x2ac>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4313      	orrs	r3, r2
 800720e:	4a3a      	ldr	r2, [pc, #232]	@ (80072f8 <xTaskGenericNotifyFromISR+0x2ac>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007216:	4939      	ldr	r1, [pc, #228]	@ (80072fc <xTaskGenericNotifyFromISR+0x2b0>)
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	3304      	adds	r3, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800722a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722c:	609a      	str	r2, [r3, #8]
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007234:	60da      	str	r2, [r3, #12]
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800723c:	3204      	adds	r2, #4
 800723e:	605a      	str	r2, [r3, #4]
 8007240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007242:	1d1a      	adds	r2, r3, #4
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4a29      	ldr	r2, [pc, #164]	@ (80072fc <xTaskGenericNotifyFromISR+0x2b0>)
 8007256:	441a      	add	r2, r3
 8007258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800725a:	615a      	str	r2, [r3, #20]
 800725c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800725e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007260:	4926      	ldr	r1, [pc, #152]	@ (80072fc <xTaskGenericNotifyFromISR+0x2b0>)
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	4822      	ldr	r0, [pc, #136]	@ (80072fc <xTaskGenericNotifyFromISR+0x2b0>)
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4403      	add	r3, r0
 800727c:	6019      	str	r1, [r3, #0]
 800727e:	e01b      	b.n	80072b8 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007280:	4b1f      	ldr	r3, [pc, #124]	@ (8007300 <xTaskGenericNotifyFromISR+0x2b4>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
 8007286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007288:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800728a:	61da      	str	r2, [r3, #28]
 800728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007292:	621a      	str	r2, [r3, #32]
 8007294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800729a:	3218      	adds	r2, #24
 800729c:	605a      	str	r2, [r3, #4]
 800729e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a0:	f103 0218 	add.w	r2, r3, #24
 80072a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a6:	609a      	str	r2, [r3, #8]
 80072a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072aa:	4a15      	ldr	r2, [pc, #84]	@ (8007300 <xTaskGenericNotifyFromISR+0x2b4>)
 80072ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80072ae:	4b14      	ldr	r3, [pc, #80]	@ (8007300 <xTaskGenericNotifyFromISR+0x2b4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3301      	adds	r3, #1
 80072b4:	4a12      	ldr	r2, [pc, #72]	@ (8007300 <xTaskGenericNotifyFromISR+0x2b4>)
 80072b6:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072bc:	4b11      	ldr	r3, [pc, #68]	@ (8007304 <xTaskGenericNotifyFromISR+0x2b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d908      	bls.n	80072d8 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80072c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80072cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ce:	2201      	movs	r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80072d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <xTaskGenericNotifyFromISR+0x2bc>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072da:	613b      	str	r3, [r7, #16]
        __asm volatile
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f383 8811 	msr	BASEPRI, r3
    }
 80072e2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80072e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80072e6:	4618      	mov	r0, r3
 80072e8:	3748      	adds	r7, #72	@ 0x48
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000338 	.word	0x20000338
 80072f4:	2000035c 	.word	0x2000035c
 80072f8:	2000033c 	.word	0x2000033c
 80072fc:	20000260 	.word	0x20000260
 8007300:	200002f4 	.word	0x200002f4
 8007304:	2000025c 	.word	0x2000025c
 8007308:	20000348 	.word	0x20000348

0800730c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007316:	4b36      	ldr	r3, [pc, #216]	@ (80073f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800731c:	4b35      	ldr	r3, [pc, #212]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fd ff3e 	bl	80051a4 <uxListRemove>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800732e:	4b31      	ldr	r3, [pc, #196]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007334:	2201      	movs	r2, #1
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43da      	mvns	r2, r3
 800733c:	4b2e      	ldr	r3, [pc, #184]	@ (80073f8 <prvAddCurrentTaskToDelayedList+0xec>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4013      	ands	r3, r2
 8007342:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <prvAddCurrentTaskToDelayedList+0xec>)
 8007344:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800734c:	d124      	bne.n	8007398 <prvAddCurrentTaskToDelayedList+0x8c>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d021      	beq.n	8007398 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007354:	4b29      	ldr	r3, [pc, #164]	@ (80073fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	4b26      	ldr	r3, [pc, #152]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	609a      	str	r2, [r3, #8]
 8007362:	4b24      	ldr	r3, [pc, #144]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	6892      	ldr	r2, [r2, #8]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	4b21      	ldr	r3, [pc, #132]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	3204      	adds	r2, #4
 8007376:	605a      	str	r2, [r3, #4]
 8007378:	4b1e      	ldr	r3, [pc, #120]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	1d1a      	adds	r2, r3, #4
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	609a      	str	r2, [r3, #8]
 8007382:	4b1c      	ldr	r3, [pc, #112]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1d      	ldr	r2, [pc, #116]	@ (80073fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007388:	615a      	str	r2, [r3, #20]
 800738a:	4b1c      	ldr	r3, [pc, #112]	@ (80073fc <prvAddCurrentTaskToDelayedList+0xf0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	4a1a      	ldr	r2, [pc, #104]	@ (80073fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007396:	e026      	b.n	80073e6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073a0:	4b14      	ldr	r3, [pc, #80]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d209      	bcs.n	80073c4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b0:	4b13      	ldr	r3, [pc, #76]	@ (8007400 <prvAddCurrentTaskToDelayedList+0xf4>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fd feb8 	bl	8005132 <vListInsert>
}
 80073c2:	e010      	b.n	80073e6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <prvAddCurrentTaskToDelayedList+0xf8>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	4b0a      	ldr	r3, [pc, #40]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fd feae 	bl	8005132 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80073d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <prvAddCurrentTaskToDelayedList+0xfc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d202      	bcs.n	80073e6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80073e0:	4a09      	ldr	r2, [pc, #36]	@ (8007408 <prvAddCurrentTaskToDelayedList+0xfc>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6013      	str	r3, [r2, #0]
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000338 	.word	0x20000338
 80073f4:	2000025c 	.word	0x2000025c
 80073f8:	2000033c 	.word	0x2000033c
 80073fc:	20000320 	.word	0x20000320
 8007400:	200002f0 	.word	0x200002f0
 8007404:	200002ec 	.word	0x200002ec
 8007408:	20000354 	.word	0x20000354

0800740c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007416:	f000 faf7 	bl	8007a08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <xTimerCreateTimerTask+0x58>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007422:	4b11      	ldr	r3, [pc, #68]	@ (8007468 <xTimerCreateTimerTask+0x5c>)
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	2302      	movs	r3, #2
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	2300      	movs	r3, #0
 800742c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007430:	490e      	ldr	r1, [pc, #56]	@ (800746c <xTimerCreateTimerTask+0x60>)
 8007432:	480f      	ldr	r0, [pc, #60]	@ (8007470 <xTimerCreateTimerTask+0x64>)
 8007434:	f7fe fcf2 	bl	8005e1c <xTaskCreate>
 8007438:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	603b      	str	r3, [r7, #0]
    }
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007458:	687b      	ldr	r3, [r7, #4]
    }
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000390 	.word	0x20000390
 8007468:	20000394 	.word	0x20000394
 800746c:	080099c4 	.word	0x080099c4
 8007470:	08007669 	.word	0x08007669

08007474 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007482:	202c      	movs	r0, #44	@ 0x2c
 8007484:	f000 fd54 	bl	8007f30 <pvPortMalloc>
 8007488:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f805 	bl	80074b6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80074ac:	697b      	ldr	r3, [r7, #20]
        }
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b086      	sub	sp, #24
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	617b      	str	r3, [r7, #20]
    }
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80074e2:	f000 fa91 	bl	8007a08 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	6a3a      	ldr	r2, [r7, #32]
 80074fc:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	3304      	adds	r3, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fde4 	bl	80050d0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007514:	f043 0304 	orr.w	r3, r3, #4
 8007518:	b2da      	uxtb	r2, r3
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007520:	bf00      	nop
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	@ 0x28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007536:	2300      	movs	r3, #0
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10b      	bne.n	8007558 <xTimerGenericCommand+0x30>
        __asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
    }
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007558:	4b19      	ldr	r3, [pc, #100]	@ (80075c0 <xTimerGenericCommand+0x98>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d02a      	beq.n	80075b6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b05      	cmp	r3, #5
 8007570:	dc18      	bgt.n	80075a4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007572:	f7ff fb2b 	bl	8006bcc <xTaskGetSchedulerState>
 8007576:	4603      	mov	r3, r0
 8007578:	2b02      	cmp	r3, #2
 800757a:	d109      	bne.n	8007590 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800757c:	4b10      	ldr	r3, [pc, #64]	@ (80075c0 <xTimerGenericCommand+0x98>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	f107 0114 	add.w	r1, r7, #20
 8007584:	2300      	movs	r3, #0
 8007586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007588:	f7fd ff3a 	bl	8005400 <xQueueGenericSend>
 800758c:	6278      	str	r0, [r7, #36]	@ 0x24
 800758e:	e012      	b.n	80075b6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007590:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <xTimerGenericCommand+0x98>)
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	f107 0114 	add.w	r1, r7, #20
 8007598:	2300      	movs	r3, #0
 800759a:	2200      	movs	r2, #0
 800759c:	f7fd ff30 	bl	8005400 <xQueueGenericSend>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80075a2:	e008      	b.n	80075b6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075a4:	4b06      	ldr	r3, [pc, #24]	@ (80075c0 <xTimerGenericCommand+0x98>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	f107 0114 	add.w	r1, r7, #20
 80075ac:	2300      	movs	r3, #0
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	f7fe f828 	bl	8005604 <xQueueGenericSendFromISR>
 80075b4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80075b8:	4618      	mov	r0, r3
 80075ba:	3728      	adds	r7, #40	@ 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000390 	.word	0x20000390

080075c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80075d0:	e008      	b.n	80075e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4413      	add	r3, r2
 80075da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	18d1      	adds	r1, r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f8df 	bl	80077b4 <prvInsertTimerInActiveList>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1ea      	bne.n	80075d2 <prvReloadTimer+0xe>
        }
    }
 80075fc:	bf00      	nop
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007612:	4b14      	ldr	r3, [pc, #80]	@ (8007664 <prvProcessExpiredTimer+0x5c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3304      	adds	r3, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f7fd fdbf 	bl	80051a4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff ffc3 	bl	80075c4 <prvReloadTimer>
 800763e:	e008      	b.n	8007652 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	4798      	blx	r3
    }
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000388 	.word	0x20000388

08007668 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007670:	f107 0308 	add.w	r3, r7, #8
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f859 	bl	800772c <prvGetNextExpireTime>
 800767a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f805 	bl	8007690 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007686:	f000 f8d7 	bl	8007838 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800768a:	bf00      	nop
 800768c:	e7f0      	b.n	8007670 <prvTimerTask+0x8>
	...

08007690 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800769a:	f7fe fd7d 	bl	8006198 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f866 	bl	8007774 <prvSampleTimeNow>
 80076a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d130      	bne.n	8007712 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d806      	bhi.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80076be:	f7fe fd79 	bl	80061b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff9f 	bl	8007608 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80076ca:	e024      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076d2:	4b13      	ldr	r3, [pc, #76]	@ (8007720 <prvProcessTimerOrBlockTask+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <prvProcessTimerOrBlockTask+0x50>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <prvProcessTimerOrBlockTask+0x52>
 80076e0:	2300      	movs	r3, #0
 80076e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <prvProcessTimerOrBlockTask+0x94>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f7fe fb5f 	bl	8005db4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80076f6:	f7fe fd5d 	bl	80061b4 <xTaskResumeAll>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007700:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <prvProcessTimerOrBlockTask+0x98>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
    }
 8007710:	e001      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007712:	f7fe fd4f 	bl	80061b4 <xTaskResumeAll>
    }
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	2000038c 	.word	0x2000038c
 8007724:	20000390 	.word	0x20000390
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007734:	4b0e      	ldr	r3, [pc, #56]	@ (8007770 <prvGetNextExpireTime+0x44>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <prvGetNextExpireTime+0x16>
 800773e:	2201      	movs	r2, #1
 8007740:	e000      	b.n	8007744 <prvGetNextExpireTime+0x18>
 8007742:	2200      	movs	r2, #0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <prvGetNextExpireTime+0x44>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e001      	b.n	8007760 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007760:	68fb      	ldr	r3, [r7, #12]
    }
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000388 	.word	0x20000388

08007774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800777c:	f7fe fe16 	bl	80063ac <xTaskGetTickCount>
 8007780:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007782:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <prvSampleTimeNow+0x3c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	429a      	cmp	r2, r3
 800778a:	d205      	bcs.n	8007798 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800778c:	f000 f916 	bl	80079bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e002      	b.n	800779e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800779e:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <prvSampleTimeNow+0x3c>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80077a4:	68fb      	ldr	r3, [r7, #12]
    }
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000398 	.word	0x20000398

080077b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d812      	bhi.n	8007800 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e01b      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <prvInsertTimerInActiveList+0x7c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fd fc9a 	bl	8005132 <vListInsert>
 80077fe:	e012      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d206      	bcs.n	8007816 <prvInsertTimerInActiveList+0x62>
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d302      	bcc.n	8007816 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e007      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007816:	4b07      	ldr	r3, [pc, #28]	@ (8007834 <prvInsertTimerInActiveList+0x80>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fd fc86 	bl	8005132 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007826:	697b      	ldr	r3, [r7, #20]
    }
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	2000038c 	.word	0x2000038c
 8007834:	20000388 	.word	0x20000388

08007838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783e:	e0a9      	b.n	8007994 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f2c0 80a6 	blt.w	8007994 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3304      	adds	r3, #4
 8007858:	4618      	mov	r0, r3
 800785a:	f7fd fca3 	bl	80051a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff ff87 	bl	8007774 <prvSampleTimeNow>
 8007866:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	3b01      	subs	r3, #1
 800786c:	2b08      	cmp	r3, #8
 800786e:	f200 808e 	bhi.w	800798e <prvProcessReceivedCommands+0x156>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <prvProcessReceivedCommands+0x40>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	0800789d 	.word	0x0800789d
 800787c:	0800789d 	.word	0x0800789d
 8007880:	08007905 	.word	0x08007905
 8007884:	08007919 	.word	0x08007919
 8007888:	08007965 	.word	0x08007965
 800788c:	0800789d 	.word	0x0800789d
 8007890:	0800789d 	.word	0x0800789d
 8007894:	08007905 	.word	0x08007905
 8007898:	08007919 	.word	0x08007919
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078a2:	f043 0301 	orr.w	r3, r3, #1
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	18d1      	adds	r1, r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	69f8      	ldr	r0, [r7, #28]
 80078bc:	f7ff ff7a 	bl	80077b4 <prvInsertTimerInActiveList>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d065      	beq.n	8007992 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	4413      	add	r3, r2
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4619      	mov	r1, r3
 80078e0:	69f8      	ldr	r0, [r7, #28]
 80078e2:	f7ff fe6f 	bl	80075c4 <prvReloadTimer>
 80078e6:	e008      	b.n	80078fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	69f8      	ldr	r0, [r7, #28]
 8007900:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007902:	e046      	b.n	8007992 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800790a:	f023 0301 	bic.w	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007916:	e03d      	b.n	8007994 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800791e:	f043 0301 	orr.w	r3, r3, #1
 8007922:	b2da      	uxtb	r2, r3
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	617b      	str	r3, [r7, #20]
    }
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	e7fd      	b.n	800794c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	18d1      	adds	r1, r2, r3
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	69f8      	ldr	r0, [r7, #28]
 800795e:	f7ff ff29 	bl	80077b4 <prvInsertTimerInActiveList>
                        break;
 8007962:	e017      	b.n	8007994 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d103      	bne.n	800797a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8007972:	69f8      	ldr	r0, [r7, #28]
 8007974:	f000 fb98 	bl	80080a8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007978:	e00c      	b.n	8007994 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007980:	f023 0301 	bic.w	r3, r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800798c:	e002      	b.n	8007994 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <prvProcessReceivedCommands+0x15c>
                        break;
 8007992:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007994:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <prvProcessReceivedCommands+0x180>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f107 0108 	add.w	r1, r7, #8
 800799c:	2200      	movs	r2, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fd fee6 	bl	8005770 <xQueueReceive>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f47f af4a 	bne.w	8007840 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000390 	.word	0x20000390

080079bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079c2:	e009      	b.n	80079d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a00 <prvSwitchTimerLists+0x44>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80079ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80079d2:	6838      	ldr	r0, [r7, #0]
 80079d4:	f7ff fe18 	bl	8007608 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079d8:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <prvSwitchTimerLists+0x44>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f0      	bne.n	80079c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80079e2:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <prvSwitchTimerLists+0x44>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80079e8:	4b06      	ldr	r3, [pc, #24]	@ (8007a04 <prvSwitchTimerLists+0x48>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a04      	ldr	r2, [pc, #16]	@ (8007a00 <prvSwitchTimerLists+0x44>)
 80079ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80079f0:	4a04      	ldr	r2, [pc, #16]	@ (8007a04 <prvSwitchTimerLists+0x48>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6013      	str	r3, [r2, #0]
    }
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000388 	.word	0x20000388
 8007a04:	2000038c 	.word	0x2000038c

08007a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007a0c:	f000 f966 	bl	8007cdc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007a10:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <prvCheckForValidListAndQueue+0x54>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11d      	bne.n	8007a54 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007a18:	4811      	ldr	r0, [pc, #68]	@ (8007a60 <prvCheckForValidListAndQueue+0x58>)
 8007a1a:	f7fd fb39 	bl	8005090 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007a1e:	4811      	ldr	r0, [pc, #68]	@ (8007a64 <prvCheckForValidListAndQueue+0x5c>)
 8007a20:	f7fd fb36 	bl	8005090 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007a24:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a26:	4a0e      	ldr	r2, [pc, #56]	@ (8007a60 <prvCheckForValidListAndQueue+0x58>)
 8007a28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007a2a:	4b10      	ldr	r3, [pc, #64]	@ (8007a6c <prvCheckForValidListAndQueue+0x64>)
 8007a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a64 <prvCheckForValidListAndQueue+0x5c>)
 8007a2e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007a30:	2200      	movs	r2, #0
 8007a32:	210c      	movs	r1, #12
 8007a34:	200a      	movs	r0, #10
 8007a36:	f7fd fc71 	bl	800531c <xQueueGenericCreate>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4a07      	ldr	r2, [pc, #28]	@ (8007a5c <prvCheckForValidListAndQueue+0x54>)
 8007a3e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007a40:	4b06      	ldr	r3, [pc, #24]	@ (8007a5c <prvCheckForValidListAndQueue+0x54>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a48:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <prvCheckForValidListAndQueue+0x54>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4908      	ldr	r1, [pc, #32]	@ (8007a70 <prvCheckForValidListAndQueue+0x68>)
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe f960 	bl	8005d14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007a54:	f000 f974 	bl	8007d40 <vPortExitCritical>
    }
 8007a58:	bf00      	nop
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000390 	.word	0x20000390
 8007a60:	20000360 	.word	0x20000360
 8007a64:	20000374 	.word	0x20000374
 8007a68:	20000388 	.word	0x20000388
 8007a6c:	2000038c 	.word	0x2000038c
 8007a70:	080099cc 	.word	0x080099cc

08007a74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3b04      	subs	r3, #4
 8007a84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3b04      	subs	r3, #4
 8007a92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3b04      	subs	r3, #4
 8007aa2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad8 <pxPortInitialiseStack+0x64>)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3b14      	subs	r3, #20
 8007aae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3b04      	subs	r3, #4
 8007aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f06f 0202 	mvn.w	r2, #2
 8007ac2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3b20      	subs	r3, #32
 8007ac8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	08007add 	.word	0x08007add

08007adc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007ae6:	4b13      	ldr	r3, [pc, #76]	@ (8007b34 <prvTaskExitError+0x58>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aee:	d00b      	beq.n	8007b08 <prvTaskExitError+0x2c>
        __asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	60fb      	str	r3, [r7, #12]
    }
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <prvTaskExitError+0x28>
        __asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60bb      	str	r3, [r7, #8]
    }
 8007b1a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007b1c:	bf00      	nop
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0fc      	beq.n	8007b1e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000030 	.word	0x20000030
	...

08007b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007b40:	4b07      	ldr	r3, [pc, #28]	@ (8007b60 <pxCurrentTCBConst2>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	f380 8809 	msr	PSP, r0
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8811 	msr	BASEPRI, r0
 8007b5a:	4770      	bx	lr
 8007b5c:	f3af 8000 	nop.w

08007b60 <pxCurrentTCBConst2>:
 8007b60:	2000025c 	.word	0x2000025c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop

08007b68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007b68:	4808      	ldr	r0, [pc, #32]	@ (8007b8c <prvPortStartFirstTask+0x24>)
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	f380 8808 	msr	MSP, r0
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8814 	msr	CONTROL, r0
 8007b7a:	b662      	cpsie	i
 8007b7c:	b661      	cpsie	f
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	df00      	svc	0
 8007b88:	bf00      	nop
 8007b8a:	0000      	.short	0x0000
 8007b8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop

08007b94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b9a:	4b47      	ldr	r3, [pc, #284]	@ (8007cb8 <xPortStartScheduler+0x124>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a47      	ldr	r2, [pc, #284]	@ (8007cbc <xPortStartScheduler+0x128>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d10b      	bne.n	8007bbc <xPortStartScheduler+0x28>
        __asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	613b      	str	r3, [r7, #16]
    }
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb8 <xPortStartScheduler+0x124>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8007cc0 <xPortStartScheduler+0x12c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d10b      	bne.n	8007bde <xPortStartScheduler+0x4a>
        __asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60fb      	str	r3, [r7, #12]
    }
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bde:	4b39      	ldr	r3, [pc, #228]	@ (8007cc4 <xPortStartScheduler+0x130>)
 8007be0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	22ff      	movs	r2, #255	@ 0xff
 8007bee:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	4b31      	ldr	r3, [pc, #196]	@ (8007cc8 <xPortStartScheduler+0x134>)
 8007c04:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c06:	4b31      	ldr	r3, [pc, #196]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c08:	2207      	movs	r2, #7
 8007c0a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c0c:	e009      	b.n	8007c22 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8007c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	4a2d      	ldr	r2, [pc, #180]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c16:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d0ef      	beq.n	8007c0e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c2e:	4b27      	ldr	r3, [pc, #156]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f1c3 0307 	rsb	r3, r3, #7
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d00b      	beq.n	8007c52 <xPortStartScheduler+0xbe>
        __asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	60bb      	str	r3, [r7, #8]
    }
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c52:	4b1e      	ldr	r3, [pc, #120]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c5a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c64:	4a19      	ldr	r2, [pc, #100]	@ (8007ccc <xPortStartScheduler+0x138>)
 8007c66:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007c70:	4b17      	ldr	r3, [pc, #92]	@ (8007cd0 <xPortStartScheduler+0x13c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a16      	ldr	r2, [pc, #88]	@ (8007cd0 <xPortStartScheduler+0x13c>)
 8007c76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007c7c:	4b14      	ldr	r3, [pc, #80]	@ (8007cd0 <xPortStartScheduler+0x13c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a13      	ldr	r2, [pc, #76]	@ (8007cd0 <xPortStartScheduler+0x13c>)
 8007c82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007c88:	f000 f8e0 	bl	8007e4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007c8c:	4b11      	ldr	r3, [pc, #68]	@ (8007cd4 <xPortStartScheduler+0x140>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007c92:	f000 f8ff 	bl	8007e94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c96:	4b10      	ldr	r3, [pc, #64]	@ (8007cd8 <xPortStartScheduler+0x144>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8007cd8 <xPortStartScheduler+0x144>)
 8007c9c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007ca0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007ca2:	f7ff ff61 	bl	8007b68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007ca6:	f7fe fcb5 	bl	8006614 <vTaskSwitchContext>
    prvTaskExitError();
 8007caa:	f7ff ff17 	bl	8007adc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed00 	.word	0xe000ed00
 8007cbc:	410fc271 	.word	0x410fc271
 8007cc0:	410fc270 	.word	0x410fc270
 8007cc4:	e000e400 	.word	0xe000e400
 8007cc8:	2000039c 	.word	0x2000039c
 8007ccc:	200003a0 	.word	0x200003a0
 8007cd0:	e000ed20 	.word	0xe000ed20
 8007cd4:	20000030 	.word	0x20000030
 8007cd8:	e000ef34 	.word	0xe000ef34

08007cdc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
        __asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	607b      	str	r3, [r7, #4]
    }
 8007cf4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007cf6:	4b10      	ldr	r3, [pc, #64]	@ (8007d38 <vPortEnterCritical+0x5c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8007d38 <vPortEnterCritical+0x5c>)
 8007cfe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007d00:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <vPortEnterCritical+0x5c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d110      	bne.n	8007d2a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d08:	4b0c      	ldr	r3, [pc, #48]	@ (8007d3c <vPortEnterCritical+0x60>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <vPortEnterCritical+0x4e>
        __asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	603b      	str	r3, [r7, #0]
    }
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <vPortEnterCritical+0x4a>
    }
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000030 	.word	0x20000030
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007d46:	4b12      	ldr	r3, [pc, #72]	@ (8007d90 <vPortExitCritical+0x50>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <vPortExitCritical+0x26>
        __asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
    }
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007d66:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <vPortExitCritical+0x50>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	4a08      	ldr	r2, [pc, #32]	@ (8007d90 <vPortExitCritical+0x50>)
 8007d6e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007d70:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <vPortExitCritical+0x50>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <vPortExitCritical+0x44>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f383 8811 	msr	BASEPRI, r3
    }
 8007d82:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20000030 	.word	0x20000030
	...

08007da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007da0:	f3ef 8009 	mrs	r0, PSP
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <pxCurrentTCBConst>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	f01e 0f10 	tst.w	lr, #16
 8007db0:	bf08      	it	eq
 8007db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dba:	6010      	str	r0, [r2, #0]
 8007dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007dc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007dc4:	f380 8811 	msr	BASEPRI, r0
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f7fe fc20 	bl	8006614 <vTaskSwitchContext>
 8007dd4:	f04f 0000 	mov.w	r0, #0
 8007dd8:	f380 8811 	msr	BASEPRI, r0
 8007ddc:	bc09      	pop	{r0, r3}
 8007dde:	6819      	ldr	r1, [r3, #0]
 8007de0:	6808      	ldr	r0, [r1, #0]
 8007de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de6:	f01e 0f10 	tst.w	lr, #16
 8007dea:	bf08      	it	eq
 8007dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007df0:	f380 8809 	msr	PSP, r0
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	f3af 8000 	nop.w

08007e00 <pxCurrentTCBConst>:
 8007e00:	2000025c 	.word	0x2000025c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
        __asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
    }
 8007e20:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007e22:	f7fe fadf 	bl	80063e4 <xTaskIncrementTick>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e2c:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <SysTick_Handler+0x40>)
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f383 8811 	msr	BASEPRI, r3
    }
 8007e3e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e50:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <vPortSetupTimerInterrupt+0x34>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e56:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <vPortSetupTimerInterrupt+0x38>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e88 <vPortSetupTimerInterrupt+0x3c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a0a      	ldr	r2, [pc, #40]	@ (8007e8c <vPortSetupTimerInterrupt+0x40>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	4a09      	ldr	r2, [pc, #36]	@ (8007e90 <vPortSetupTimerInterrupt+0x44>)
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e6e:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <vPortSetupTimerInterrupt+0x34>)
 8007e70:	2207      	movs	r2, #7
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	e000e010 	.word	0xe000e010
 8007e84:	e000e018 	.word	0xe000e018
 8007e88:	2000001c 	.word	0x2000001c
 8007e8c:	10624dd3 	.word	0x10624dd3
 8007e90:	e000e014 	.word	0xe000e014

08007e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007e94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ea4 <vPortEnableVFP+0x10>
 8007e98:	6801      	ldr	r1, [r0, #0]
 8007e9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e9e:	6001      	str	r1, [r0, #0]
 8007ea0:	4770      	bx	lr
 8007ea2:	0000      	.short	0x0000
 8007ea4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop

08007eac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007eb2:	f3ef 8305 	mrs	r3, IPSR
 8007eb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b0f      	cmp	r3, #15
 8007ebc:	d915      	bls.n	8007eea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ebe:	4a18      	ldr	r2, [pc, #96]	@ (8007f20 <vPortValidateInterruptPriority+0x74>)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ec8:	4b16      	ldr	r3, [pc, #88]	@ (8007f24 <vPortValidateInterruptPriority+0x78>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	7afa      	ldrb	r2, [r7, #11]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d20b      	bcs.n	8007eea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	607b      	str	r3, [r7, #4]
    }
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop
 8007ee8:	e7fd      	b.n	8007ee6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eea:	4b0f      	ldr	r3, [pc, #60]	@ (8007f28 <vPortValidateInterruptPriority+0x7c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <vPortValidateInterruptPriority+0x80>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d90b      	bls.n	8007f12 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	603b      	str	r3, [r7, #0]
    }
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <vPortValidateInterruptPriority+0x62>
    }
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e3f0 	.word	0xe000e3f0
 8007f24:	2000039c 	.word	0x2000039c
 8007f28:	e000ed0c 	.word	0xe000ed0c
 8007f2c:	200003a0 	.word	0x200003a0

08007f30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	@ 0x28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007f3c:	f7fe f92c 	bl	8006198 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007f40:	4b54      	ldr	r3, [pc, #336]	@ (8008094 <pvPortMalloc+0x164>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007f48:	f000 f90c 	bl	8008164 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d012      	beq.n	8007f78 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007f52:	2208      	movs	r2, #8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	43db      	mvns	r3, r3
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d804      	bhi.n	8007f74 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	4413      	add	r3, r2
 8007f70:	607b      	str	r3, [r7, #4]
 8007f72:	e001      	b.n	8007f78 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	db71      	blt.n	8008062 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d06e      	beq.n	8008062 <pvPortMalloc+0x132>
 8007f84:	4b44      	ldr	r3, [pc, #272]	@ (8008098 <pvPortMalloc+0x168>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d869      	bhi.n	8008062 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007f8e:	4b43      	ldr	r3, [pc, #268]	@ (800809c <pvPortMalloc+0x16c>)
 8007f90:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007f92:	4b42      	ldr	r3, [pc, #264]	@ (800809c <pvPortMalloc+0x16c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f98:	e004      	b.n	8007fa4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <pvPortMalloc+0x86>
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1f1      	bne.n	8007f9a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007fb6:	4b37      	ldr	r3, [pc, #220]	@ (8008094 <pvPortMalloc+0x164>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d050      	beq.n	8008062 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	4413      	add	r3, r2
 8007fc8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	1ad2      	subs	r2, r2, r3
 8007fda:	2308      	movs	r3, #8
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d920      	bls.n	8008024 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <pvPortMalloc+0xdc>
        __asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	613b      	str	r3, [r7, #16]
    }
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	1ad2      	subs	r2, r2, r3
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f000 f8fc 	bl	800821c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008024:	4b1c      	ldr	r3, [pc, #112]	@ (8008098 <pvPortMalloc+0x168>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	4a1a      	ldr	r2, [pc, #104]	@ (8008098 <pvPortMalloc+0x168>)
 8008030:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008032:	4b19      	ldr	r3, [pc, #100]	@ (8008098 <pvPortMalloc+0x168>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <pvPortMalloc+0x170>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d203      	bcs.n	8008046 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800803e:	4b16      	ldr	r3, [pc, #88]	@ (8008098 <pvPortMalloc+0x168>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a17      	ldr	r2, [pc, #92]	@ (80080a0 <pvPortMalloc+0x170>)
 8008044:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008058:	4b12      	ldr	r3, [pc, #72]	@ (80080a4 <pvPortMalloc+0x174>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a11      	ldr	r2, [pc, #68]	@ (80080a4 <pvPortMalloc+0x174>)
 8008060:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008062:	f7fe f8a7 	bl	80061b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <pvPortMalloc+0x158>
        __asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
    }
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <pvPortMalloc+0x154>
    return pvReturn;
 8008088:	69fb      	ldr	r3, [r7, #28]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3728      	adds	r7, #40	@ 0x28
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20012fac 	.word	0x20012fac
 8008098:	20012fb0 	.word	0x20012fb0
 800809c:	20012fa4 	.word	0x20012fa4
 80080a0:	20012fb4 	.word	0x20012fb4
 80080a4:	20012fb8 	.word	0x20012fb8

080080a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d04b      	beq.n	8008152 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80080ba:	2308      	movs	r3, #8
 80080bc:	425b      	negs	r3, r3
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4413      	add	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	db0b      	blt.n	80080e8 <vPortFree+0x40>
        __asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
    }
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	e7fd      	b.n	80080e4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <vPortFree+0x60>
        __asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60bb      	str	r3, [r7, #8]
    }
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	e7fd      	b.n	8008104 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	0fdb      	lsrs	r3, r3, #31
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01c      	beq.n	8008152 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d118      	bne.n	8008152 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800812c:	f7fe f834 	bl	8006198 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	4b09      	ldr	r3, [pc, #36]	@ (800815c <vPortFree+0xb4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4413      	add	r3, r2
 800813a:	4a08      	ldr	r2, [pc, #32]	@ (800815c <vPortFree+0xb4>)
 800813c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800813e:	6938      	ldr	r0, [r7, #16]
 8008140:	f000 f86c 	bl	800821c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008144:	4b06      	ldr	r3, [pc, #24]	@ (8008160 <vPortFree+0xb8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3301      	adds	r3, #1
 800814a:	4a05      	ldr	r2, [pc, #20]	@ (8008160 <vPortFree+0xb8>)
 800814c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800814e:	f7fe f831 	bl	80061b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008152:	bf00      	nop
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20012fb0 	.word	0x20012fb0
 8008160:	20012fbc 	.word	0x20012fbc

08008164 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800816a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800816e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008170:	4b25      	ldr	r3, [pc, #148]	@ (8008208 <prvHeapInit+0xa4>)
 8008172:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00c      	beq.n	8008198 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3307      	adds	r3, #7
 8008182:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <prvHeapInit+0xa4>)
 8008194:	4413      	add	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800819c:	4a1b      	ldr	r2, [pc, #108]	@ (800820c <prvHeapInit+0xa8>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80081a2:	4b1a      	ldr	r3, [pc, #104]	@ (800820c <prvHeapInit+0xa8>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80081b0:	2208      	movs	r2, #8
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	1a9b      	subs	r3, r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a13      	ldr	r2, [pc, #76]	@ (8008210 <prvHeapInit+0xac>)
 80081c4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80081c6:	4b12      	ldr	r3, [pc, #72]	@ (8008210 <prvHeapInit+0xac>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80081ce:	4b10      	ldr	r3, [pc, #64]	@ (8008210 <prvHeapInit+0xac>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <prvHeapInit+0xac>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4a08      	ldr	r2, [pc, #32]	@ (8008214 <prvHeapInit+0xb0>)
 80081f2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	4a07      	ldr	r2, [pc, #28]	@ (8008218 <prvHeapInit+0xb4>)
 80081fa:	6013      	str	r3, [r2, #0]
}
 80081fc:	bf00      	nop
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	200003a4 	.word	0x200003a4
 800820c:	20012fa4 	.word	0x20012fa4
 8008210:	20012fac 	.word	0x20012fac
 8008214:	20012fb4 	.word	0x20012fb4
 8008218:	20012fb0 	.word	0x20012fb0

0800821c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008224:	4b28      	ldr	r3, [pc, #160]	@ (80082c8 <prvInsertBlockIntoFreeList+0xac>)
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e002      	b.n	8008230 <prvInsertBlockIntoFreeList+0x14>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d8f7      	bhi.n	800822a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d108      	bne.n	800825e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	441a      	add	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d118      	bne.n	80082a4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b15      	ldr	r3, [pc, #84]	@ (80082cc <prvInsertBlockIntoFreeList+0xb0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d00d      	beq.n	800829a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	441a      	add	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e008      	b.n	80082ac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800829a:	4b0c      	ldr	r3, [pc, #48]	@ (80082cc <prvInsertBlockIntoFreeList+0xb0>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e003      	b.n	80082ac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d002      	beq.n	80082ba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	20012fa4 	.word	0x20012fa4
 80082cc:	20012fac 	.word	0x20012fac

080082d0 <siprintf>:
 80082d0:	b40e      	push	{r1, r2, r3}
 80082d2:	b500      	push	{lr}
 80082d4:	b09c      	sub	sp, #112	@ 0x70
 80082d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80082d8:	9002      	str	r0, [sp, #8]
 80082da:	9006      	str	r0, [sp, #24]
 80082dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80082e0:	4809      	ldr	r0, [pc, #36]	@ (8008308 <siprintf+0x38>)
 80082e2:	9107      	str	r1, [sp, #28]
 80082e4:	9104      	str	r1, [sp, #16]
 80082e6:	4909      	ldr	r1, [pc, #36]	@ (800830c <siprintf+0x3c>)
 80082e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ec:	9105      	str	r1, [sp, #20]
 80082ee:	6800      	ldr	r0, [r0, #0]
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	a902      	add	r1, sp, #8
 80082f4:	f000 f920 	bl	8008538 <_svfiprintf_r>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	b01c      	add	sp, #112	@ 0x70
 8008300:	f85d eb04 	ldr.w	lr, [sp], #4
 8008304:	b003      	add	sp, #12
 8008306:	4770      	bx	lr
 8008308:	20000034 	.word	0x20000034
 800830c:	ffff0208 	.word	0xffff0208

08008310 <siscanf>:
 8008310:	b40e      	push	{r1, r2, r3}
 8008312:	b530      	push	{r4, r5, lr}
 8008314:	b09c      	sub	sp, #112	@ 0x70
 8008316:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008318:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800831c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008320:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008324:	9002      	str	r0, [sp, #8]
 8008326:	9006      	str	r0, [sp, #24]
 8008328:	f7f7 ff5a 	bl	80001e0 <strlen>
 800832c:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <siscanf+0x4c>)
 800832e:	9003      	str	r0, [sp, #12]
 8008330:	9007      	str	r0, [sp, #28]
 8008332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008334:	480a      	ldr	r0, [pc, #40]	@ (8008360 <siscanf+0x50>)
 8008336:	9401      	str	r4, [sp, #4]
 8008338:	2300      	movs	r3, #0
 800833a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800833c:	9314      	str	r3, [sp, #80]	@ 0x50
 800833e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008342:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008346:	462a      	mov	r2, r5
 8008348:	4623      	mov	r3, r4
 800834a:	a902      	add	r1, sp, #8
 800834c:	6800      	ldr	r0, [r0, #0]
 800834e:	f000 fa47 	bl	80087e0 <__ssvfiscanf_r>
 8008352:	b01c      	add	sp, #112	@ 0x70
 8008354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	08008365 	.word	0x08008365
 8008360:	20000034 	.word	0x20000034

08008364 <__seofread>:
 8008364:	2000      	movs	r0, #0
 8008366:	4770      	bx	lr

08008368 <memset>:
 8008368:	4402      	add	r2, r0
 800836a:	4603      	mov	r3, r0
 800836c:	4293      	cmp	r3, r2
 800836e:	d100      	bne.n	8008372 <memset+0xa>
 8008370:	4770      	bx	lr
 8008372:	f803 1b01 	strb.w	r1, [r3], #1
 8008376:	e7f9      	b.n	800836c <memset+0x4>

08008378 <__errno>:
 8008378:	4b01      	ldr	r3, [pc, #4]	@ (8008380 <__errno+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000034 	.word	0x20000034

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4d0d      	ldr	r5, [pc, #52]	@ (80083bc <__libc_init_array+0x38>)
 8008388:	4c0d      	ldr	r4, [pc, #52]	@ (80083c0 <__libc_init_array+0x3c>)
 800838a:	1b64      	subs	r4, r4, r5
 800838c:	10a4      	asrs	r4, r4, #2
 800838e:	2600      	movs	r6, #0
 8008390:	42a6      	cmp	r6, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	4d0b      	ldr	r5, [pc, #44]	@ (80083c4 <__libc_init_array+0x40>)
 8008396:	4c0c      	ldr	r4, [pc, #48]	@ (80083c8 <__libc_init_array+0x44>)
 8008398:	f001 f8e0 	bl	800955c <_init>
 800839c:	1b64      	subs	r4, r4, r5
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	2600      	movs	r6, #0
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ac:	4798      	blx	r3
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b6:	4798      	blx	r3
 80083b8:	3601      	adds	r6, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	08009b50 	.word	0x08009b50
 80083c0:	08009b50 	.word	0x08009b50
 80083c4:	08009b50 	.word	0x08009b50
 80083c8:	08009b54 	.word	0x08009b54

080083cc <__retarget_lock_acquire_recursive>:
 80083cc:	4770      	bx	lr

080083ce <__retarget_lock_release_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <_free_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4605      	mov	r5, r0
 80083f0:	2900      	cmp	r1, #0
 80083f2:	d041      	beq.n	8008478 <_free_r+0x8c>
 80083f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f8:	1f0c      	subs	r4, r1, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bfb8      	it	lt
 80083fe:	18e4      	addlt	r4, r4, r3
 8008400:	f000 ff1a 	bl	8009238 <__malloc_lock>
 8008404:	4a1d      	ldr	r2, [pc, #116]	@ (800847c <_free_r+0x90>)
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	b933      	cbnz	r3, 8008418 <_free_r+0x2c>
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	4628      	mov	r0, r5
 8008410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008414:	f000 bf16 	b.w	8009244 <__malloc_unlock>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d908      	bls.n	800842e <_free_r+0x42>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	1821      	adds	r1, r4, r0
 8008420:	428b      	cmp	r3, r1
 8008422:	bf01      	itttt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	1809      	addeq	r1, r1, r0
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	e7ed      	b.n	800840a <_free_r+0x1e>
 800842e:	461a      	mov	r2, r3
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b10b      	cbz	r3, 8008438 <_free_r+0x4c>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x42>
 8008438:	6811      	ldr	r1, [r2, #0]
 800843a:	1850      	adds	r0, r2, r1
 800843c:	42a0      	cmp	r0, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x6c>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	4401      	add	r1, r0
 8008444:	1850      	adds	r0, r2, r1
 8008446:	4283      	cmp	r3, r0
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	d1e0      	bne.n	800840e <_free_r+0x22>
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	6053      	str	r3, [r2, #4]
 8008452:	4408      	add	r0, r1
 8008454:	6010      	str	r0, [r2, #0]
 8008456:	e7da      	b.n	800840e <_free_r+0x22>
 8008458:	d902      	bls.n	8008460 <_free_r+0x74>
 800845a:	230c      	movs	r3, #12
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	e7d6      	b.n	800840e <_free_r+0x22>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428b      	cmp	r3, r1
 8008466:	bf04      	itt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1809      	addeq	r1, r1, r0
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	6054      	str	r4, [r2, #4]
 8008476:	e7ca      	b.n	800840e <_free_r+0x22>
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	20013104 	.word	0x20013104

08008480 <__ssputs_r>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	688e      	ldr	r6, [r1, #8]
 8008486:	461f      	mov	r7, r3
 8008488:	42be      	cmp	r6, r7
 800848a:	680b      	ldr	r3, [r1, #0]
 800848c:	4682      	mov	sl, r0
 800848e:	460c      	mov	r4, r1
 8008490:	4690      	mov	r8, r2
 8008492:	d82d      	bhi.n	80084f0 <__ssputs_r+0x70>
 8008494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800849c:	d026      	beq.n	80084ec <__ssputs_r+0x6c>
 800849e:	6965      	ldr	r5, [r4, #20]
 80084a0:	6909      	ldr	r1, [r1, #16]
 80084a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084a6:	eba3 0901 	sub.w	r9, r3, r1
 80084aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ae:	1c7b      	adds	r3, r7, #1
 80084b0:	444b      	add	r3, r9
 80084b2:	106d      	asrs	r5, r5, #1
 80084b4:	429d      	cmp	r5, r3
 80084b6:	bf38      	it	cc
 80084b8:	461d      	movcc	r5, r3
 80084ba:	0553      	lsls	r3, r2, #21
 80084bc:	d527      	bpl.n	800850e <__ssputs_r+0x8e>
 80084be:	4629      	mov	r1, r5
 80084c0:	f000 fb24 	bl	8008b0c <_malloc_r>
 80084c4:	4606      	mov	r6, r0
 80084c6:	b360      	cbz	r0, 8008522 <__ssputs_r+0xa2>
 80084c8:	6921      	ldr	r1, [r4, #16]
 80084ca:	464a      	mov	r2, r9
 80084cc:	f7ff ff80 	bl	80083d0 <memcpy>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	6126      	str	r6, [r4, #16]
 80084de:	6165      	str	r5, [r4, #20]
 80084e0:	444e      	add	r6, r9
 80084e2:	eba5 0509 	sub.w	r5, r5, r9
 80084e6:	6026      	str	r6, [r4, #0]
 80084e8:	60a5      	str	r5, [r4, #8]
 80084ea:	463e      	mov	r6, r7
 80084ec:	42be      	cmp	r6, r7
 80084ee:	d900      	bls.n	80084f2 <__ssputs_r+0x72>
 80084f0:	463e      	mov	r6, r7
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	4632      	mov	r2, r6
 80084f6:	4641      	mov	r1, r8
 80084f8:	f000 fffe 	bl	80094f8 <memmove>
 80084fc:	68a3      	ldr	r3, [r4, #8]
 80084fe:	1b9b      	subs	r3, r3, r6
 8008500:	60a3      	str	r3, [r4, #8]
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	4433      	add	r3, r6
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	2000      	movs	r0, #0
 800850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850e:	462a      	mov	r2, r5
 8008510:	f000 fed8 	bl	80092c4 <_realloc_r>
 8008514:	4606      	mov	r6, r0
 8008516:	2800      	cmp	r0, #0
 8008518:	d1e0      	bne.n	80084dc <__ssputs_r+0x5c>
 800851a:	6921      	ldr	r1, [r4, #16]
 800851c:	4650      	mov	r0, sl
 800851e:	f7ff ff65 	bl	80083ec <_free_r>
 8008522:	230c      	movs	r3, #12
 8008524:	f8ca 3000 	str.w	r3, [sl]
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008534:	e7e9      	b.n	800850a <__ssputs_r+0x8a>
	...

08008538 <_svfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4698      	mov	r8, r3
 800853e:	898b      	ldrh	r3, [r1, #12]
 8008540:	061b      	lsls	r3, r3, #24
 8008542:	b09d      	sub	sp, #116	@ 0x74
 8008544:	4607      	mov	r7, r0
 8008546:	460d      	mov	r5, r1
 8008548:	4614      	mov	r4, r2
 800854a:	d510      	bpl.n	800856e <_svfiprintf_r+0x36>
 800854c:	690b      	ldr	r3, [r1, #16]
 800854e:	b973      	cbnz	r3, 800856e <_svfiprintf_r+0x36>
 8008550:	2140      	movs	r1, #64	@ 0x40
 8008552:	f000 fadb 	bl	8008b0c <_malloc_r>
 8008556:	6028      	str	r0, [r5, #0]
 8008558:	6128      	str	r0, [r5, #16]
 800855a:	b930      	cbnz	r0, 800856a <_svfiprintf_r+0x32>
 800855c:	230c      	movs	r3, #12
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008564:	b01d      	add	sp, #116	@ 0x74
 8008566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	2340      	movs	r3, #64	@ 0x40
 800856c:	616b      	str	r3, [r5, #20]
 800856e:	2300      	movs	r3, #0
 8008570:	9309      	str	r3, [sp, #36]	@ 0x24
 8008572:	2320      	movs	r3, #32
 8008574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008578:	f8cd 800c 	str.w	r8, [sp, #12]
 800857c:	2330      	movs	r3, #48	@ 0x30
 800857e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800871c <_svfiprintf_r+0x1e4>
 8008582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008586:	f04f 0901 	mov.w	r9, #1
 800858a:	4623      	mov	r3, r4
 800858c:	469a      	mov	sl, r3
 800858e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008592:	b10a      	cbz	r2, 8008598 <_svfiprintf_r+0x60>
 8008594:	2a25      	cmp	r2, #37	@ 0x25
 8008596:	d1f9      	bne.n	800858c <_svfiprintf_r+0x54>
 8008598:	ebba 0b04 	subs.w	fp, sl, r4
 800859c:	d00b      	beq.n	80085b6 <_svfiprintf_r+0x7e>
 800859e:	465b      	mov	r3, fp
 80085a0:	4622      	mov	r2, r4
 80085a2:	4629      	mov	r1, r5
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ff6b 	bl	8008480 <__ssputs_r>
 80085aa:	3001      	adds	r0, #1
 80085ac:	f000 80a7 	beq.w	80086fe <_svfiprintf_r+0x1c6>
 80085b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085b2:	445a      	add	r2, fp
 80085b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80085b6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 809f 	beq.w	80086fe <_svfiprintf_r+0x1c6>
 80085c0:	2300      	movs	r3, #0
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ca:	f10a 0a01 	add.w	sl, sl, #1
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d8:	4654      	mov	r4, sl
 80085da:	2205      	movs	r2, #5
 80085dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e0:	484e      	ldr	r0, [pc, #312]	@ (800871c <_svfiprintf_r+0x1e4>)
 80085e2:	f7f7 fe15 	bl	8000210 <memchr>
 80085e6:	9a04      	ldr	r2, [sp, #16]
 80085e8:	b9d8      	cbnz	r0, 8008622 <_svfiprintf_r+0xea>
 80085ea:	06d0      	lsls	r0, r2, #27
 80085ec:	bf44      	itt	mi
 80085ee:	2320      	movmi	r3, #32
 80085f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f4:	0711      	lsls	r1, r2, #28
 80085f6:	bf44      	itt	mi
 80085f8:	232b      	movmi	r3, #43	@ 0x2b
 80085fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008602:	2b2a      	cmp	r3, #42	@ 0x2a
 8008604:	d015      	beq.n	8008632 <_svfiprintf_r+0xfa>
 8008606:	9a07      	ldr	r2, [sp, #28]
 8008608:	4654      	mov	r4, sl
 800860a:	2000      	movs	r0, #0
 800860c:	f04f 0c0a 	mov.w	ip, #10
 8008610:	4621      	mov	r1, r4
 8008612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008616:	3b30      	subs	r3, #48	@ 0x30
 8008618:	2b09      	cmp	r3, #9
 800861a:	d94b      	bls.n	80086b4 <_svfiprintf_r+0x17c>
 800861c:	b1b0      	cbz	r0, 800864c <_svfiprintf_r+0x114>
 800861e:	9207      	str	r2, [sp, #28]
 8008620:	e014      	b.n	800864c <_svfiprintf_r+0x114>
 8008622:	eba0 0308 	sub.w	r3, r0, r8
 8008626:	fa09 f303 	lsl.w	r3, r9, r3
 800862a:	4313      	orrs	r3, r2
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	46a2      	mov	sl, r4
 8008630:	e7d2      	b.n	80085d8 <_svfiprintf_r+0xa0>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	1d19      	adds	r1, r3, #4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	9103      	str	r1, [sp, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfbb      	ittet	lt
 800863e:	425b      	neglt	r3, r3
 8008640:	f042 0202 	orrlt.w	r2, r2, #2
 8008644:	9307      	strge	r3, [sp, #28]
 8008646:	9307      	strlt	r3, [sp, #28]
 8008648:	bfb8      	it	lt
 800864a:	9204      	strlt	r2, [sp, #16]
 800864c:	7823      	ldrb	r3, [r4, #0]
 800864e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008650:	d10a      	bne.n	8008668 <_svfiprintf_r+0x130>
 8008652:	7863      	ldrb	r3, [r4, #1]
 8008654:	2b2a      	cmp	r3, #42	@ 0x2a
 8008656:	d132      	bne.n	80086be <_svfiprintf_r+0x186>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	9203      	str	r2, [sp, #12]
 8008660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008664:	3402      	adds	r4, #2
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800872c <_svfiprintf_r+0x1f4>
 800866c:	7821      	ldrb	r1, [r4, #0]
 800866e:	2203      	movs	r2, #3
 8008670:	4650      	mov	r0, sl
 8008672:	f7f7 fdcd 	bl	8000210 <memchr>
 8008676:	b138      	cbz	r0, 8008688 <_svfiprintf_r+0x150>
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	eba0 000a 	sub.w	r0, r0, sl
 800867e:	2240      	movs	r2, #64	@ 0x40
 8008680:	4082      	lsls	r2, r0
 8008682:	4313      	orrs	r3, r2
 8008684:	3401      	adds	r4, #1
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868c:	4824      	ldr	r0, [pc, #144]	@ (8008720 <_svfiprintf_r+0x1e8>)
 800868e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008692:	2206      	movs	r2, #6
 8008694:	f7f7 fdbc 	bl	8000210 <memchr>
 8008698:	2800      	cmp	r0, #0
 800869a:	d036      	beq.n	800870a <_svfiprintf_r+0x1d2>
 800869c:	4b21      	ldr	r3, [pc, #132]	@ (8008724 <_svfiprintf_r+0x1ec>)
 800869e:	bb1b      	cbnz	r3, 80086e8 <_svfiprintf_r+0x1b0>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	3307      	adds	r3, #7
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	3308      	adds	r3, #8
 80086aa:	9303      	str	r3, [sp, #12]
 80086ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ae:	4433      	add	r3, r6
 80086b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b2:	e76a      	b.n	800858a <_svfiprintf_r+0x52>
 80086b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b8:	460c      	mov	r4, r1
 80086ba:	2001      	movs	r0, #1
 80086bc:	e7a8      	b.n	8008610 <_svfiprintf_r+0xd8>
 80086be:	2300      	movs	r3, #0
 80086c0:	3401      	adds	r4, #1
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	4619      	mov	r1, r3
 80086c6:	f04f 0c0a 	mov.w	ip, #10
 80086ca:	4620      	mov	r0, r4
 80086cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d0:	3a30      	subs	r2, #48	@ 0x30
 80086d2:	2a09      	cmp	r2, #9
 80086d4:	d903      	bls.n	80086de <_svfiprintf_r+0x1a6>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0c6      	beq.n	8008668 <_svfiprintf_r+0x130>
 80086da:	9105      	str	r1, [sp, #20]
 80086dc:	e7c4      	b.n	8008668 <_svfiprintf_r+0x130>
 80086de:	fb0c 2101 	mla	r1, ip, r1, r2
 80086e2:	4604      	mov	r4, r0
 80086e4:	2301      	movs	r3, #1
 80086e6:	e7f0      	b.n	80086ca <_svfiprintf_r+0x192>
 80086e8:	ab03      	add	r3, sp, #12
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	462a      	mov	r2, r5
 80086ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008728 <_svfiprintf_r+0x1f0>)
 80086f0:	a904      	add	r1, sp, #16
 80086f2:	4638      	mov	r0, r7
 80086f4:	f3af 8000 	nop.w
 80086f8:	1c42      	adds	r2, r0, #1
 80086fa:	4606      	mov	r6, r0
 80086fc:	d1d6      	bne.n	80086ac <_svfiprintf_r+0x174>
 80086fe:	89ab      	ldrh	r3, [r5, #12]
 8008700:	065b      	lsls	r3, r3, #25
 8008702:	f53f af2d 	bmi.w	8008560 <_svfiprintf_r+0x28>
 8008706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008708:	e72c      	b.n	8008564 <_svfiprintf_r+0x2c>
 800870a:	ab03      	add	r3, sp, #12
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	462a      	mov	r2, r5
 8008710:	4b05      	ldr	r3, [pc, #20]	@ (8008728 <_svfiprintf_r+0x1f0>)
 8008712:	a904      	add	r1, sp, #16
 8008714:	4638      	mov	r0, r7
 8008716:	f000 fae7 	bl	8008ce8 <_printf_i>
 800871a:	e7ed      	b.n	80086f8 <_svfiprintf_r+0x1c0>
 800871c:	080099f8 	.word	0x080099f8
 8008720:	08009a02 	.word	0x08009a02
 8008724:	00000000 	.word	0x00000000
 8008728:	08008481 	.word	0x08008481
 800872c:	080099fe 	.word	0x080099fe

08008730 <_sungetc_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	1c4b      	adds	r3, r1, #1
 8008734:	4614      	mov	r4, r2
 8008736:	d103      	bne.n	8008740 <_sungetc_r+0x10>
 8008738:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800873c:	4628      	mov	r0, r5
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	8993      	ldrh	r3, [r2, #12]
 8008742:	f023 0320 	bic.w	r3, r3, #32
 8008746:	8193      	strh	r3, [r2, #12]
 8008748:	6853      	ldr	r3, [r2, #4]
 800874a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800874c:	b2cd      	uxtb	r5, r1
 800874e:	b18a      	cbz	r2, 8008774 <_sungetc_r+0x44>
 8008750:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008752:	429a      	cmp	r2, r3
 8008754:	dd08      	ble.n	8008768 <_sungetc_r+0x38>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	3301      	adds	r3, #1
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	e7e9      	b.n	800873c <_sungetc_r+0xc>
 8008768:	4621      	mov	r1, r4
 800876a:	f000 fd71 	bl	8009250 <__submore>
 800876e:	2800      	cmp	r0, #0
 8008770:	d0f1      	beq.n	8008756 <_sungetc_r+0x26>
 8008772:	e7e1      	b.n	8008738 <_sungetc_r+0x8>
 8008774:	6921      	ldr	r1, [r4, #16]
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	b141      	cbz	r1, 800878c <_sungetc_r+0x5c>
 800877a:	4291      	cmp	r1, r2
 800877c:	d206      	bcs.n	800878c <_sungetc_r+0x5c>
 800877e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008782:	42a9      	cmp	r1, r5
 8008784:	d102      	bne.n	800878c <_sungetc_r+0x5c>
 8008786:	3a01      	subs	r2, #1
 8008788:	6022      	str	r2, [r4, #0]
 800878a:	e7ea      	b.n	8008762 <_sungetc_r+0x32>
 800878c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008794:	6363      	str	r3, [r4, #52]	@ 0x34
 8008796:	2303      	movs	r3, #3
 8008798:	63a3      	str	r3, [r4, #56]	@ 0x38
 800879a:	4623      	mov	r3, r4
 800879c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	2301      	movs	r3, #1
 80087a4:	e7de      	b.n	8008764 <_sungetc_r+0x34>

080087a6 <__ssrefill_r>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80087ac:	b169      	cbz	r1, 80087ca <__ssrefill_r+0x24>
 80087ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087b2:	4299      	cmp	r1, r3
 80087b4:	d001      	beq.n	80087ba <__ssrefill_r+0x14>
 80087b6:	f7ff fe19 	bl	80083ec <_free_r>
 80087ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087bc:	6063      	str	r3, [r4, #4]
 80087be:	2000      	movs	r0, #0
 80087c0:	6360      	str	r0, [r4, #52]	@ 0x34
 80087c2:	b113      	cbz	r3, 80087ca <__ssrefill_r+0x24>
 80087c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	bd10      	pop	{r4, pc}
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	2300      	movs	r3, #0
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	f043 0320 	orr.w	r3, r3, #32
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087de:	e7f3      	b.n	80087c8 <__ssrefill_r+0x22>

080087e0 <__ssvfiscanf_r>:
 80087e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	460c      	mov	r4, r1
 80087e6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80087ea:	2100      	movs	r1, #0
 80087ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80087f0:	49a5      	ldr	r1, [pc, #660]	@ (8008a88 <__ssvfiscanf_r+0x2a8>)
 80087f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80087f4:	f10d 0804 	add.w	r8, sp, #4
 80087f8:	49a4      	ldr	r1, [pc, #656]	@ (8008a8c <__ssvfiscanf_r+0x2ac>)
 80087fa:	4fa5      	ldr	r7, [pc, #660]	@ (8008a90 <__ssvfiscanf_r+0x2b0>)
 80087fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008800:	4606      	mov	r6, r0
 8008802:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	7813      	ldrb	r3, [r2, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8158 	beq.w	8008abe <__ssvfiscanf_r+0x2de>
 800880e:	5cf9      	ldrb	r1, [r7, r3]
 8008810:	f011 0108 	ands.w	r1, r1, #8
 8008814:	f102 0501 	add.w	r5, r2, #1
 8008818:	d019      	beq.n	800884e <__ssvfiscanf_r+0x6e>
 800881a:	6863      	ldr	r3, [r4, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd0f      	ble.n	8008840 <__ssvfiscanf_r+0x60>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	781a      	ldrb	r2, [r3, #0]
 8008824:	5cba      	ldrb	r2, [r7, r2]
 8008826:	0712      	lsls	r2, r2, #28
 8008828:	d401      	bmi.n	800882e <__ssvfiscanf_r+0x4e>
 800882a:	462a      	mov	r2, r5
 800882c:	e7eb      	b.n	8008806 <__ssvfiscanf_r+0x26>
 800882e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008830:	3201      	adds	r2, #1
 8008832:	9245      	str	r2, [sp, #276]	@ 0x114
 8008834:	6862      	ldr	r2, [r4, #4]
 8008836:	3301      	adds	r3, #1
 8008838:	3a01      	subs	r2, #1
 800883a:	6062      	str	r2, [r4, #4]
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	e7ec      	b.n	800881a <__ssvfiscanf_r+0x3a>
 8008840:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008842:	4621      	mov	r1, r4
 8008844:	4630      	mov	r0, r6
 8008846:	4798      	blx	r3
 8008848:	2800      	cmp	r0, #0
 800884a:	d0e9      	beq.n	8008820 <__ssvfiscanf_r+0x40>
 800884c:	e7ed      	b.n	800882a <__ssvfiscanf_r+0x4a>
 800884e:	2b25      	cmp	r3, #37	@ 0x25
 8008850:	d012      	beq.n	8008878 <__ssvfiscanf_r+0x98>
 8008852:	4699      	mov	r9, r3
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f340 8093 	ble.w	8008982 <__ssvfiscanf_r+0x1a2>
 800885c:	6822      	ldr	r2, [r4, #0]
 800885e:	7813      	ldrb	r3, [r2, #0]
 8008860:	454b      	cmp	r3, r9
 8008862:	f040 812c 	bne.w	8008abe <__ssvfiscanf_r+0x2de>
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	3b01      	subs	r3, #1
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800886e:	3201      	adds	r2, #1
 8008870:	3301      	adds	r3, #1
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	9345      	str	r3, [sp, #276]	@ 0x114
 8008876:	e7d8      	b.n	800882a <__ssvfiscanf_r+0x4a>
 8008878:	9141      	str	r1, [sp, #260]	@ 0x104
 800887a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800887c:	7853      	ldrb	r3, [r2, #1]
 800887e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008880:	bf02      	ittt	eq
 8008882:	2310      	moveq	r3, #16
 8008884:	1c95      	addeq	r5, r2, #2
 8008886:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008888:	220a      	movs	r2, #10
 800888a:	46a9      	mov	r9, r5
 800888c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008890:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008894:	2b09      	cmp	r3, #9
 8008896:	d91e      	bls.n	80088d6 <__ssvfiscanf_r+0xf6>
 8008898:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008a94 <__ssvfiscanf_r+0x2b4>
 800889c:	2203      	movs	r2, #3
 800889e:	4650      	mov	r0, sl
 80088a0:	f7f7 fcb6 	bl	8000210 <memchr>
 80088a4:	b138      	cbz	r0, 80088b6 <__ssvfiscanf_r+0xd6>
 80088a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80088a8:	eba0 000a 	sub.w	r0, r0, sl
 80088ac:	2301      	movs	r3, #1
 80088ae:	4083      	lsls	r3, r0
 80088b0:	4313      	orrs	r3, r2
 80088b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80088b4:	464d      	mov	r5, r9
 80088b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088ba:	2b78      	cmp	r3, #120	@ 0x78
 80088bc:	d806      	bhi.n	80088cc <__ssvfiscanf_r+0xec>
 80088be:	2b57      	cmp	r3, #87	@ 0x57
 80088c0:	d810      	bhi.n	80088e4 <__ssvfiscanf_r+0x104>
 80088c2:	2b25      	cmp	r3, #37	@ 0x25
 80088c4:	d0c5      	beq.n	8008852 <__ssvfiscanf_r+0x72>
 80088c6:	d857      	bhi.n	8008978 <__ssvfiscanf_r+0x198>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d065      	beq.n	8008998 <__ssvfiscanf_r+0x1b8>
 80088cc:	2303      	movs	r3, #3
 80088ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80088d0:	230a      	movs	r3, #10
 80088d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80088d4:	e078      	b.n	80089c8 <__ssvfiscanf_r+0x1e8>
 80088d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80088d8:	fb02 1103 	mla	r1, r2, r3, r1
 80088dc:	3930      	subs	r1, #48	@ 0x30
 80088de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80088e0:	464d      	mov	r5, r9
 80088e2:	e7d2      	b.n	800888a <__ssvfiscanf_r+0xaa>
 80088e4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80088e8:	2a20      	cmp	r2, #32
 80088ea:	d8ef      	bhi.n	80088cc <__ssvfiscanf_r+0xec>
 80088ec:	a101      	add	r1, pc, #4	@ (adr r1, 80088f4 <__ssvfiscanf_r+0x114>)
 80088ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	080089a7 	.word	0x080089a7
 80088f8:	080088cd 	.word	0x080088cd
 80088fc:	080088cd 	.word	0x080088cd
 8008900:	08008a01 	.word	0x08008a01
 8008904:	080088cd 	.word	0x080088cd
 8008908:	080088cd 	.word	0x080088cd
 800890c:	080088cd 	.word	0x080088cd
 8008910:	080088cd 	.word	0x080088cd
 8008914:	080088cd 	.word	0x080088cd
 8008918:	080088cd 	.word	0x080088cd
 800891c:	080088cd 	.word	0x080088cd
 8008920:	08008a17 	.word	0x08008a17
 8008924:	080089fd 	.word	0x080089fd
 8008928:	0800897f 	.word	0x0800897f
 800892c:	0800897f 	.word	0x0800897f
 8008930:	0800897f 	.word	0x0800897f
 8008934:	080088cd 	.word	0x080088cd
 8008938:	080089b9 	.word	0x080089b9
 800893c:	080088cd 	.word	0x080088cd
 8008940:	080088cd 	.word	0x080088cd
 8008944:	080088cd 	.word	0x080088cd
 8008948:	080088cd 	.word	0x080088cd
 800894c:	08008a27 	.word	0x08008a27
 8008950:	080089c1 	.word	0x080089c1
 8008954:	0800899f 	.word	0x0800899f
 8008958:	080088cd 	.word	0x080088cd
 800895c:	080088cd 	.word	0x080088cd
 8008960:	08008a23 	.word	0x08008a23
 8008964:	080088cd 	.word	0x080088cd
 8008968:	080089fd 	.word	0x080089fd
 800896c:	080088cd 	.word	0x080088cd
 8008970:	080088cd 	.word	0x080088cd
 8008974:	080089a7 	.word	0x080089a7
 8008978:	3b45      	subs	r3, #69	@ 0x45
 800897a:	2b02      	cmp	r3, #2
 800897c:	d8a6      	bhi.n	80088cc <__ssvfiscanf_r+0xec>
 800897e:	2305      	movs	r3, #5
 8008980:	e021      	b.n	80089c6 <__ssvfiscanf_r+0x1e6>
 8008982:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008984:	4621      	mov	r1, r4
 8008986:	4630      	mov	r0, r6
 8008988:	4798      	blx	r3
 800898a:	2800      	cmp	r0, #0
 800898c:	f43f af66 	beq.w	800885c <__ssvfiscanf_r+0x7c>
 8008990:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008992:	2800      	cmp	r0, #0
 8008994:	f040 808b 	bne.w	8008aae <__ssvfiscanf_r+0x2ce>
 8008998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800899c:	e08b      	b.n	8008ab6 <__ssvfiscanf_r+0x2d6>
 800899e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80089a0:	f042 0220 	orr.w	r2, r2, #32
 80089a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80089a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80089a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80089ae:	2210      	movs	r2, #16
 80089b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80089b2:	9242      	str	r2, [sp, #264]	@ 0x108
 80089b4:	d902      	bls.n	80089bc <__ssvfiscanf_r+0x1dc>
 80089b6:	e005      	b.n	80089c4 <__ssvfiscanf_r+0x1e4>
 80089b8:	2300      	movs	r3, #0
 80089ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80089bc:	2303      	movs	r3, #3
 80089be:	e002      	b.n	80089c6 <__ssvfiscanf_r+0x1e6>
 80089c0:	2308      	movs	r3, #8
 80089c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80089c4:	2304      	movs	r3, #4
 80089c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80089c8:	6863      	ldr	r3, [r4, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dd39      	ble.n	8008a42 <__ssvfiscanf_r+0x262>
 80089ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089d0:	0659      	lsls	r1, r3, #25
 80089d2:	d404      	bmi.n	80089de <__ssvfiscanf_r+0x1fe>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	5cba      	ldrb	r2, [r7, r2]
 80089da:	0712      	lsls	r2, r2, #28
 80089dc:	d438      	bmi.n	8008a50 <__ssvfiscanf_r+0x270>
 80089de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	dc47      	bgt.n	8008a74 <__ssvfiscanf_r+0x294>
 80089e4:	466b      	mov	r3, sp
 80089e6:	4622      	mov	r2, r4
 80089e8:	a941      	add	r1, sp, #260	@ 0x104
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 fa9c 	bl	8008f28 <_scanf_chars>
 80089f0:	2801      	cmp	r0, #1
 80089f2:	d064      	beq.n	8008abe <__ssvfiscanf_r+0x2de>
 80089f4:	2802      	cmp	r0, #2
 80089f6:	f47f af18 	bne.w	800882a <__ssvfiscanf_r+0x4a>
 80089fa:	e7c9      	b.n	8008990 <__ssvfiscanf_r+0x1b0>
 80089fc:	220a      	movs	r2, #10
 80089fe:	e7d7      	b.n	80089b0 <__ssvfiscanf_r+0x1d0>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4640      	mov	r0, r8
 8008a04:	f000 fbde 	bl	80091c4 <__sccl>
 8008a08:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a0e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008a10:	4605      	mov	r5, r0
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7d7      	b.n	80089c6 <__ssvfiscanf_r+0x1e6>
 8008a16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a1c:	9341      	str	r3, [sp, #260]	@ 0x104
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e7d1      	b.n	80089c6 <__ssvfiscanf_r+0x1e6>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e7cf      	b.n	80089c6 <__ssvfiscanf_r+0x1e6>
 8008a26:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008a28:	06c3      	lsls	r3, r0, #27
 8008a2a:	f53f aefe 	bmi.w	800882a <__ssvfiscanf_r+0x4a>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a32:	1d19      	adds	r1, r3, #4
 8008a34:	9100      	str	r1, [sp, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	07c0      	lsls	r0, r0, #31
 8008a3a:	bf4c      	ite	mi
 8008a3c:	801a      	strhmi	r2, [r3, #0]
 8008a3e:	601a      	strpl	r2, [r3, #0]
 8008a40:	e6f3      	b.n	800882a <__ssvfiscanf_r+0x4a>
 8008a42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a44:	4621      	mov	r1, r4
 8008a46:	4630      	mov	r0, r6
 8008a48:	4798      	blx	r3
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0bf      	beq.n	80089ce <__ssvfiscanf_r+0x1ee>
 8008a4e:	e79f      	b.n	8008990 <__ssvfiscanf_r+0x1b0>
 8008a50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a52:	3201      	adds	r2, #1
 8008a54:	9245      	str	r2, [sp, #276]	@ 0x114
 8008a56:	6862      	ldr	r2, [r4, #4]
 8008a58:	3a01      	subs	r2, #1
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	6062      	str	r2, [r4, #4]
 8008a5e:	dd02      	ble.n	8008a66 <__ssvfiscanf_r+0x286>
 8008a60:	3301      	adds	r3, #1
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	e7b6      	b.n	80089d4 <__ssvfiscanf_r+0x1f4>
 8008a66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4798      	blx	r3
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d0b0      	beq.n	80089d4 <__ssvfiscanf_r+0x1f4>
 8008a72:	e78d      	b.n	8008990 <__ssvfiscanf_r+0x1b0>
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	dc0f      	bgt.n	8008a98 <__ssvfiscanf_r+0x2b8>
 8008a78:	466b      	mov	r3, sp
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	a941      	add	r1, sp, #260	@ 0x104
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f000 faac 	bl	8008fdc <_scanf_i>
 8008a84:	e7b4      	b.n	80089f0 <__ssvfiscanf_r+0x210>
 8008a86:	bf00      	nop
 8008a88:	08008731 	.word	0x08008731
 8008a8c:	080087a7 	.word	0x080087a7
 8008a90:	08009a47 	.word	0x08009a47
 8008a94:	080099fe 	.word	0x080099fe
 8008a98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <__ssvfiscanf_r+0x2e4>)
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f43f aec5 	beq.w	800882a <__ssvfiscanf_r+0x4a>
 8008aa0:	466b      	mov	r3, sp
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	a941      	add	r1, sp, #260	@ 0x104
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f3af 8000 	nop.w
 8008aac:	e7a0      	b.n	80089f0 <__ssvfiscanf_r+0x210>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	065b      	lsls	r3, r3, #25
 8008ab2:	f53f af71 	bmi.w	8008998 <__ssvfiscanf_r+0x1b8>
 8008ab6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008ac0:	e7f9      	b.n	8008ab6 <__ssvfiscanf_r+0x2d6>
 8008ac2:	bf00      	nop
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <sbrk_aligned>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4e0f      	ldr	r6, [pc, #60]	@ (8008b08 <sbrk_aligned+0x40>)
 8008acc:	460c      	mov	r4, r1
 8008ace:	6831      	ldr	r1, [r6, #0]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	b911      	cbnz	r1, 8008ada <sbrk_aligned+0x12>
 8008ad4:	f000 fd2a 	bl	800952c <_sbrk_r>
 8008ad8:	6030      	str	r0, [r6, #0]
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 fd25 	bl	800952c <_sbrk_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d103      	bne.n	8008aee <sbrk_aligned+0x26>
 8008ae6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008aea:	4620      	mov	r0, r4
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	1cc4      	adds	r4, r0, #3
 8008af0:	f024 0403 	bic.w	r4, r4, #3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d0f8      	beq.n	8008aea <sbrk_aligned+0x22>
 8008af8:	1a21      	subs	r1, r4, r0
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 fd16 	bl	800952c <_sbrk_r>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d1f2      	bne.n	8008aea <sbrk_aligned+0x22>
 8008b04:	e7ef      	b.n	8008ae6 <sbrk_aligned+0x1e>
 8008b06:	bf00      	nop
 8008b08:	20013100 	.word	0x20013100

08008b0c <_malloc_r>:
 8008b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b10:	1ccd      	adds	r5, r1, #3
 8008b12:	f025 0503 	bic.w	r5, r5, #3
 8008b16:	3508      	adds	r5, #8
 8008b18:	2d0c      	cmp	r5, #12
 8008b1a:	bf38      	it	cc
 8008b1c:	250c      	movcc	r5, #12
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	4606      	mov	r6, r0
 8008b22:	db01      	blt.n	8008b28 <_malloc_r+0x1c>
 8008b24:	42a9      	cmp	r1, r5
 8008b26:	d904      	bls.n	8008b32 <_malloc_r+0x26>
 8008b28:	230c      	movs	r3, #12
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c08 <_malloc_r+0xfc>
 8008b36:	f000 fb7f 	bl	8009238 <__malloc_lock>
 8008b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3e:	461c      	mov	r4, r3
 8008b40:	bb44      	cbnz	r4, 8008b94 <_malloc_r+0x88>
 8008b42:	4629      	mov	r1, r5
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff ffbf 	bl	8008ac8 <sbrk_aligned>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	d158      	bne.n	8008c02 <_malloc_r+0xf6>
 8008b50:	f8d8 4000 	ldr.w	r4, [r8]
 8008b54:	4627      	mov	r7, r4
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d143      	bne.n	8008be2 <_malloc_r+0xd6>
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d04b      	beq.n	8008bf6 <_malloc_r+0xea>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	4639      	mov	r1, r7
 8008b62:	4630      	mov	r0, r6
 8008b64:	eb04 0903 	add.w	r9, r4, r3
 8008b68:	f000 fce0 	bl	800952c <_sbrk_r>
 8008b6c:	4581      	cmp	r9, r0
 8008b6e:	d142      	bne.n	8008bf6 <_malloc_r+0xea>
 8008b70:	6821      	ldr	r1, [r4, #0]
 8008b72:	1a6d      	subs	r5, r5, r1
 8008b74:	4629      	mov	r1, r5
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff ffa6 	bl	8008ac8 <sbrk_aligned>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d03a      	beq.n	8008bf6 <_malloc_r+0xea>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	442b      	add	r3, r5
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	bb62      	cbnz	r2, 8008be8 <_malloc_r+0xdc>
 8008b8e:	f8c8 7000 	str.w	r7, [r8]
 8008b92:	e00f      	b.n	8008bb4 <_malloc_r+0xa8>
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	1b52      	subs	r2, r2, r5
 8008b98:	d420      	bmi.n	8008bdc <_malloc_r+0xd0>
 8008b9a:	2a0b      	cmp	r2, #11
 8008b9c:	d917      	bls.n	8008bce <_malloc_r+0xc2>
 8008b9e:	1961      	adds	r1, r4, r5
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	6025      	str	r5, [r4, #0]
 8008ba4:	bf18      	it	ne
 8008ba6:	6059      	strne	r1, [r3, #4]
 8008ba8:	6863      	ldr	r3, [r4, #4]
 8008baa:	bf08      	it	eq
 8008bac:	f8c8 1000 	streq.w	r1, [r8]
 8008bb0:	5162      	str	r2, [r4, r5]
 8008bb2:	604b      	str	r3, [r1, #4]
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f000 fb45 	bl	8009244 <__malloc_unlock>
 8008bba:	f104 000b 	add.w	r0, r4, #11
 8008bbe:	1d23      	adds	r3, r4, #4
 8008bc0:	f020 0007 	bic.w	r0, r0, #7
 8008bc4:	1ac2      	subs	r2, r0, r3
 8008bc6:	bf1c      	itt	ne
 8008bc8:	1a1b      	subne	r3, r3, r0
 8008bca:	50a3      	strne	r3, [r4, r2]
 8008bcc:	e7af      	b.n	8008b2e <_malloc_r+0x22>
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	bf0c      	ite	eq
 8008bd4:	f8c8 2000 	streq.w	r2, [r8]
 8008bd8:	605a      	strne	r2, [r3, #4]
 8008bda:	e7eb      	b.n	8008bb4 <_malloc_r+0xa8>
 8008bdc:	4623      	mov	r3, r4
 8008bde:	6864      	ldr	r4, [r4, #4]
 8008be0:	e7ae      	b.n	8008b40 <_malloc_r+0x34>
 8008be2:	463c      	mov	r4, r7
 8008be4:	687f      	ldr	r7, [r7, #4]
 8008be6:	e7b6      	b.n	8008b56 <_malloc_r+0x4a>
 8008be8:	461a      	mov	r2, r3
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	d1fb      	bne.n	8008be8 <_malloc_r+0xdc>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	6053      	str	r3, [r2, #4]
 8008bf4:	e7de      	b.n	8008bb4 <_malloc_r+0xa8>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	6033      	str	r3, [r6, #0]
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 fb22 	bl	8009244 <__malloc_unlock>
 8008c00:	e794      	b.n	8008b2c <_malloc_r+0x20>
 8008c02:	6005      	str	r5, [r0, #0]
 8008c04:	e7d6      	b.n	8008bb4 <_malloc_r+0xa8>
 8008c06:	bf00      	nop
 8008c08:	20013104 	.word	0x20013104

08008c0c <_printf_common>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	4616      	mov	r6, r2
 8008c12:	4698      	mov	r8, r3
 8008c14:	688a      	ldr	r2, [r1, #8]
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bfb8      	it	lt
 8008c20:	4613      	movlt	r3, r2
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c28:	4607      	mov	r7, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b10a      	cbz	r2, 8008c32 <_printf_common+0x26>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	6833      	ldrmi	r3, [r6, #0]
 8008c3a:	3302      	addmi	r3, #2
 8008c3c:	6033      	strmi	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	f015 0506 	ands.w	r5, r5, #6
 8008c44:	d106      	bne.n	8008c54 <_printf_common+0x48>
 8008c46:	f104 0a19 	add.w	sl, r4, #25
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	6832      	ldr	r2, [r6, #0]
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc26      	bgt.n	8008ca2 <_printf_common+0x96>
 8008c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	3b00      	subs	r3, #0
 8008c5c:	bf18      	it	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	0692      	lsls	r2, r2, #26
 8008c62:	d42b      	bmi.n	8008cbc <_printf_common+0xb0>
 8008c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c68:	4641      	mov	r1, r8
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c8      	blx	r9
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d01e      	beq.n	8008cb0 <_printf_common+0xa4>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	6922      	ldr	r2, [r4, #16]
 8008c76:	f003 0306 	and.w	r3, r3, #6
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	bf02      	ittt	eq
 8008c7e:	68e5      	ldreq	r5, [r4, #12]
 8008c80:	6833      	ldreq	r3, [r6, #0]
 8008c82:	1aed      	subeq	r5, r5, r3
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	2600      	movs	r6, #0
 8008c98:	341a      	adds	r4, #26
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	d11a      	bne.n	8008cd4 <_printf_common+0xc8>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e008      	b.n	8008cb4 <_printf_common+0xa8>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4641      	mov	r1, r8
 8008ca8:	4638      	mov	r0, r7
 8008caa:	47c8      	blx	r9
 8008cac:	3001      	adds	r0, #1
 8008cae:	d103      	bne.n	8008cb8 <_printf_common+0xac>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7c6      	b.n	8008c4a <_printf_common+0x3e>
 8008cbc:	18e1      	adds	r1, r4, r3
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	2030      	movs	r0, #48	@ 0x30
 8008cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cc6:	4422      	add	r2, r4
 8008cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	e7c7      	b.n	8008c64 <_printf_common+0x58>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c8      	blx	r9
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d0e6      	beq.n	8008cb0 <_printf_common+0xa4>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7d9      	b.n	8008c9a <_printf_common+0x8e>
	...

08008ce8 <_printf_i>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	7e0f      	ldrb	r7, [r1, #24]
 8008cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cf0:	2f78      	cmp	r7, #120	@ 0x78
 8008cf2:	4691      	mov	r9, r2
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cfe:	d807      	bhi.n	8008d10 <_printf_i+0x28>
 8008d00:	2f62      	cmp	r7, #98	@ 0x62
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x32>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f000 80d2 	beq.w	8008eae <_printf_i+0x1c6>
 8008d0a:	2f58      	cmp	r7, #88	@ 0x58
 8008d0c:	f000 80b9 	beq.w	8008e82 <_printf_i+0x19a>
 8008d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d18:	e03a      	b.n	8008d90 <_printf_i+0xa8>
 8008d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	d8f6      	bhi.n	8008d10 <_printf_i+0x28>
 8008d22:	a101      	add	r1, pc, #4	@ (adr r1, 8008d28 <_printf_i+0x40>)
 8008d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d11 	.word	0x08008d11
 8008d34:	08008d11 	.word	0x08008d11
 8008d38:	08008d11 	.word	0x08008d11
 8008d3c:	08008d11 	.word	0x08008d11
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d11 	.word	0x08008d11
 8008d48:	08008d11 	.word	0x08008d11
 8008d4c:	08008d11 	.word	0x08008d11
 8008d50:	08008d11 	.word	0x08008d11
 8008d54:	08008e95 	.word	0x08008e95
 8008d58:	08008dbf 	.word	0x08008dbf
 8008d5c:	08008e4f 	.word	0x08008e4f
 8008d60:	08008d11 	.word	0x08008d11
 8008d64:	08008d11 	.word	0x08008d11
 8008d68:	08008eb7 	.word	0x08008eb7
 8008d6c:	08008d11 	.word	0x08008d11
 8008d70:	08008dbf 	.word	0x08008dbf
 8008d74:	08008d11 	.word	0x08008d11
 8008d78:	08008d11 	.word	0x08008d11
 8008d7c:	08008e57 	.word	0x08008e57
 8008d80:	6833      	ldr	r3, [r6, #0]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6032      	str	r2, [r6, #0]
 8008d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d90:	2301      	movs	r3, #1
 8008d92:	e09d      	b.n	8008ed0 <_printf_i+0x1e8>
 8008d94:	6833      	ldr	r3, [r6, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6031      	str	r1, [r6, #0]
 8008d9c:	0606      	lsls	r6, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xbc>
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	e003      	b.n	8008dac <_printf_i+0xc4>
 8008da4:	0645      	lsls	r5, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xb8>
 8008da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	da03      	bge.n	8008db8 <_printf_i+0xd0>
 8008db0:	232d      	movs	r3, #45	@ 0x2d
 8008db2:	426d      	negs	r5, r5
 8008db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008db8:	4859      	ldr	r0, [pc, #356]	@ (8008f20 <_printf_i+0x238>)
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e011      	b.n	8008de2 <_printf_i+0xfa>
 8008dbe:	6821      	ldr	r1, [r4, #0]
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	0608      	lsls	r0, r1, #24
 8008dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dc8:	d402      	bmi.n	8008dd0 <_printf_i+0xe8>
 8008dca:	0649      	lsls	r1, r1, #25
 8008dcc:	bf48      	it	mi
 8008dce:	b2ad      	uxthmi	r5, r5
 8008dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dd2:	4853      	ldr	r0, [pc, #332]	@ (8008f20 <_printf_i+0x238>)
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	bf14      	ite	ne
 8008dd8:	230a      	movne	r3, #10
 8008dda:	2308      	moveq	r3, #8
 8008ddc:	2100      	movs	r1, #0
 8008dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008de2:	6866      	ldr	r6, [r4, #4]
 8008de4:	60a6      	str	r6, [r4, #8]
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	bfa2      	ittt	ge
 8008dea:	6821      	ldrge	r1, [r4, #0]
 8008dec:	f021 0104 	bicge.w	r1, r1, #4
 8008df0:	6021      	strge	r1, [r4, #0]
 8008df2:	b90d      	cbnz	r5, 8008df8 <_printf_i+0x110>
 8008df4:	2e00      	cmp	r6, #0
 8008df6:	d04b      	beq.n	8008e90 <_printf_i+0x1a8>
 8008df8:	4616      	mov	r6, r2
 8008dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8008e02:	5dc7      	ldrb	r7, [r0, r7]
 8008e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e08:	462f      	mov	r7, r5
 8008e0a:	42bb      	cmp	r3, r7
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	d9f4      	bls.n	8008dfa <_printf_i+0x112>
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d10b      	bne.n	8008e2c <_printf_i+0x144>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	07df      	lsls	r7, r3, #31
 8008e18:	d508      	bpl.n	8008e2c <_printf_i+0x144>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6861      	ldr	r1, [r4, #4]
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	bfde      	ittt	le
 8008e22:	2330      	movle	r3, #48	@ 0x30
 8008e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e2c:	1b92      	subs	r2, r2, r6
 8008e2e:	6122      	str	r2, [r4, #16]
 8008e30:	f8cd a000 	str.w	sl, [sp]
 8008e34:	464b      	mov	r3, r9
 8008e36:	aa03      	add	r2, sp, #12
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	f7ff fee6 	bl	8008c0c <_printf_common>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d14a      	bne.n	8008eda <_printf_i+0x1f2>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e48:	b004      	add	sp, #16
 8008e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	4833      	ldr	r0, [pc, #204]	@ (8008f24 <_printf_i+0x23c>)
 8008e58:	2778      	movs	r7, #120	@ 0x78
 8008e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	6831      	ldr	r1, [r6, #0]
 8008e62:	061f      	lsls	r7, r3, #24
 8008e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e68:	d402      	bmi.n	8008e70 <_printf_i+0x188>
 8008e6a:	065f      	lsls	r7, r3, #25
 8008e6c:	bf48      	it	mi
 8008e6e:	b2ad      	uxthmi	r5, r5
 8008e70:	6031      	str	r1, [r6, #0]
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	bf44      	itt	mi
 8008e76:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7a:	6023      	strmi	r3, [r4, #0]
 8008e7c:	b11d      	cbz	r5, 8008e86 <_printf_i+0x19e>
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e7ac      	b.n	8008ddc <_printf_i+0xf4>
 8008e82:	4827      	ldr	r0, [pc, #156]	@ (8008f20 <_printf_i+0x238>)
 8008e84:	e7e9      	b.n	8008e5a <_printf_i+0x172>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	f023 0320 	bic.w	r3, r3, #32
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	e7f6      	b.n	8008e7e <_printf_i+0x196>
 8008e90:	4616      	mov	r6, r2
 8008e92:	e7bd      	b.n	8008e10 <_printf_i+0x128>
 8008e94:	6833      	ldr	r3, [r6, #0]
 8008e96:	6825      	ldr	r5, [r4, #0]
 8008e98:	6961      	ldr	r1, [r4, #20]
 8008e9a:	1d18      	adds	r0, r3, #4
 8008e9c:	6030      	str	r0, [r6, #0]
 8008e9e:	062e      	lsls	r6, r5, #24
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	d501      	bpl.n	8008ea8 <_printf_i+0x1c0>
 8008ea4:	6019      	str	r1, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <_printf_i+0x1c6>
 8008ea8:	0668      	lsls	r0, r5, #25
 8008eaa:	d5fb      	bpl.n	8008ea4 <_printf_i+0x1bc>
 8008eac:	8019      	strh	r1, [r3, #0]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	4616      	mov	r6, r2
 8008eb4:	e7bc      	b.n	8008e30 <_printf_i+0x148>
 8008eb6:	6833      	ldr	r3, [r6, #0]
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	6032      	str	r2, [r6, #0]
 8008ebc:	681e      	ldr	r6, [r3, #0]
 8008ebe:	6862      	ldr	r2, [r4, #4]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7f7 f9a4 	bl	8000210 <memchr>
 8008ec8:	b108      	cbz	r0, 8008ece <_printf_i+0x1e6>
 8008eca:	1b80      	subs	r0, r0, r6
 8008ecc:	6060      	str	r0, [r4, #4]
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ed8:	e7aa      	b.n	8008e30 <_printf_i+0x148>
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	4632      	mov	r2, r6
 8008ede:	4649      	mov	r1, r9
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	47d0      	blx	sl
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d0ad      	beq.n	8008e44 <_printf_i+0x15c>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	079b      	lsls	r3, r3, #30
 8008eec:	d413      	bmi.n	8008f16 <_printf_i+0x22e>
 8008eee:	68e0      	ldr	r0, [r4, #12]
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	bfb8      	it	lt
 8008ef6:	4618      	movlt	r0, r3
 8008ef8:	e7a6      	b.n	8008e48 <_printf_i+0x160>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4632      	mov	r2, r6
 8008efe:	4649      	mov	r1, r9
 8008f00:	4640      	mov	r0, r8
 8008f02:	47d0      	blx	sl
 8008f04:	3001      	adds	r0, #1
 8008f06:	d09d      	beq.n	8008e44 <_printf_i+0x15c>
 8008f08:	3501      	adds	r5, #1
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	9903      	ldr	r1, [sp, #12]
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dcf2      	bgt.n	8008efa <_printf_i+0x212>
 8008f14:	e7eb      	b.n	8008eee <_printf_i+0x206>
 8008f16:	2500      	movs	r5, #0
 8008f18:	f104 0619 	add.w	r6, r4, #25
 8008f1c:	e7f5      	b.n	8008f0a <_printf_i+0x222>
 8008f1e:	bf00      	nop
 8008f20:	08009a09 	.word	0x08009a09
 8008f24:	08009a1a 	.word	0x08009a1a

08008f28 <_scanf_chars>:
 8008f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	4615      	mov	r5, r2
 8008f2e:	688a      	ldr	r2, [r1, #8]
 8008f30:	4680      	mov	r8, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	b932      	cbnz	r2, 8008f44 <_scanf_chars+0x1c>
 8008f36:	698a      	ldr	r2, [r1, #24]
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	bf14      	ite	ne
 8008f3c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008f40:	2201      	moveq	r2, #1
 8008f42:	608a      	str	r2, [r1, #8]
 8008f44:	6822      	ldr	r2, [r4, #0]
 8008f46:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008fd8 <_scanf_chars+0xb0>
 8008f4a:	06d1      	lsls	r1, r2, #27
 8008f4c:	bf5f      	itttt	pl
 8008f4e:	681a      	ldrpl	r2, [r3, #0]
 8008f50:	1d11      	addpl	r1, r2, #4
 8008f52:	6019      	strpl	r1, [r3, #0]
 8008f54:	6816      	ldrpl	r6, [r2, #0]
 8008f56:	2700      	movs	r7, #0
 8008f58:	69a0      	ldr	r0, [r4, #24]
 8008f5a:	b188      	cbz	r0, 8008f80 <_scanf_chars+0x58>
 8008f5c:	2801      	cmp	r0, #1
 8008f5e:	d107      	bne.n	8008f70 <_scanf_chars+0x48>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	6963      	ldr	r3, [r4, #20]
 8008f66:	5c9b      	ldrb	r3, [r3, r2]
 8008f68:	b953      	cbnz	r3, 8008f80 <_scanf_chars+0x58>
 8008f6a:	2f00      	cmp	r7, #0
 8008f6c:	d031      	beq.n	8008fd2 <_scanf_chars+0xaa>
 8008f6e:	e022      	b.n	8008fb6 <_scanf_chars+0x8e>
 8008f70:	2802      	cmp	r0, #2
 8008f72:	d120      	bne.n	8008fb6 <_scanf_chars+0x8e>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008f7c:	071b      	lsls	r3, r3, #28
 8008f7e:	d41a      	bmi.n	8008fb6 <_scanf_chars+0x8e>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	06da      	lsls	r2, r3, #27
 8008f84:	bf5e      	ittt	pl
 8008f86:	682b      	ldrpl	r3, [r5, #0]
 8008f88:	781b      	ldrbpl	r3, [r3, #0]
 8008f8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008f8e:	682a      	ldr	r2, [r5, #0]
 8008f90:	686b      	ldr	r3, [r5, #4]
 8008f92:	3201      	adds	r2, #1
 8008f94:	602a      	str	r2, [r5, #0]
 8008f96:	68a2      	ldr	r2, [r4, #8]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	3a01      	subs	r2, #1
 8008f9c:	606b      	str	r3, [r5, #4]
 8008f9e:	3701      	adds	r7, #1
 8008fa0:	60a2      	str	r2, [r4, #8]
 8008fa2:	b142      	cbz	r2, 8008fb6 <_scanf_chars+0x8e>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dcd7      	bgt.n	8008f58 <_scanf_chars+0x30>
 8008fa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008fac:	4629      	mov	r1, r5
 8008fae:	4640      	mov	r0, r8
 8008fb0:	4798      	blx	r3
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0d0      	beq.n	8008f58 <_scanf_chars+0x30>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	f013 0310 	ands.w	r3, r3, #16
 8008fbc:	d105      	bne.n	8008fca <_scanf_chars+0xa2>
 8008fbe:	68e2      	ldr	r2, [r4, #12]
 8008fc0:	3201      	adds	r2, #1
 8008fc2:	60e2      	str	r2, [r4, #12]
 8008fc4:	69a2      	ldr	r2, [r4, #24]
 8008fc6:	b102      	cbz	r2, 8008fca <_scanf_chars+0xa2>
 8008fc8:	7033      	strb	r3, [r6, #0]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	443b      	add	r3, r7
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08009a47 	.word	0x08009a47

08008fdc <_scanf_i>:
 8008fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	4698      	mov	r8, r3
 8008fe2:	4b74      	ldr	r3, [pc, #464]	@ (80091b4 <_scanf_i+0x1d8>)
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	4682      	mov	sl, r0
 8008fe8:	4616      	mov	r6, r2
 8008fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ff6:	4b70      	ldr	r3, [pc, #448]	@ (80091b8 <_scanf_i+0x1dc>)
 8008ff8:	69a1      	ldr	r1, [r4, #24]
 8008ffa:	4a70      	ldr	r2, [pc, #448]	@ (80091bc <_scanf_i+0x1e0>)
 8008ffc:	2903      	cmp	r1, #3
 8008ffe:	bf08      	it	eq
 8009000:	461a      	moveq	r2, r3
 8009002:	68a3      	ldr	r3, [r4, #8]
 8009004:	9201      	str	r2, [sp, #4]
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800900c:	bf88      	it	hi
 800900e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009012:	4627      	mov	r7, r4
 8009014:	bf82      	ittt	hi
 8009016:	eb03 0905 	addhi.w	r9, r3, r5
 800901a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800901e:	60a3      	strhi	r3, [r4, #8]
 8009020:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009024:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009028:	bf98      	it	ls
 800902a:	f04f 0900 	movls.w	r9, #0
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	463d      	mov	r5, r7
 8009032:	f04f 0b00 	mov.w	fp, #0
 8009036:	6831      	ldr	r1, [r6, #0]
 8009038:	ab03      	add	r3, sp, #12
 800903a:	7809      	ldrb	r1, [r1, #0]
 800903c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009040:	2202      	movs	r2, #2
 8009042:	f7f7 f8e5 	bl	8000210 <memchr>
 8009046:	b328      	cbz	r0, 8009094 <_scanf_i+0xb8>
 8009048:	f1bb 0f01 	cmp.w	fp, #1
 800904c:	d159      	bne.n	8009102 <_scanf_i+0x126>
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	b92a      	cbnz	r2, 800905e <_scanf_i+0x82>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	2108      	movs	r1, #8
 8009056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800905a:	6061      	str	r1, [r4, #4]
 800905c:	6022      	str	r2, [r4, #0]
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009064:	6022      	str	r2, [r4, #0]
 8009066:	68a2      	ldr	r2, [r4, #8]
 8009068:	1e51      	subs	r1, r2, #1
 800906a:	60a1      	str	r1, [r4, #8]
 800906c:	b192      	cbz	r2, 8009094 <_scanf_i+0xb8>
 800906e:	6832      	ldr	r2, [r6, #0]
 8009070:	1c51      	adds	r1, r2, #1
 8009072:	6031      	str	r1, [r6, #0]
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	f805 2b01 	strb.w	r2, [r5], #1
 800907a:	6872      	ldr	r2, [r6, #4]
 800907c:	3a01      	subs	r2, #1
 800907e:	2a00      	cmp	r2, #0
 8009080:	6072      	str	r2, [r6, #4]
 8009082:	dc07      	bgt.n	8009094 <_scanf_i+0xb8>
 8009084:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009088:	4631      	mov	r1, r6
 800908a:	4650      	mov	r0, sl
 800908c:	4790      	blx	r2
 800908e:	2800      	cmp	r0, #0
 8009090:	f040 8085 	bne.w	800919e <_scanf_i+0x1c2>
 8009094:	f10b 0b01 	add.w	fp, fp, #1
 8009098:	f1bb 0f03 	cmp.w	fp, #3
 800909c:	d1cb      	bne.n	8009036 <_scanf_i+0x5a>
 800909e:	6863      	ldr	r3, [r4, #4]
 80090a0:	b90b      	cbnz	r3, 80090a6 <_scanf_i+0xca>
 80090a2:	230a      	movs	r3, #10
 80090a4:	6063      	str	r3, [r4, #4]
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	4945      	ldr	r1, [pc, #276]	@ (80091c0 <_scanf_i+0x1e4>)
 80090aa:	6960      	ldr	r0, [r4, #20]
 80090ac:	1ac9      	subs	r1, r1, r3
 80090ae:	f000 f889 	bl	80091c4 <__sccl>
 80090b2:	f04f 0b00 	mov.w	fp, #0
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	6822      	ldr	r2, [r4, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d03d      	beq.n	800913a <_scanf_i+0x15e>
 80090be:	6831      	ldr	r1, [r6, #0]
 80090c0:	6960      	ldr	r0, [r4, #20]
 80090c2:	f891 c000 	ldrb.w	ip, [r1]
 80090c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d035      	beq.n	800913a <_scanf_i+0x15e>
 80090ce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80090d2:	d124      	bne.n	800911e <_scanf_i+0x142>
 80090d4:	0510      	lsls	r0, r2, #20
 80090d6:	d522      	bpl.n	800911e <_scanf_i+0x142>
 80090d8:	f10b 0b01 	add.w	fp, fp, #1
 80090dc:	f1b9 0f00 	cmp.w	r9, #0
 80090e0:	d003      	beq.n	80090ea <_scanf_i+0x10e>
 80090e2:	3301      	adds	r3, #1
 80090e4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80090e8:	60a3      	str	r3, [r4, #8]
 80090ea:	6873      	ldr	r3, [r6, #4]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	6073      	str	r3, [r6, #4]
 80090f2:	dd1b      	ble.n	800912c <_scanf_i+0x150>
 80090f4:	6833      	ldr	r3, [r6, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	6033      	str	r3, [r6, #0]
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	60a3      	str	r3, [r4, #8]
 8009100:	e7d9      	b.n	80090b6 <_scanf_i+0xda>
 8009102:	f1bb 0f02 	cmp.w	fp, #2
 8009106:	d1ae      	bne.n	8009066 <_scanf_i+0x8a>
 8009108:	6822      	ldr	r2, [r4, #0]
 800910a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800910e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009112:	d1bf      	bne.n	8009094 <_scanf_i+0xb8>
 8009114:	2110      	movs	r1, #16
 8009116:	6061      	str	r1, [r4, #4]
 8009118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800911c:	e7a2      	b.n	8009064 <_scanf_i+0x88>
 800911e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	780b      	ldrb	r3, [r1, #0]
 8009126:	f805 3b01 	strb.w	r3, [r5], #1
 800912a:	e7de      	b.n	80090ea <_scanf_i+0x10e>
 800912c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009130:	4631      	mov	r1, r6
 8009132:	4650      	mov	r0, sl
 8009134:	4798      	blx	r3
 8009136:	2800      	cmp	r0, #0
 8009138:	d0df      	beq.n	80090fa <_scanf_i+0x11e>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	05d9      	lsls	r1, r3, #23
 800913e:	d50d      	bpl.n	800915c <_scanf_i+0x180>
 8009140:	42bd      	cmp	r5, r7
 8009142:	d909      	bls.n	8009158 <_scanf_i+0x17c>
 8009144:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009148:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800914c:	4632      	mov	r2, r6
 800914e:	4650      	mov	r0, sl
 8009150:	4798      	blx	r3
 8009152:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8009156:	464d      	mov	r5, r9
 8009158:	42bd      	cmp	r5, r7
 800915a:	d028      	beq.n	80091ae <_scanf_i+0x1d2>
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	f012 0210 	ands.w	r2, r2, #16
 8009162:	d113      	bne.n	800918c <_scanf_i+0x1b0>
 8009164:	702a      	strb	r2, [r5, #0]
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	9e01      	ldr	r6, [sp, #4]
 800916a:	4639      	mov	r1, r7
 800916c:	4650      	mov	r0, sl
 800916e:	47b0      	blx	r6
 8009170:	f8d8 3000 	ldr.w	r3, [r8]
 8009174:	6821      	ldr	r1, [r4, #0]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	f8c8 2000 	str.w	r2, [r8]
 800917c:	f011 0f20 	tst.w	r1, #32
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	d00f      	beq.n	80091a4 <_scanf_i+0x1c8>
 8009184:	6018      	str	r0, [r3, #0]
 8009186:	68e3      	ldr	r3, [r4, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60e3      	str	r3, [r4, #12]
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	1bed      	subs	r5, r5, r7
 8009190:	445d      	add	r5, fp
 8009192:	442b      	add	r3, r5
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	2000      	movs	r0, #0
 8009198:	b007      	add	sp, #28
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	f04f 0b00 	mov.w	fp, #0
 80091a2:	e7ca      	b.n	800913a <_scanf_i+0x15e>
 80091a4:	07ca      	lsls	r2, r1, #31
 80091a6:	bf4c      	ite	mi
 80091a8:	8018      	strhmi	r0, [r3, #0]
 80091aa:	6018      	strpl	r0, [r3, #0]
 80091ac:	e7eb      	b.n	8009186 <_scanf_i+0x1aa>
 80091ae:	2001      	movs	r0, #1
 80091b0:	e7f2      	b.n	8009198 <_scanf_i+0x1bc>
 80091b2:	bf00      	nop
 80091b4:	080099d4 	.word	0x080099d4
 80091b8:	08009415 	.word	0x08009415
 80091bc:	080094f5 	.word	0x080094f5
 80091c0:	08009a3b 	.word	0x08009a3b

080091c4 <__sccl>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	780b      	ldrb	r3, [r1, #0]
 80091c8:	4604      	mov	r4, r0
 80091ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80091cc:	bf0b      	itete	eq
 80091ce:	784b      	ldrbeq	r3, [r1, #1]
 80091d0:	1c4a      	addne	r2, r1, #1
 80091d2:	1c8a      	addeq	r2, r1, #2
 80091d4:	2100      	movne	r1, #0
 80091d6:	bf08      	it	eq
 80091d8:	2101      	moveq	r1, #1
 80091da:	3801      	subs	r0, #1
 80091dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80091e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80091e4:	42a8      	cmp	r0, r5
 80091e6:	d1fb      	bne.n	80091e0 <__sccl+0x1c>
 80091e8:	b90b      	cbnz	r3, 80091ee <__sccl+0x2a>
 80091ea:	1e50      	subs	r0, r2, #1
 80091ec:	bd70      	pop	{r4, r5, r6, pc}
 80091ee:	f081 0101 	eor.w	r1, r1, #1
 80091f2:	54e1      	strb	r1, [r4, r3]
 80091f4:	4610      	mov	r0, r2
 80091f6:	4602      	mov	r2, r0
 80091f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80091fe:	d005      	beq.n	800920c <__sccl+0x48>
 8009200:	2d5d      	cmp	r5, #93	@ 0x5d
 8009202:	d016      	beq.n	8009232 <__sccl+0x6e>
 8009204:	2d00      	cmp	r5, #0
 8009206:	d0f1      	beq.n	80091ec <__sccl+0x28>
 8009208:	462b      	mov	r3, r5
 800920a:	e7f2      	b.n	80091f2 <__sccl+0x2e>
 800920c:	7846      	ldrb	r6, [r0, #1]
 800920e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009210:	d0fa      	beq.n	8009208 <__sccl+0x44>
 8009212:	42b3      	cmp	r3, r6
 8009214:	dcf8      	bgt.n	8009208 <__sccl+0x44>
 8009216:	3002      	adds	r0, #2
 8009218:	461a      	mov	r2, r3
 800921a:	3201      	adds	r2, #1
 800921c:	4296      	cmp	r6, r2
 800921e:	54a1      	strb	r1, [r4, r2]
 8009220:	dcfb      	bgt.n	800921a <__sccl+0x56>
 8009222:	1af2      	subs	r2, r6, r3
 8009224:	3a01      	subs	r2, #1
 8009226:	1c5d      	adds	r5, r3, #1
 8009228:	42b3      	cmp	r3, r6
 800922a:	bfa8      	it	ge
 800922c:	2200      	movge	r2, #0
 800922e:	18ab      	adds	r3, r5, r2
 8009230:	e7e1      	b.n	80091f6 <__sccl+0x32>
 8009232:	4610      	mov	r0, r2
 8009234:	e7da      	b.n	80091ec <__sccl+0x28>
	...

08009238 <__malloc_lock>:
 8009238:	4801      	ldr	r0, [pc, #4]	@ (8009240 <__malloc_lock+0x8>)
 800923a:	f7ff b8c7 	b.w	80083cc <__retarget_lock_acquire_recursive>
 800923e:	bf00      	nop
 8009240:	200130fc 	.word	0x200130fc

08009244 <__malloc_unlock>:
 8009244:	4801      	ldr	r0, [pc, #4]	@ (800924c <__malloc_unlock+0x8>)
 8009246:	f7ff b8c2 	b.w	80083ce <__retarget_lock_release_recursive>
 800924a:	bf00      	nop
 800924c:	200130fc 	.word	0x200130fc

08009250 <__submore>:
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800925c:	4299      	cmp	r1, r3
 800925e:	d11d      	bne.n	800929c <__submore+0x4c>
 8009260:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009264:	f7ff fc52 	bl	8008b0c <_malloc_r>
 8009268:	b918      	cbnz	r0, 8009272 <__submore+0x22>
 800926a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800926e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009276:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009278:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800927c:	6360      	str	r0, [r4, #52]	@ 0x34
 800927e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009282:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009286:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800928a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800928e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009292:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e7e8      	b.n	800926e <__submore+0x1e>
 800929c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800929e:	0077      	lsls	r7, r6, #1
 80092a0:	463a      	mov	r2, r7
 80092a2:	f000 f80f 	bl	80092c4 <_realloc_r>
 80092a6:	4605      	mov	r5, r0
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0de      	beq.n	800926a <__submore+0x1a>
 80092ac:	eb00 0806 	add.w	r8, r0, r6
 80092b0:	4601      	mov	r1, r0
 80092b2:	4632      	mov	r2, r6
 80092b4:	4640      	mov	r0, r8
 80092b6:	f7ff f88b 	bl	80083d0 <memcpy>
 80092ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80092be:	f8c4 8000 	str.w	r8, [r4]
 80092c2:	e7e9      	b.n	8009298 <__submore+0x48>

080092c4 <_realloc_r>:
 80092c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c8:	4680      	mov	r8, r0
 80092ca:	4615      	mov	r5, r2
 80092cc:	460c      	mov	r4, r1
 80092ce:	b921      	cbnz	r1, 80092da <_realloc_r+0x16>
 80092d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4611      	mov	r1, r2
 80092d6:	f7ff bc19 	b.w	8008b0c <_malloc_r>
 80092da:	b92a      	cbnz	r2, 80092e8 <_realloc_r+0x24>
 80092dc:	f7ff f886 	bl	80083ec <_free_r>
 80092e0:	2400      	movs	r4, #0
 80092e2:	4620      	mov	r0, r4
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	f000 f930 	bl	800954c <_malloc_usable_size_r>
 80092ec:	4285      	cmp	r5, r0
 80092ee:	4606      	mov	r6, r0
 80092f0:	d802      	bhi.n	80092f8 <_realloc_r+0x34>
 80092f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092f6:	d8f4      	bhi.n	80092e2 <_realloc_r+0x1e>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4640      	mov	r0, r8
 80092fc:	f7ff fc06 	bl	8008b0c <_malloc_r>
 8009300:	4607      	mov	r7, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	d0ec      	beq.n	80092e0 <_realloc_r+0x1c>
 8009306:	42b5      	cmp	r5, r6
 8009308:	462a      	mov	r2, r5
 800930a:	4621      	mov	r1, r4
 800930c:	bf28      	it	cs
 800930e:	4632      	movcs	r2, r6
 8009310:	f7ff f85e 	bl	80083d0 <memcpy>
 8009314:	4621      	mov	r1, r4
 8009316:	4640      	mov	r0, r8
 8009318:	f7ff f868 	bl	80083ec <_free_r>
 800931c:	463c      	mov	r4, r7
 800931e:	e7e0      	b.n	80092e2 <_realloc_r+0x1e>

08009320 <_strtol_l.constprop.0>:
 8009320:	2b24      	cmp	r3, #36	@ 0x24
 8009322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009326:	4686      	mov	lr, r0
 8009328:	4690      	mov	r8, r2
 800932a:	d801      	bhi.n	8009330 <_strtol_l.constprop.0+0x10>
 800932c:	2b01      	cmp	r3, #1
 800932e:	d106      	bne.n	800933e <_strtol_l.constprop.0+0x1e>
 8009330:	f7ff f822 	bl	8008378 <__errno>
 8009334:	2316      	movs	r3, #22
 8009336:	6003      	str	r3, [r0, #0]
 8009338:	2000      	movs	r0, #0
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	4834      	ldr	r0, [pc, #208]	@ (8009410 <_strtol_l.constprop.0+0xf0>)
 8009340:	460d      	mov	r5, r1
 8009342:	462a      	mov	r2, r5
 8009344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009348:	5d06      	ldrb	r6, [r0, r4]
 800934a:	f016 0608 	ands.w	r6, r6, #8
 800934e:	d1f8      	bne.n	8009342 <_strtol_l.constprop.0+0x22>
 8009350:	2c2d      	cmp	r4, #45	@ 0x2d
 8009352:	d12d      	bne.n	80093b0 <_strtol_l.constprop.0+0x90>
 8009354:	782c      	ldrb	r4, [r5, #0]
 8009356:	2601      	movs	r6, #1
 8009358:	1c95      	adds	r5, r2, #2
 800935a:	f033 0210 	bics.w	r2, r3, #16
 800935e:	d109      	bne.n	8009374 <_strtol_l.constprop.0+0x54>
 8009360:	2c30      	cmp	r4, #48	@ 0x30
 8009362:	d12a      	bne.n	80093ba <_strtol_l.constprop.0+0x9a>
 8009364:	782a      	ldrb	r2, [r5, #0]
 8009366:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800936a:	2a58      	cmp	r2, #88	@ 0x58
 800936c:	d125      	bne.n	80093ba <_strtol_l.constprop.0+0x9a>
 800936e:	786c      	ldrb	r4, [r5, #1]
 8009370:	2310      	movs	r3, #16
 8009372:	3502      	adds	r5, #2
 8009374:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009378:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800937c:	2200      	movs	r2, #0
 800937e:	fbbc f9f3 	udiv	r9, ip, r3
 8009382:	4610      	mov	r0, r2
 8009384:	fb03 ca19 	mls	sl, r3, r9, ip
 8009388:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800938c:	2f09      	cmp	r7, #9
 800938e:	d81b      	bhi.n	80093c8 <_strtol_l.constprop.0+0xa8>
 8009390:	463c      	mov	r4, r7
 8009392:	42a3      	cmp	r3, r4
 8009394:	dd27      	ble.n	80093e6 <_strtol_l.constprop.0+0xc6>
 8009396:	1c57      	adds	r7, r2, #1
 8009398:	d007      	beq.n	80093aa <_strtol_l.constprop.0+0x8a>
 800939a:	4581      	cmp	r9, r0
 800939c:	d320      	bcc.n	80093e0 <_strtol_l.constprop.0+0xc0>
 800939e:	d101      	bne.n	80093a4 <_strtol_l.constprop.0+0x84>
 80093a0:	45a2      	cmp	sl, r4
 80093a2:	db1d      	blt.n	80093e0 <_strtol_l.constprop.0+0xc0>
 80093a4:	fb00 4003 	mla	r0, r0, r3, r4
 80093a8:	2201      	movs	r2, #1
 80093aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093ae:	e7eb      	b.n	8009388 <_strtol_l.constprop.0+0x68>
 80093b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80093b2:	bf04      	itt	eq
 80093b4:	782c      	ldrbeq	r4, [r5, #0]
 80093b6:	1c95      	addeq	r5, r2, #2
 80093b8:	e7cf      	b.n	800935a <_strtol_l.constprop.0+0x3a>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1da      	bne.n	8009374 <_strtol_l.constprop.0+0x54>
 80093be:	2c30      	cmp	r4, #48	@ 0x30
 80093c0:	bf0c      	ite	eq
 80093c2:	2308      	moveq	r3, #8
 80093c4:	230a      	movne	r3, #10
 80093c6:	e7d5      	b.n	8009374 <_strtol_l.constprop.0+0x54>
 80093c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80093cc:	2f19      	cmp	r7, #25
 80093ce:	d801      	bhi.n	80093d4 <_strtol_l.constprop.0+0xb4>
 80093d0:	3c37      	subs	r4, #55	@ 0x37
 80093d2:	e7de      	b.n	8009392 <_strtol_l.constprop.0+0x72>
 80093d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80093d8:	2f19      	cmp	r7, #25
 80093da:	d804      	bhi.n	80093e6 <_strtol_l.constprop.0+0xc6>
 80093dc:	3c57      	subs	r4, #87	@ 0x57
 80093de:	e7d8      	b.n	8009392 <_strtol_l.constprop.0+0x72>
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093e4:	e7e1      	b.n	80093aa <_strtol_l.constprop.0+0x8a>
 80093e6:	1c53      	adds	r3, r2, #1
 80093e8:	d108      	bne.n	80093fc <_strtol_l.constprop.0+0xdc>
 80093ea:	2322      	movs	r3, #34	@ 0x22
 80093ec:	f8ce 3000 	str.w	r3, [lr]
 80093f0:	4660      	mov	r0, ip
 80093f2:	f1b8 0f00 	cmp.w	r8, #0
 80093f6:	d0a0      	beq.n	800933a <_strtol_l.constprop.0+0x1a>
 80093f8:	1e69      	subs	r1, r5, #1
 80093fa:	e006      	b.n	800940a <_strtol_l.constprop.0+0xea>
 80093fc:	b106      	cbz	r6, 8009400 <_strtol_l.constprop.0+0xe0>
 80093fe:	4240      	negs	r0, r0
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	d099      	beq.n	800933a <_strtol_l.constprop.0+0x1a>
 8009406:	2a00      	cmp	r2, #0
 8009408:	d1f6      	bne.n	80093f8 <_strtol_l.constprop.0+0xd8>
 800940a:	f8c8 1000 	str.w	r1, [r8]
 800940e:	e794      	b.n	800933a <_strtol_l.constprop.0+0x1a>
 8009410:	08009a47 	.word	0x08009a47

08009414 <_strtol_r>:
 8009414:	f7ff bf84 	b.w	8009320 <_strtol_l.constprop.0>

08009418 <_strtoul_l.constprop.0>:
 8009418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800941c:	4e34      	ldr	r6, [pc, #208]	@ (80094f0 <_strtoul_l.constprop.0+0xd8>)
 800941e:	4686      	mov	lr, r0
 8009420:	460d      	mov	r5, r1
 8009422:	4628      	mov	r0, r5
 8009424:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009428:	5d37      	ldrb	r7, [r6, r4]
 800942a:	f017 0708 	ands.w	r7, r7, #8
 800942e:	d1f8      	bne.n	8009422 <_strtoul_l.constprop.0+0xa>
 8009430:	2c2d      	cmp	r4, #45	@ 0x2d
 8009432:	d12f      	bne.n	8009494 <_strtoul_l.constprop.0+0x7c>
 8009434:	782c      	ldrb	r4, [r5, #0]
 8009436:	2701      	movs	r7, #1
 8009438:	1c85      	adds	r5, r0, #2
 800943a:	f033 0010 	bics.w	r0, r3, #16
 800943e:	d109      	bne.n	8009454 <_strtoul_l.constprop.0+0x3c>
 8009440:	2c30      	cmp	r4, #48	@ 0x30
 8009442:	d12c      	bne.n	800949e <_strtoul_l.constprop.0+0x86>
 8009444:	7828      	ldrb	r0, [r5, #0]
 8009446:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800944a:	2858      	cmp	r0, #88	@ 0x58
 800944c:	d127      	bne.n	800949e <_strtoul_l.constprop.0+0x86>
 800944e:	786c      	ldrb	r4, [r5, #1]
 8009450:	2310      	movs	r3, #16
 8009452:	3502      	adds	r5, #2
 8009454:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009458:	2600      	movs	r6, #0
 800945a:	fbb8 f8f3 	udiv	r8, r8, r3
 800945e:	fb03 f908 	mul.w	r9, r3, r8
 8009462:	ea6f 0909 	mvn.w	r9, r9
 8009466:	4630      	mov	r0, r6
 8009468:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800946c:	f1bc 0f09 	cmp.w	ip, #9
 8009470:	d81c      	bhi.n	80094ac <_strtoul_l.constprop.0+0x94>
 8009472:	4664      	mov	r4, ip
 8009474:	42a3      	cmp	r3, r4
 8009476:	dd2a      	ble.n	80094ce <_strtoul_l.constprop.0+0xb6>
 8009478:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800947c:	d007      	beq.n	800948e <_strtoul_l.constprop.0+0x76>
 800947e:	4580      	cmp	r8, r0
 8009480:	d322      	bcc.n	80094c8 <_strtoul_l.constprop.0+0xb0>
 8009482:	d101      	bne.n	8009488 <_strtoul_l.constprop.0+0x70>
 8009484:	45a1      	cmp	r9, r4
 8009486:	db1f      	blt.n	80094c8 <_strtoul_l.constprop.0+0xb0>
 8009488:	fb00 4003 	mla	r0, r0, r3, r4
 800948c:	2601      	movs	r6, #1
 800948e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009492:	e7e9      	b.n	8009468 <_strtoul_l.constprop.0+0x50>
 8009494:	2c2b      	cmp	r4, #43	@ 0x2b
 8009496:	bf04      	itt	eq
 8009498:	782c      	ldrbeq	r4, [r5, #0]
 800949a:	1c85      	addeq	r5, r0, #2
 800949c:	e7cd      	b.n	800943a <_strtoul_l.constprop.0+0x22>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1d8      	bne.n	8009454 <_strtoul_l.constprop.0+0x3c>
 80094a2:	2c30      	cmp	r4, #48	@ 0x30
 80094a4:	bf0c      	ite	eq
 80094a6:	2308      	moveq	r3, #8
 80094a8:	230a      	movne	r3, #10
 80094aa:	e7d3      	b.n	8009454 <_strtoul_l.constprop.0+0x3c>
 80094ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80094b0:	f1bc 0f19 	cmp.w	ip, #25
 80094b4:	d801      	bhi.n	80094ba <_strtoul_l.constprop.0+0xa2>
 80094b6:	3c37      	subs	r4, #55	@ 0x37
 80094b8:	e7dc      	b.n	8009474 <_strtoul_l.constprop.0+0x5c>
 80094ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80094be:	f1bc 0f19 	cmp.w	ip, #25
 80094c2:	d804      	bhi.n	80094ce <_strtoul_l.constprop.0+0xb6>
 80094c4:	3c57      	subs	r4, #87	@ 0x57
 80094c6:	e7d5      	b.n	8009474 <_strtoul_l.constprop.0+0x5c>
 80094c8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80094cc:	e7df      	b.n	800948e <_strtoul_l.constprop.0+0x76>
 80094ce:	1c73      	adds	r3, r6, #1
 80094d0:	d106      	bne.n	80094e0 <_strtoul_l.constprop.0+0xc8>
 80094d2:	2322      	movs	r3, #34	@ 0x22
 80094d4:	f8ce 3000 	str.w	r3, [lr]
 80094d8:	4630      	mov	r0, r6
 80094da:	b932      	cbnz	r2, 80094ea <_strtoul_l.constprop.0+0xd2>
 80094dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094e0:	b107      	cbz	r7, 80094e4 <_strtoul_l.constprop.0+0xcc>
 80094e2:	4240      	negs	r0, r0
 80094e4:	2a00      	cmp	r2, #0
 80094e6:	d0f9      	beq.n	80094dc <_strtoul_l.constprop.0+0xc4>
 80094e8:	b106      	cbz	r6, 80094ec <_strtoul_l.constprop.0+0xd4>
 80094ea:	1e69      	subs	r1, r5, #1
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	e7f5      	b.n	80094dc <_strtoul_l.constprop.0+0xc4>
 80094f0:	08009a47 	.word	0x08009a47

080094f4 <_strtoul_r>:
 80094f4:	f7ff bf90 	b.w	8009418 <_strtoul_l.constprop.0>

080094f8 <memmove>:
 80094f8:	4288      	cmp	r0, r1
 80094fa:	b510      	push	{r4, lr}
 80094fc:	eb01 0402 	add.w	r4, r1, r2
 8009500:	d902      	bls.n	8009508 <memmove+0x10>
 8009502:	4284      	cmp	r4, r0
 8009504:	4623      	mov	r3, r4
 8009506:	d807      	bhi.n	8009518 <memmove+0x20>
 8009508:	1e43      	subs	r3, r0, #1
 800950a:	42a1      	cmp	r1, r4
 800950c:	d008      	beq.n	8009520 <memmove+0x28>
 800950e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009516:	e7f8      	b.n	800950a <memmove+0x12>
 8009518:	4402      	add	r2, r0
 800951a:	4601      	mov	r1, r0
 800951c:	428a      	cmp	r2, r1
 800951e:	d100      	bne.n	8009522 <memmove+0x2a>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800952a:	e7f7      	b.n	800951c <memmove+0x24>

0800952c <_sbrk_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d06      	ldr	r5, [pc, #24]	@ (8009548 <_sbrk_r+0x1c>)
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	f7f7 fd6e 	bl	8001018 <_sbrk>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_sbrk_r+0x1a>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_sbrk_r+0x1a>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	200130f8 	.word	0x200130f8

0800954c <_malloc_usable_size_r>:
 800954c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009550:	1f18      	subs	r0, r3, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	bfbc      	itt	lt
 8009556:	580b      	ldrlt	r3, [r1, r0]
 8009558:	18c0      	addlt	r0, r0, r3
 800955a:	4770      	bx	lr

0800955c <_init>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	bf00      	nop
 8009560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009562:	bc08      	pop	{r3}
 8009564:	469e      	mov	lr, r3
 8009566:	4770      	bx	lr

08009568 <_fini>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr
